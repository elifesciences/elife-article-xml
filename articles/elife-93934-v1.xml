<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD with MathML3 v1.3 20210610//EN"  "JATS-archivearticle1-3-mathml3.dtd"><article xmlns:ali="http://www.niso.org/schemas/ali/1.0/" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article" dtd-version="1.3"><front><journal-meta><journal-id journal-id-type="nlm-ta">elife</journal-id><journal-id journal-id-type="publisher-id">eLife</journal-id><journal-title-group><journal-title>eLife</journal-title></journal-title-group><issn publication-format="electronic" pub-type="epub">2050-084X</issn><publisher><publisher-name>eLife Sciences Publications, Ltd</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="publisher-id">93934</article-id><article-id pub-id-type="doi">10.7554/eLife.93934</article-id><article-id pub-id-type="doi" specific-use="version">10.7554/eLife.93934.3</article-id><article-categories><subj-group subj-group-type="display-channel"><subject>Tools and Resources</subject></subj-group><subj-group subj-group-type="heading"><subject>Computational and Systems Biology</subject></subj-group><subj-group subj-group-type="heading"><subject>Immunology and Inflammation</subject></subj-group></article-categories><title-group><article-title>Enhancing TCR specificity predictions by combined pan- and peptide-specific training, loss-scaling, and sequence similarity integration</article-title></title-group><contrib-group><contrib contrib-type="author" id="author-355835"><name><surname>Jensen</surname><given-names>Mathias Fynbo</given-names></name><contrib-id authenticated="true" contrib-id-type="orcid">https://orcid.org/0009-0004-6664-448X</contrib-id><xref ref-type="aff" rid="aff1">1</xref><xref ref-type="fn" rid="con1"/><xref ref-type="fn" rid="conf1"/></contrib><contrib contrib-type="author" corresp="yes" id="author-247089"><name><surname>Nielsen</surname><given-names>Morten</given-names></name><contrib-id authenticated="true" contrib-id-type="orcid">https://orcid.org/0000-0001-7885-4311</contrib-id><email>morni@dtu.dk</email><xref ref-type="aff" rid="aff1">1</xref><xref ref-type="other" rid="fund1"/><xref ref-type="other" rid="fund2"/><xref ref-type="fn" rid="con2"/><xref ref-type="fn" rid="conf1"/></contrib><aff id="aff1"><label>1</label><institution-wrap><institution-id institution-id-type="ror">https://ror.org/04qtj9h94</institution-id><institution>Department of Health Technology, Section for Bioinformatics, Technical University of Denmark</institution></institution-wrap><addr-line><named-content content-type="city">Lyngby</named-content></addr-line><country>Denmark</country></aff></contrib-group><contrib-group content-type="section"><contrib contrib-type="editor"><name><surname>Sohn</surname><given-names>Jungsan</given-names></name><role>Reviewing Editor</role><aff><institution-wrap><institution-id institution-id-type="ror">https://ror.org/02nfzhn33</institution-id><institution>Johns Hopkins University School of Medicine</institution></institution-wrap><country>United States</country></aff></contrib><contrib contrib-type="senior_editor"><name><surname>Rath</surname><given-names>Satyajit</given-names></name><role>Senior Editor</role><aff><institution-wrap><institution-id institution-id-type="ror">https://ror.org/00djv2c17</institution-id><institution>Indian Institute of Science Education and Research (IISER)</institution></institution-wrap><country>India</country></aff></contrib></contrib-group><pub-date publication-format="electronic" date-type="publication"><day>04</day><month>03</month><year>2024</year></pub-date><volume>12</volume><elocation-id>RP93934</elocation-id><history><date date-type="sent-for-review" iso-8601-date="2023-11-07"><day>07</day><month>11</month><year>2023</year></date></history><pub-history><event><event-desc>This manuscript was published as a preprint.</event-desc><date date-type="preprint" iso-8601-date="2023-10-16"><day>16</day><month>10</month><year>2023</year></date><self-uri content-type="preprint" xlink:href="https://doi.org/10.1101/2023.10.12.562001"/></event><event><event-desc>This manuscript was published as a reviewed preprint.</event-desc><date date-type="reviewed-preprint" iso-8601-date="2023-12-20"><day>20</day><month>12</month><year>2023</year></date><self-uri content-type="reviewed-preprint" xlink:href="https://doi.org/10.7554/eLife.93934.1"/></event><event><event-desc>The reviewed preprint was revised.</event-desc><date date-type="reviewed-preprint" iso-8601-date="2024-02-02"><day>02</day><month>02</month><year>2024</year></date><self-uri content-type="reviewed-preprint" xlink:href="https://doi.org/10.7554/eLife.93934.2"/></event></pub-history><permissions><copyright-statement>© 2023, Jensen and Nielsen</copyright-statement><copyright-year>2023</copyright-year><copyright-holder>Jensen and Nielsen</copyright-holder><ali:free_to_read/><license xlink:href="http://creativecommons.org/licenses/by/4.0/"><ali:license_ref>http://creativecommons.org/licenses/by/4.0/</ali:license_ref><license-p>This article is distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution License</ext-link>, which permits unrestricted use and redistribution provided that the original author and source are credited.</license-p></license></permissions><self-uri content-type="pdf" xlink:href="elife-93934-v1.pdf"/><self-uri content-type="figures-pdf" xlink:href="elife-93934-figures-v1.pdf"/><abstract><p>Predicting the interaction between Major Histocompatibility Complex (MHC) class I-presented peptides and T-cell receptors (TCR) holds significant implications for vaccine development, cancer treatment, and autoimmune disease therapies. However, limited paired-chain TCR data, skewed towards well-studied epitopes, hampers the development of pan-specific machine-learning (ML) models. Leveraging a larger peptide-TCR dataset, we explore various alterations to the ML architectures and training strategies to address data imbalance. This leads to an overall improved performance, particularly for peptides with scant TCR data. However, challenges persist for unseen peptides, especially those distant from training examples. We demonstrate that such ML models can be used to detect potential outliers, which when removed from training, leads to augmented performance. Integrating pan-specific and peptide-specific models alongside with similarity-based predictions, further improves the overall performance, especially when a low false positive rate is desirable. In the context of the IMMREP22 benchmark, this modeling framework attained state-of-the-art performance. Moreover, combining these strategies results in acceptable predictive accuracy for peptides characterized with as little as 15 positive TCRs. This observation places great promise on rapidly expanding the peptide covering of the current models for predicting TCR specificity. The NetTCR 2.2 model incorporating these advances is available on GitHub (<ext-link ext-link-type="uri" xlink:href="https://github.com/mnielLab/NetTCR-2.2">https://github.com/mnielLab/NetTCR-2.2</ext-link>) and as a web server at <ext-link ext-link-type="uri" xlink:href="https://services.healthtech.dtu.dk/services/NetTCR-2.2/">https://services.healthtech.dtu.dk/services/NetTCR-2.2/</ext-link>.</p></abstract><kwd-group kwd-group-type="author-keywords"><kwd>TCR specificity</kwd><kwd>machine learning</kwd><kwd>immunology</kwd><kwd>bioinformatics</kwd></kwd-group><kwd-group kwd-group-type="research-organism"><title>Research organism</title><kwd>Human</kwd></kwd-group><funding-group><award-group id="fund1"><funding-source><institution-wrap><institution>Inno4Vac</institution></institution-wrap></funding-source><award-id>101007799</award-id><principal-award-recipient><name><surname>Nielsen</surname><given-names>Morten</given-names></name></principal-award-recipient></award-group><award-group id="fund2"><funding-source><institution-wrap><institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100000060</institution-id><institution>National Institute of Allergy and Infectious Diseases</institution></institution-wrap></funding-source><award-id>75N93019C00001</award-id><principal-award-recipient><name><surname>Nielsen</surname><given-names>Morten</given-names></name></principal-award-recipient></award-group><funding-statement>The funders had no role in study design, data collection and interpretation, or the decision to submit the work for publication.</funding-statement></funding-group><custom-meta-group><custom-meta specific-use="meta-only"><meta-name>Author impact statement</meta-name><meta-value>NetTCR 2.2 demonstrates advances in predicting MHC-peptide-TCR interactions through integration of pan- and peptide-specific training strategies, loss-scaling and sequence similarity scoring.</meta-value></custom-meta><custom-meta specific-use="meta-only"><meta-name>publishing-route</meta-name><meta-value>prc</meta-value></custom-meta></custom-meta-group></article-meta></front><body><sec id="s1" sec-type="intro"><title>Introduction</title><p>T-cell mediated immune responses play a crucial role in safeguarding the body’s health by identification and elimination of pathogen infected and malfunctioning cells. One of the essential steps triggering the T-cell response is the recognition of peptides presented by MHC (Major Histocompatibility Complex) at the surface of cells by T cell receptors (TCR). The TCR is heterodimer (most often) formed by an α and a β chain. To be able to recognize the extreme variety of peptides presented by the MHC, the repertoire of different TCRs expressed by T cells in a given host is immense. This variation is mostly limited to the interacting domains of the TCR, known as the complementary determining regions (CDRs) (<xref ref-type="bibr" rid="bib4">Davis and Bjorkman, 1988</xref>).</p><p>The possibility of accurately predicting TCR specificity holds immense immunotherapeutic and biotechnological potentials, for instance as a means to rapidly and cost-effectively identify the target of relevant T cell populations in the context of antigen discovery, vaccine design and/or T cell therapy.</p><p>However, while machine-learning (ML) approaches have allowed to accurately predicts which peptides can be presented by the MHC (<xref ref-type="bibr" rid="bib23">Nielsen et al., 2020</xref>), the scarce data, combined with the extreme variability of the TCR, has made it difficult to produce models with broad peptide-HLA coverage with similar accuracies for predictions of TCR specificity. Several models ranging from neural network models to similarity-based approaches have, however, allowed for development of accurate prediction models covering the limited set of peptides, for which sufficient data is available (<xref ref-type="bibr" rid="bib11">Hudson et al., 2023</xref>).</p><p>Current ML-based methods for predicting TCR-specificity include convolutional neural network (CNN) models, such as ImRex (<xref ref-type="bibr" rid="bib22">Moris et al., 2021</xref>), TCRAI (<xref ref-type="bibr" rid="bib34">Zhang et al., 2021</xref>) and NetTCR 2.1 (<xref ref-type="bibr" rid="bib20">Montemurro et al., 2022</xref>), auto-encoder-based models such as DeepTCR (<xref ref-type="bibr" rid="bib29">Sidhom et al., 2021</xref>) decision-tree models such as SETE (<xref ref-type="bibr" rid="bib30">Tong et al., 2020</xref>)<bold>,</bold> Gaussian process models such as TCRGP (<xref ref-type="bibr" rid="bib12">Jokinen et al., 2021</xref>), as well as transformer-based models such as TULIP (<xref ref-type="bibr" rid="bib16">Meynard-Piganeau et al., 2023</xref>). Furthermore, unsupervised similarity-based methods have been developed, such as TCRdist3 (<xref ref-type="bibr" rid="bib15">Mayer-Blackwell et al., 2021</xref>), GLIPH2 (<xref ref-type="bibr" rid="bib10">Huang et al., 2020</xref>) and TCRbase (<xref ref-type="bibr" rid="bib20">Montemurro et al., 2022</xref>; <xref ref-type="bibr" rid="bib28">Shen et al., 2012</xref>). However, many more models exist, and new models are constantly being proposed (refer to <xref ref-type="bibr" rid="bib11">Hudson et al., 2023</xref> and <xref ref-type="bibr" rid="bib17">Meysman et al., 2023</xref> for recent reviews).</p><p>Going back just a few years, the majority of models for TCR specificity predictions were based on single chain data, most often CDR3β, since this data was (and still is) much more abundant than paired chain data (e.g. comprising both the α- and β-chain). However, with the emergence of single-cell sequencing techniques, the volume of paired data has started to increase. Recent benchmarks have shown that training models on both chains leads to vastly improved predictive performance, compared to training on single chain data alone (<xref ref-type="bibr" rid="bib17">Meysman et al., 2023</xref>). This performance is improved even further when also including the CDR1 and CDR2 sequences of the chains, either as amino acid sequences or implicitly through annotated V- and J-genes (from which the CDR1 and CDR2 sequences are determined).</p><p>While similarity-based methods have been shown to perform almost on par with ML-based models in cases where high similarity exist between the training and evaluation data and where many positive TCR observations are present for a given peptide, these approaches tend to be surpassed by ML methods when this similarity is decreased (<xref ref-type="bibr" rid="bib20">Montemurro et al., 2022</xref>; <xref ref-type="bibr" rid="bib17">Meysman et al., 2023</xref>).</p><p>Earlier work has been estimated that ~150 unique TCRs are required to construct an accurate ML prediction model capturing the rules of TCR specificity towards a specific peptide (<xref ref-type="bibr" rid="bib19">Montemurro et al., 2021</xref>), and that very limited if any predictive power can be maintained when predicting specificity towards peptides, for which no binding TCRs have been recorded (<xref ref-type="bibr" rid="bib22">Moris et al., 2021</xref>; <xref ref-type="bibr" rid="bib7">Grazioli et al., 2022</xref>). This lack of extrapolative power is the single most current challenging factor within the field of TCR specificity prediction. In order to predict binding for unseen peptides, models are required to be trained in a pan-specific setup, where a model is trained on data covering many different peptides at once including the peptide sequence as input to the model. Such a setup has with high success been applied for the MHC system where pan-specific models have been developed on data spanning large sets of different MHC molecules resulting in high extrapolation power also for molecules not included in the training data (<xref ref-type="bibr" rid="bib27">Reynisson et al., 2020</xref>; <xref ref-type="bibr" rid="bib24">Nilsson et al., 2023</xref>).</p><p>While many of the current day models for TCR specificity predictions are trained in this way, no models have so far been able to obtain substantial performance when predicting binding for unseen peptides that are not highly similar to already seen peptides. The main problem limiting the power of extrapolation for these pan-specific models lies in the scarcity of data available for training, especially so for paired-chain data, combined with the problem that the current data is highly imbalanced towards only a few peptides. Moreover, while the availability of data has increased recently, another problem is the high proportion of noise contained within the data produced with the current single-cell high-throughput sequencing methods (<xref ref-type="bibr" rid="bib34">Zhang et al., 2021</xref>; <xref ref-type="bibr" rid="bib21">Montemurro et al., 2023</xref>). Statistical denoising methods have been proposed to deal with this problem (<xref ref-type="bibr" rid="bib34">Zhang et al., 2021</xref>; <xref ref-type="bibr" rid="bib26">Povlsen et al., 2023</xref>). However, these methods are naturally challenged when dealing with small T cell populations, and due to their statistical nature likely share suboptimal sensitivity (i.e. remove true data) and specificity (i.e. allow false positives to slip through) (<xref ref-type="bibr" rid="bib34">Zhang et al., 2021</xref>; <xref ref-type="bibr" rid="bib21">Montemurro et al., 2023</xref>).</p><p>In this manuscript, we seek to address these issues in the context of a large data set of paired TCRs with annotated pMHC specificity. We investigate impacts of refining the machine learning model architecture and training setup to achieve pan-specific models with improved generalization capabilities. Further, strategies such as data denoising in terms of outlier identification in the training data, and inclusion of redundant data during training, is explored. We also investigate a new model architecture which combines the properties of a pan- and peptide-specific model, and explore how a similarity based approach can be integrated into the framework to boost model performance.</p></sec><sec id="s2" sec-type="materials|methods"><title>Materials and methods</title><sec id="s2-1"><title>Training data</title><p>The initial data was acquired from IEDB (<xref ref-type="bibr" rid="bib33">Vita et al., 2019</xref>) and VDJdb (<xref ref-type="bibr" rid="bib2">Bagaev et al., 2020</xref>) on the 23rd and 24th of August 2022, respectively, using a query to select only positive T-cell assays for MHC class I and Human cells. Additionally, only paired-chain (αβ) data was collected. This resulted in a dataset of 21,825 observations across 631 peptides for IEDB and 27,005 observations across 898 peptides for VDJdb.</p><p>This data was subsequently filtered to exclude data originating from 10 X sequencing, which was done by manually investigating references with at least 100 observations. Furthermore, filtering was conducted to include only observations with annotated V and J genes and fully specified MHC alleles. In cases where the V and J genes did not have a fully specified allele, the most common allele (*01) was assigned. Furthermore, CDR3 sequences which did not follow the nomenclature of beginning with a cysteine and ending with a phenylalanine (F) or tryptophan (W) were modified to follow this nomenclature by adding a cysteine to the start of the sequence if missing, and adding phenylalanine to the end of the sequence if phenylalanine or tryptophan was not present at the end of the sequence. This filtering resulted in 4439 observations across 405 peptides after merging the two datasets together and dropping duplicate entries.</p><p>Next, a dataset from a 10 x sequencing study (<xref ref-type="bibr" rid="bib1">10x Genomics, 2020</xref>) which was denoised with iTRAP (<xref ref-type="bibr" rid="bib26">Povlsen et al., 2023</xref>) was included, resulting in a combined dataset of 10,239 observations across 435 peptides.</p><p>To retrieve the full TCR sequences required for annotating all CDRs, <italic>Stitchr</italic> (<xref ref-type="bibr" rid="bib8">Heather et al., 2022</xref>) was used. In brief, <italic>Stitchr</italic> looks up the sequences for the V and J genes in IMGT/GENE-DB and attempts to align these sequences with the specified CDR3 amino acid sequence. In case of mismatches in the alignment, the CDR3-proximal residues of the V and J gene products, respectively, are progressively removed until a match can be found. As the alignment failed on either one chain or both for some of the sequences, 9045 full TCR sequences were retrieved in this step.</p><p>In cases where <italic>Stitchr</italic> failed to reconstruct the TCR, a second run of <italic>Stitchr</italic> was performed where tryptophan was added instead of phenylalanine for the CDR3s with the wrong nomenclature. This resulted in the rescue of 20 additional TCR sequences, bringing the total number of full TCR sequences up to 9065 (88.5% of the inputs given to <italic>Stitchr</italic>).</p><p>Finally, the CDR1, CDR2, and CDR3 amino acid sequences were annotated by submitting the full TCR sequences to the <italic>ANARCI</italic> software (<xref ref-type="bibr" rid="bib5">Dunbar and Deane, 2016</xref>), which is a tool that is used for annotating the sequences according to the IMGT naming scheme (<xref ref-type="bibr" rid="bib14">Lefranc et al., 2003</xref>). Here, CDR1 was defined as position 27–38, CDR2 as position 56–65 and CDR3 as position 105–117.</p></sec><sec id="s2-2"><title>Redundancy reduction</title><p>The CDR-annotated data was redundancy reduced in two steps using the Hobohm 1 algorithm (<xref ref-type="bibr" rid="bib9">Hobohm et al., 1992</xref>) based on a summed BLOSUM62 encoded kernel similarity (<xref ref-type="bibr" rid="bib28">Shen et al., 2012</xref>) of CDR3α and CDR3β. In the first step, the dataset was split according to peptides, and a redundancy reduction was carried out separately for TCRs belonging to each unique peptide using a 0.95 kernel similarity threshold. Here, only peptides with at least 30 unique TCRs after the first redundancy reduction were kept. This redundancy reduction and filtering resulted in a dataset of 6415 observations across 26 peptides.</p><p>A second redundancy reduction was subsequently carried out also at a 0.95 kernel similarity threshold across all remaining observations and peptides, where the data was sorted by peptide according to TCR count (least abundant to most abundant) in order to limit the risk of removing observations from peptides with few observations. This resulted in the further removal of 68 observations, resulting in a final dataset of 6,353 positive observations across 26 peptides. The amount of redundant data removed by the redundancy reductions are summarized in <xref ref-type="table" rid="table1">Table 1</xref>, as well as information regarding source organism and MHC allele for each peptide, and number of observations originating from 10 X sequencing data. The vast majority of 10 X data comes from the iTRAP filtered dataset, with a few observations originating from other 10 X studies that managed to slip through the initial manual filtering.</p><table-wrap id="table1" position="float"><label>Table 1.</label><caption><title>Per peptide overview of the full positive training data.</title><p>The source organism for each epitope, as well as the MHC allele which they bind to, are here shown. Additionally, the number of observations discarded during each redundancy reduction step, as well as the total remaining number of observations, are also listed, along with the number of observations originating from 10 x sequencing.</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left" valign="bottom">Peptide</th><th align="left" valign="bottom">Organism</th><th align="left" valign="bottom">MHC</th><th align="left" valign="bottom">Pre reduction count</th><th align="left" valign="bottom">Removed in first reduction</th><th align="left" valign="bottom">Removed in second reduction</th><th align="left" valign="bottom">Post reduction count</th><th align="left" valign="bottom">Not 10 X</th><th align="left" valign="bottom">10 X</th></tr></thead><tbody><tr><td align="left" valign="bottom">GILGFVFTL</td><td align="left" valign="bottom">Influenza A virus</td><td align="left" valign="bottom">HLA-A*02:01</td><td align="left" valign="bottom">1897</td><td align="left" valign="bottom">645</td><td align="left" valign="bottom">127</td><td align="left" valign="bottom">1125</td><td align="left" valign="bottom">426</td><td align="left" valign="bottom">699</td></tr><tr><td align="left" valign="bottom">RAKFKQLL</td><td align="left" valign="bottom">Epstein Barr virus</td><td align="left" valign="bottom">HLA-B*08:01</td><td align="left" valign="bottom">1065</td><td align="left" valign="bottom">114</td><td align="left" valign="bottom">17</td><td align="left" valign="bottom">934</td><td align="left" valign="bottom">0</td><td align="left" valign="bottom">934</td></tr><tr><td align="left" valign="bottom">KLGGALQAK</td><td align="left" valign="bottom">Human CMV</td><td align="left" valign="bottom">HLA-A*03:01</td><td align="left" valign="bottom">912</td><td align="left" valign="bottom">8</td><td align="left" valign="bottom">2</td><td align="left" valign="bottom">902</td><td align="left" valign="bottom">0</td><td align="left" valign="bottom">902</td></tr><tr><td align="left" valign="bottom">AVFDRKSDAK</td><td align="left" valign="bottom">Epstein Barr virus</td><td align="left" valign="bottom">HLA-A*11:01</td><td align="left" valign="bottom">725</td><td align="left" valign="bottom">5</td><td align="left" valign="bottom">4</td><td align="left" valign="bottom">716</td><td align="left" valign="bottom">0</td><td align="left" valign="bottom">716</td></tr><tr><td align="left" valign="bottom">ELAGIGILTV</td><td align="left" valign="bottom">Melanoma neoantigen</td><td align="left" valign="bottom">HLA-A*02:01</td><td align="left" valign="bottom">435</td><td align="left" valign="bottom">6</td><td align="left" valign="bottom">3</td><td align="left" valign="bottom">426</td><td align="left" valign="bottom">55</td><td align="left" valign="bottom">371</td></tr><tr><td align="left" valign="bottom">NLVPMVATV</td><td align="left" valign="bottom">Human CMV</td><td align="left" valign="bottom">HLA-A*02:01</td><td align="left" valign="bottom">384</td><td align="left" valign="bottom">43</td><td align="left" valign="bottom">11</td><td align="left" valign="bottom">330</td><td align="left" valign="bottom">154</td><td align="left" valign="bottom">176</td></tr><tr><td align="left" valign="bottom">IVTDFSVIK</td><td align="left" valign="bottom">Epstein Barr virus</td><td align="left" valign="bottom">HLA-A*11:01</td><td align="left" valign="bottom">323</td><td align="left" valign="bottom">13</td><td align="left" valign="bottom">2</td><td align="left" valign="bottom">308</td><td align="left" valign="bottom">0</td><td align="left" valign="bottom">308</td></tr><tr><td align="left" valign="bottom">LLWNGPMAV</td><td align="left" valign="bottom">Yellow fever virus</td><td align="left" valign="bottom">HLA-A*02:01</td><td align="left" valign="bottom">322</td><td align="left" valign="bottom">72</td><td align="left" valign="bottom">21</td><td align="left" valign="bottom">229</td><td align="left" valign="bottom">229</td><td align="left" valign="bottom">0</td></tr><tr><td align="left" valign="bottom">CINGVCWTV</td><td align="left" valign="bottom">Hepatitis C virus</td><td align="left" valign="bottom">HLA-A*02:01</td><td align="left" valign="bottom">231</td><td align="left" valign="bottom">4</td><td align="left" valign="bottom">1</td><td align="left" valign="bottom">226</td><td align="left" valign="bottom">75</td><td align="left" valign="bottom">151</td></tr><tr><td align="left" valign="bottom">GLCTLVAML</td><td align="left" valign="bottom">Epstein Barr virus</td><td align="left" valign="bottom">HLA-A*02:01</td><td align="left" valign="bottom">278</td><td align="left" valign="bottom">59</td><td align="left" valign="bottom">7</td><td align="left" valign="bottom">212</td><td align="left" valign="bottom">95</td><td align="left" valign="bottom">117</td></tr><tr><td align="left" valign="bottom">SPRWYFYYL</td><td align="left" valign="bottom">SARS-CoV2</td><td align="left" valign="bottom">HLA-B*07:02</td><td align="left" valign="bottom">158</td><td align="left" valign="bottom">4</td><td align="left" valign="bottom">5</td><td align="left" valign="bottom">149</td><td align="left" valign="bottom">149</td><td align="left" valign="bottom">0</td></tr><tr><td align="left" valign="bottom">ATDALMTGF</td><td align="left" valign="bottom">Hepatitis C virus</td><td align="left" valign="bottom">HLA-A*01:01</td><td align="left" valign="bottom">128</td><td align="left" valign="bottom">21</td><td align="left" valign="bottom">4</td><td align="left" valign="bottom">103</td><td align="left" valign="bottom">0</td><td align="left" valign="bottom">103</td></tr><tr><td align="left" valign="bottom">DATYQRTRALVR</td><td align="left" valign="bottom">Influenza A virus</td><td align="left" valign="bottom">HLA-A*68:01</td><td align="left" valign="bottom">100</td><td align="left" valign="bottom">4</td><td align="left" valign="bottom">3</td><td align="left" valign="bottom">93</td><td align="left" valign="bottom">93</td><td align="left" valign="bottom">0</td></tr><tr><td align="left" valign="bottom">KSKRTPMGF</td><td align="left" valign="bottom">Hepatitis C virus</td><td align="left" valign="bottom">HLA-B*57:01</td><td align="left" valign="bottom">115</td><td align="left" valign="bottom">14</td><td align="left" valign="bottom">12</td><td align="left" valign="bottom">89</td><td align="left" valign="bottom">0</td><td align="left" valign="bottom">89</td></tr><tr><td align="left" valign="bottom">YLQPRTFLL</td><td align="left" valign="bottom">SARS-CoV2</td><td align="left" valign="bottom">HLA-A*02:01</td><td align="left" valign="bottom">69</td><td align="left" valign="bottom">6</td><td align="left" valign="bottom">1</td><td align="left" valign="bottom">62</td><td align="left" valign="bottom">54</td><td align="left" valign="bottom">8</td></tr><tr><td align="left" valign="bottom">HPVTKYIM</td><td align="left" valign="bottom">Hepatitis C virus</td><td align="left" valign="bottom">HLA-B*08:01</td><td align="left" valign="bottom">60</td><td align="left" valign="bottom">5</td><td align="left" valign="bottom">2</td><td align="left" valign="bottom">53</td><td align="left" valign="bottom">0</td><td align="left" valign="bottom">53</td></tr><tr><td align="left" valign="bottom">RFPLTFGWCF</td><td align="left" valign="bottom">HIV-1</td><td align="left" valign="bottom">HLA-A*24:02</td><td align="left" valign="bottom">58</td><td align="left" valign="bottom">7</td><td align="left" valign="bottom">0</td><td align="left" valign="bottom">51</td><td align="left" valign="bottom">51</td><td align="left" valign="bottom">0</td></tr><tr><td align="left" valign="bottom">GPRLGVRAT</td><td align="left" valign="bottom">Hepatitis C virus</td><td align="left" valign="bottom">HLA-B*07:02</td><td align="left" valign="bottom">51</td><td align="left" valign="bottom">3</td><td align="left" valign="bottom">0</td><td align="left" valign="bottom">48</td><td align="left" valign="bottom">0</td><td align="left" valign="bottom">48</td></tr><tr><td align="left" valign="bottom">CTELKLSDY</td><td align="left" valign="bottom">Influenza A virus</td><td align="left" valign="bottom">HLA-A*01:01</td><td align="left" valign="bottom">48</td><td align="left" valign="bottom">0</td><td align="left" valign="bottom">0</td><td align="left" valign="bottom">48</td><td align="left" valign="bottom">48</td><td align="left" valign="bottom">0</td></tr><tr><td align="left" valign="bottom">RLRAEAQVK</td><td align="left" valign="bottom">Epstein Barr virus</td><td align="left" valign="bottom">HLA-A*03:01</td><td align="left" valign="bottom">47</td><td align="left" valign="bottom">0</td><td align="left" valign="bottom">0</td><td align="left" valign="bottom">47</td><td align="left" valign="bottom">0</td><td align="left" valign="bottom">47</td></tr><tr><td align="left" valign="bottom">RLPGVLPRA</td><td align="left" valign="bottom">AML neoantigen</td><td align="left" valign="bottom">HLA-A*02:01</td><td align="left" valign="bottom">43</td><td align="left" valign="bottom">0</td><td align="left" valign="bottom">0</td><td align="left" valign="bottom">43</td><td align="left" valign="bottom">0</td><td align="left" valign="bottom">43</td></tr><tr><td align="left" valign="bottom">SLFNTVATLY</td><td align="left" valign="bottom">HIV-1</td><td align="left" valign="bottom">HLA-A*02:01</td><td align="left" valign="bottom">38</td><td align="left" valign="bottom">0</td><td align="left" valign="bottom">0</td><td align="left" valign="bottom">38</td><td align="left" valign="bottom">0</td><td align="left" valign="bottom">38</td></tr><tr><td align="left" valign="bottom">RPPIFIRRL</td><td align="left" valign="bottom">Epstein Barr virus</td><td align="left" valign="bottom">HLA-B*07:02</td><td align="left" valign="bottom">40</td><td align="left" valign="bottom">2</td><td align="left" valign="bottom">2</td><td align="left" valign="bottom">36</td><td align="left" valign="bottom">24</td><td align="left" valign="bottom">12</td></tr><tr><td align="left" valign="bottom">FEDLRLLSF</td><td align="left" valign="bottom">Influenza A virus</td><td align="left" valign="bottom">HLA-B*37:01</td><td align="left" valign="bottom">31</td><td align="left" valign="bottom">0</td><td align="left" valign="bottom">0</td><td align="left" valign="bottom">31</td><td align="left" valign="bottom">31</td><td align="left" valign="bottom">0</td></tr><tr><td align="left" valign="bottom">VLFGLGFAI</td><td align="left" valign="bottom">T1D neoantigen</td><td align="left" valign="bottom">HLA-A*02:01</td><td align="left" valign="bottom">32</td><td align="left" valign="bottom">1</td><td align="left" valign="bottom">0</td><td align="left" valign="bottom">31</td><td align="left" valign="bottom">31</td><td align="left" valign="bottom">0</td></tr><tr><td align="left" valign="bottom">FEDLRVLSF</td><td align="left" valign="bottom">Influenza A virus</td><td align="left" valign="bottom">HLA-B*37:01</td><td align="left" valign="bottom">36</td><td align="left" valign="bottom">0</td><td align="left" valign="bottom">13</td><td align="left" valign="bottom">23</td><td align="left" valign="bottom">23</td><td align="left" valign="bottom">0</td></tr></tbody></table></table-wrap></sec><sec id="s2-3"><title>Data partitioning and generation of swapped negatives</title><p>To prepare the data for model training, this data was randomly split into five partitions, and negatives were generated by swapping the TCRs for a given peptide with TCRs binding to other peptides. Here, such TCRs were only samples from peptides which had a Levenshtein distance greater than 3, to reduce the risk of generating false negatives. For each positive observation, five negative observations were generated using this approach, except for the GILGFVFTL peptide, where all TCRs from the other peptides were used as negatives, since there was not enough data to allow for a 1:5 positive to negative ratio for this peptide (a 1:4.647 ratio was achieved here). The generation of swapped negatives was done separately within each partition, in order to reduce the risk of data leakage.</p></sec><sec id="s2-4"><title>Baseline model</title><p>TCRbase (<xref ref-type="bibr" rid="bib20">Montemurro et al., 2022</xref>), a distance-based model, was used as the baseline model. For a given peptide, TCRbase calculated the similarity between sets of CDRs found in the test partition to all positive CDR sets found in the remaining partitions. In short, the similarity is calculated per CDR as the mean kernel-similarity of BLOSUM62-encoded kmers ranging from size 1–30 between the two sets of CDRs that are compared (<xref ref-type="bibr" rid="bib28">Shen et al., 2012</xref>). The weighting for the CDRs was set to 1,1,3,1,1,3 for CDR1α-, CDR2α-, CDR3α-, CDR1β-, CDR2β-, and CDR3β, respectively, in line with earlier recommendations (<xref ref-type="bibr" rid="bib20">Montemurro et al., 2022</xref>).</p></sec><sec id="s2-5"><title>CNN architecture</title><p>The CNN architecture for NetTCR 2.1 (<xref ref-type="bibr" rid="bib20">Montemurro et al., 2022</xref>) was reconstructed in Keras (<xref ref-type="bibr" rid="bib3">Chollet, 2015</xref>), in preparation for further updates to the architecture. In brief, the original architecture consists of a set of convolutional 1D layers for each input feature, where each layer has 16 filters of kernel size of 1, 3, 5, 7, and 9, respectively, which are activated by a sigmoid activation function. Each layer is then max-pooled, concatenated, and fed to a dense layer of size 32 followed by a linear output layer of size 1, representing the final prediction score. The outputs of both linear layers are activated by a sigmoid activation function.</p><p>Except for the first models referred to as NetTCR 2.1 (which ran in PyTorch <xref ref-type="bibr" rid="bib25">Paszke et al., 2019</xref>), the version 2.2 CNN models described in this paper used a slightly modified architecture compared to NetTCR 2.1. Here, the activation function for the max-pooling layer was replaced with a rectified linear unit (previously sigmoid), a dropout layer was introduced for the concatenated max-pooling output, and the size of the dense layer was doubled to 64 neurons. For the models utilizing dropout, a dropout rate of 0.6 was used. The models referred to here as NetTCR 2.1 uses the original pan-specific NetTCR 2.1 architecture (<xref ref-type="bibr" rid="bib20">Montemurro et al., 2022</xref>), which also includes convolutional filters for the peptide-sequence.</p></sec><sec id="s2-6"><title>Embedding</title><p>The input features for the CNN models consisted of peptide-, CDR1α-, CDR2α-, CDR3α-, CDR1β-, CDR2β-, and CDR3β-amino acid sequence. These were each represented using a BLOSUM50-embedding (calculated using a normalization factor of 5) and right-padded to the maximum length observed for that feature in the dataset, by assigning a vector of 20 times –1 for each missing residue. For reference, the maximum length observed was 12, 7, 8, 22, 6, 7, and 23 residues for the peptide-, CDR1α-, CDR2α-, CDR3α-, CDR1β-, CDR2β-, and CDR3β-amino acid sequences, respectively.</p></sec><sec id="s2-7"><title>Training setup and early stopping</title><p>All CNN models were trained in a nested cross-validation setup with four folds in the inner loop and fivefolds in the outer loop. Here, three partitions were used for training, one was used for validation, while the remaining partition was used as a test partition to evaluate the performance of the model. For all CNN models, Binary Cross Entropy was used as the loss function, and the Adam optimizer (<xref ref-type="bibr" rid="bib13">Kingma and Ba, 2014</xref>) was used for updating the weights during training. A learning rate of 0.001 was used for training of all models.</p><p>A patience of 200 epochs was used for the early stopping for the peptide-specific CNNs, whereas for the pan-specific CNNs, a patience of 100 epochs was used. The increased patience for the peptide-specific models was introduced to allow the models to escape local minima imposed by small training set sizes. For the NetTCR 2.1 models (PyTorch) (<xref ref-type="bibr" rid="bib25">Paszke et al., 2019</xref>), the validation loss was used as a stopping criterion for early stopping, and validation AUC 0.1 was used as the stopping criterion for the updated models in Keras.</p><p>For the pan-specific models, a batch size of 64 was used together with shuffling. For the peptide-specific models, an adaptive batch size was used, which ensured that no batch ended up having less than 32 observations. Here, it was first tested if it was possible to use a batch size of 64 while still having at least 32 observations for the final batch. If not, the default batch size of 64 was progressively increased by 1, until it was ensured that the final batch had at least 32 observations.</p></sec><sec id="s2-8"><title>Performance evaluation</title><p>The cross-validation setup results in four models generated in the inner loop. The test set predictions were then calculated from the average over the four predictions for each entry. The performance was evaluated on the five concatenated test sets in terms of AUC and AUC 0.1 on a per-peptide basis, as well as the unweighted and weighted average performance across all peptides:<disp-formula id="equ1"><mml:math id="m1"><mml:mrow><mml:mstyle displaystyle="true" scriptlevel="0"><mml:msub><mml:mi>M</mml:mi><mml:mrow><mml:mi>u</mml:mi><mml:mi>n</mml:mi><mml:mi>w</mml:mi><mml:mi>e</mml:mi><mml:mi>i</mml:mi><mml:mi>g</mml:mi><mml:mi>h</mml:mi><mml:mi>t</mml:mi><mml:mi>e</mml:mi><mml:mi>d</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mi>p</mml:mi><mml:mi>e</mml:mi><mml:mi>p</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>d</mml:mi><mml:mi>e</mml:mi></mml:mrow></mml:munder><mml:msub><mml:mi>M</mml:mi><mml:mrow><mml:mi>p</mml:mi><mml:mi>e</mml:mi><mml:mi>p</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>d</mml:mi><mml:mi>e</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:msub><mml:mi>N</mml:mi><mml:mrow><mml:mi>u</mml:mi><mml:mi>n</mml:mi><mml:mi>i</mml:mi><mml:mi>q</mml:mi><mml:mi>u</mml:mi><mml:mi>e</mml:mi><mml:mspace width="thinmathspace"/><mml:mi>p</mml:mi><mml:mi>e</mml:mi><mml:mi>p</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>d</mml:mi><mml:mi>e</mml:mi><mml:mi>s</mml:mi></mml:mrow></mml:msub></mml:mfrac></mml:mstyle></mml:mrow></mml:math></disp-formula><disp-formula id="equ2"><mml:math id="m2"><mml:msub><mml:mrow><mml:mi>M</mml:mi></mml:mrow><mml:mrow><mml:mi>w</mml:mi><mml:mi>e</mml:mi><mml:mi>i</mml:mi><mml:mi>g</mml:mi><mml:mi>h</mml:mi><mml:mi>t</mml:mi><mml:mi>e</mml:mi><mml:mi>d</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mrow><mml:msub><mml:mo>∑</mml:mo><mml:mrow><mml:mi>p</mml:mi><mml:mi>e</mml:mi><mml:mi>p</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>d</mml:mi><mml:mi>e</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:msub><mml:mrow><mml:mi>M</mml:mi></mml:mrow><mml:mrow><mml:mi>p</mml:mi><mml:mi>e</mml:mi><mml:mi>p</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>d</mml:mi><mml:mi>e</mml:mi></mml:mrow></mml:msub><mml:mo>∙</mml:mo><mml:mfrac><mml:mrow><mml:msub><mml:mrow><mml:mi>N</mml:mi></mml:mrow><mml:mrow><mml:mi>p</mml:mi><mml:mi>e</mml:mi><mml:mi>p</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>d</mml:mi><mml:mi>e</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>N</mml:mi></mml:mrow><mml:mrow><mml:mi>t</mml:mi><mml:mi>o</mml:mi><mml:mi>t</mml:mi><mml:mi>a</mml:mi><mml:mi>l</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mfrac></mml:mrow></mml:mrow></mml:math></disp-formula></p><p>where <italic>M<sub>unweighted</sub></italic> and <italic>M<sub>weighted</sub></italic> is the unweighted and weighted average metric, respectively, <italic>M<sub>peptide</sub></italic> is the metric for a given peptide, <italic>N<sub>peptide</sub></italic> is the number of positive observations for a given peptide, <italic>N<sub>unique peptides</sub></italic> is the number of unique peptides, and <italic>N</italic><sub>total</sub> is the total number of positive observations across all peptides.</p><p>A summary of the per-peptide performance of all models is found in <xref ref-type="supplementary-material" rid="supp1">Supplementary file 1</xref>.</p></sec><sec id="s2-9"><title>Performance comparisons</title><p>To assess the difference in performance between models, bootstraps were performed by sampling with replacement from the model predictions 10,000 times and calculating the weighted and unweighted performance metrics for each subsample as described above. The same seed for subsampling and order of predictions was used for all bootstraps, to ensure that performance within a given subsample could be compared between models. The p-value for the null hypothesis that two models had equal performance was then calculated as the number of times that the first model had a higher performance than the second model within the same subsample, normalized by the total number of subsamples.</p></sec><sec id="s2-10"><title>Weighted loss</title><p>A weighted loss was implemented for the pan-specific CNN model to allow the model to focus more on the observations from the less abundant peptides in the training dataset. Here, the binary cross entropy loss for observations from each peptide was weighted according to the formula:<disp-formula id="equ3"><mml:math id="m3"><mml:mi>l</mml:mi><mml:mi>o</mml:mi><mml:mi>s</mml:mi><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mi>w</mml:mi><mml:mi>e</mml:mi><mml:mi>i</mml:mi><mml:mi>g</mml:mi><mml:mi>h</mml:mi><mml:mi>t</mml:mi><mml:mi>e</mml:mi><mml:mi>d</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mi>l</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi><mml:mn>2</mml:mn><mml:mfenced separators="|"><mml:mrow><mml:mfrac><mml:mrow><mml:msub><mml:mrow><mml:mi>N</mml:mi></mml:mrow><mml:mrow><mml:mi>t</mml:mi><mml:mi>o</mml:mi><mml:mi>t</mml:mi><mml:mi>a</mml:mi><mml:mi>l</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>N</mml:mi></mml:mrow><mml:mrow><mml:mi>p</mml:mi><mml:mi>e</mml:mi><mml:mi>p</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>d</mml:mi><mml:mi>e</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mfrac></mml:mrow></mml:mfenced></mml:mrow><mml:mrow><mml:mi>c</mml:mi></mml:mrow></mml:mfrac></mml:math></disp-formula></p><p>where N<sub>total</sub> is the total number of observations, N<sub>peptide</sub> is the number of observations for the given peptide, and c is a constant that is used to scale the loss, so the overall loss becomes close to that of the unweighted approach. The value of c was set to 3.8 to ensure that the overall weighted loss was comparable to the training done without sample weighting. For the peptide-specific models, a weight of 1 was used for all samples.</p></sec><sec id="s2-11"><title>Redundant training dataset</title><p>A dataset was constructed based on the primary training dataset, where redundant data from the first redundancy reduction (see <xref ref-type="table" rid="table1">Table 1</xref>) was added back by assigning them to the partition of the data point that they were redundant to. Only positive data was added back in this way, and additional swapped negatives were not generated for this dataset to keep it as similar to the original as possible. Models trained on this dataset were evaluated on the original test datasets without redundant data.</p></sec><sec id="s2-12"><title>Limited training dataset</title><p>Using the prediction scores for the validation partitions of the updated peptide-specific CNN model, additional datasets were constructed by removing observations that consistently received a poor prediction score in relation to their designated label. That is, positive observations were removed if they received a validation prediction score of less than the nth percentile of the negative prediction scores for the given peptide for all four models that were not trained on that partition, while negative observations were removed if they received a validation prediction score of more than the (1 – n)th percentile of the positive validation prediction scores for all four models that were not trained on that partition. Thresholds of n=50, 60, 70, 80, 85, 90, and 95 were tested in this way.</p></sec><sec id="s2-13"><title>Pre-trained models</title><p>A modified version of the NetTCR 2.2 architecture was made to combine the properties of the pan- and peptide-specific models, as shown in <xref ref-type="fig" rid="fig1">Figure 1</xref>. This architecture consists of a pan-specific and a peptide-specific CNN block. The pan-specific CNN block consists of 32 1D convolutional filters of size 1, 3, 5, 7, and 9, respectively for each of the peptide-, CDR1α-, CDR2α-, CDR3α-, CDR1β-, CDR2β-, and CDR3β embeddings. The peptide-specific CNN block consists of 16 1D convolutional filters, also of size 1, 3, 5, 7, and 9, respectively, for the same feature embeddings, except the peptide embedding, as this information is redundant when trained on a single peptide. The outputs from each CNN block are max-pooled with a rectified linear unit activation function, concatenated, and fed to two dropout layers with a dropout rate of 0.6, one for each output of a CNN block.</p><fig id="fig1" position="float"><label>Figure 1.</label><caption><title>Architecture of the pre-trained model.</title><p>The pan-specific CNN block consists of the layers shown in blue, whereas the peptide-specific CNN block consists of the layers shown in red. During the pan-specific training, the weights and biases for the peptide-specific CNN block are frozen, whereas the opposite is the case during the peptide-specific training. The layers shown in purple are kept unfrozen during both training steps.</p></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-93934-fig1-v1.tif"/></fig><p>Each of the two resulting tensors are fed separately to dense layers with 64 units and sigmoid activation, both of which are connected to a second dense layer with 32 units and a sigmoid activation. The output of the second dense layer is finally connected to an output layer of size 1, which is also activated by a sigmoid activation function, to give a prediction score between 0 and 1.</p><p>These models are trained in two rounds. During the first round of training, a pan-specific training is performed. Here the weights in the peptide-specific CNN block are kept frozen, as shown in <xref ref-type="fig" rid="fig1">Figure 1</xref>. This pre-trained model is then used as the starting point for a second round of training performed in a peptide-specific setup, where the weights in the pan-specific CNN block are frozen, while those in the peptide-specific CNN block are unfrozen. During both training rounds, a patience of 100 is used and the maximum number of epochs is set to 200.</p></sec><sec id="s2-14"><title>CNN – TCRbase ensemble</title><p>The pre-trained CNN model was combined with the sequence similarity based TCRbase model (<xref ref-type="bibr" rid="bib20">Montemurro et al., 2022</xref>; <xref ref-type="bibr" rid="bib28">Shen et al., 2012</xref>). The predictions for this new ensemble were calculated using the following formula:<disp-formula id="equ4"><mml:math id="m4"><mml:mrow><mml:msub><mml:mi>P</mml:mi><mml:mrow><mml:mi>T</mml:mi><mml:mi>C</mml:mi><mml:mi>R</mml:mi><mml:mi>b</mml:mi><mml:mi>a</mml:mi><mml:mi>s</mml:mi><mml:mi>e</mml:mi><mml:mspace width="thinmathspace"/><mml:mi>e</mml:mi><mml:mi>n</mml:mi><mml:mi>s</mml:mi><mml:mi>e</mml:mi><mml:mi>m</mml:mi><mml:mi>b</mml:mi><mml:mi>l</mml:mi><mml:mi>e</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:msub><mml:mi>P</mml:mi><mml:mrow><mml:mi>C</mml:mi><mml:mi>N</mml:mi><mml:mi>N</mml:mi></mml:mrow></mml:msub><mml:mo>⋅</mml:mo><mml:msubsup><mml:mi>P</mml:mi><mml:mrow><mml:mi>T</mml:mi><mml:mi>C</mml:mi><mml:mi>R</mml:mi><mml:mi>b</mml:mi><mml:mi>a</mml:mi><mml:mi>s</mml:mi><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>α</mml:mi></mml:mrow></mml:msubsup></mml:mrow></mml:math></disp-formula></p><p>where P<sub>TCRbase ensemble</sub> is the prediction of the combined ensemble, P<sub>CNN</sub> is the prediction of the CNN model, P<sub>TCRbase</sub> is the prediction from TCRbase, and α is a scaling factor used to give TCRs with low similarity to known binders a harsher penalty. This ensemble was tested on the validation partitions of the full dataset, where α was varied from 0 to 40.</p><p>The Pearson correlation coefficients between the α resulting in the best performance in terms of AUC and AUC 0.1, respectively, and the corresponding performance metric for the TCRbase and pre-trained model without scaling, was calculated using the <italic>pearsonr</italic> function from <italic>scipy.stats</italic> (<xref ref-type="bibr" rid="bib32">Virtanen et al., 2020</xref>). Five samples were used for each peptide, as there were five different validation partitions to consider, resulting in a total of 130 samples for calculating the Pearson correlation coefficients. p-Values for the null hypothesis that there was no correlation was also reported using this function.</p></sec><sec id="s2-15"><title>Percentile-rank rescaling</title><p>Prediction scores were rescaled to a percentile rank by comparing the score to the score distribution obtained for 15,957 negative controls paired to the corresponding peptide. These negative controls were obtained from the IMMREP 2022 workshop dataset (<xref ref-type="bibr" rid="bib17">Meysman et al., 2023</xref>). Here, the percentile rank score for a given TCRs was calculated as the percentage of negative controls which had a score above the score of that of the TCR.</p></sec><sec id="s2-16"><title>Peptide specificity test</title><p>To evaluate the models’ ability to correctly identify which peptide is most likely to bind a given TCR, all TCRs were paired with all peptides present within each partition, and predictions were performed by the models which had not seen the given partition during training. The specificity was then calculated per peptide as the number of times that the true peptide-TCR complex was given the highest prediction score, compared to the total number of positive observations in the original dataset for the given peptide. The test was performed on the limited dataset, where the peptides KLGGALQAK, AVFDRKSDAK, NLVPMVATV, CTELKLSDY, RLRAEAQVK, RLPGVLPRA, and SLFNTVATLY were discarded, due to low performance of the full model (AUC 0.1&lt;0.65).</p></sec><sec id="s2-17"><title>Leave most out</title><p>To test the models’ ability to learn from small data sets, models were re-trained on small subsets of the original data. For each of the peptides with at least 100 positive observations in the limited training dataset except for KLGGALQAK, AVFDRKSDAK, and NLVPMVATV (e.g. GILGFVFTL, RAKFKQLL, ELAGIGILTV, IVTDFSVIK, LLWNGPMAV, CINGVCWTV, GLCTLVAML and SPRWYFYYL were included), new training datasets were constructed by subsampling 5, 10, 15, 20, 25, 50, and 100 positive peptides, respectively, per partition, as well as five negative observations per positive. KLGGALQAK, AVFDRKSDAK, and NLVPMVATV were excluded from this analysis, due to low performance of the full model (AUC 0.1&lt;0.65). All models trained here were evaluated on the full dataset (not limited).</p><p>As a baseline, TCRbase was used to perform predictions on the test partitions, using the positives from the four remaining partitions as the positive database for similarity inference.</p><p>In addition, a set of peptide-specific models were also trained on these datasets, using the same hyperparameters as the best (non-pre-trained) peptide-specific model, when evaluated on the full dataset.</p><p>A set of pre-trained models were also re-trained on these datasets, where the first training round of the pan-specific CNN was conducted on the leave one out dataset. For each peptide and each number of positives, the pan-specific CNN block was fine-tuned by training for 30 epochs in a pan-specific setup, where observation for the leave-most-out peptide was assigned a sample weight of 1, while the observations for the remaining peptides were assigned a weight of 0.1. Swapped negatives assigned to other peptides than the one the models were trained for were removed for this training, if they originated from an observation belonging to the peptide in question. Following this, the pan-specific CNN block was frozen, and the peptide-specific CNN block was trained on the observations for the peptide of interest.</p><p>Finally, an ensemble consisting of the pre-trained models scaled by the TCRbase prediction (<italic>α</italic>=10) were evaluated (see CNN - TCRbase ensemble).</p><p>Due to the low number of positives for some of the leave-most-out datasets, the default batch size was set to 32 for the peptide-specific training, while the criteria for early stopping and model saving was changed from validation AUC 0.1 to a custom metric taking both validation AUC 0.1 and binary cross entropy loss into account. This custom metric was calculated as:<disp-formula id="equ5"><mml:math id="m5"><mml:mrow><mml:mi>C</mml:mi><mml:msub><mml:mi>M</mml:mi><mml:mrow><mml:mi>v</mml:mi><mml:mi>a</mml:mi><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>A</mml:mi><mml:mi>U</mml:mi><mml:mi>C</mml:mi><mml:mspace width="thinmathspace"/><mml:msub><mml:mn>0.1</mml:mn><mml:mrow><mml:mi>v</mml:mi><mml:mi>a</mml:mi><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo>−</mml:mo><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>s</mml:mi><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mi>v</mml:mi><mml:mi>a</mml:mi><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo>⋅</mml:mo><mml:mn>0.1</mml:mn></mml:mrow></mml:math></disp-formula></p><p>and the model was saved when this value was maximized. A patience of 100 was used for early stopping during the peptide-specific training.</p></sec><sec id="s2-18"><title>IMMREP 2022 training and evaluation</title><p>The labeled training and test data for the IMMREP 2022 workshop (<xref ref-type="bibr" rid="bib17">Meysman et al., 2023</xref>) was collected from GitHub (<ext-link ext-link-type="uri" xlink:href="https://github.com/viragbioinfo/IMMREP_2022_TCRSpecificity">GitHub - viragbioinfo/IMMREP_2022_TCRSpecificity</ext-link>; <xref ref-type="bibr" rid="bib31">viragbioinfo et al., 2022</xref>) on the 5th of July 2023. The training data was randomly split into five partitions, and models were trained in the same cross-validation as described above, for example nested cross-validation for the neural network models and a fivefold cross-validation for TCRbase. To make the data compatible with our models, the labels for the negative observations were changed from –1 to 0. The performance of each model was then evaluated on the separate test dataset, using the average in prediction score given by all models resulting from the cross-validation.</p><p>A separate redundancy reduced dataset was created based on the IMMREP dataset following the strategy described above. An overview of the number of observations removed by this redundancy reduction is shown in <xref ref-type="table" rid="table2">Table 2</xref>.</p><table-wrap id="table2" position="float"><label>Table 2.</label><caption><title>Overview of number of TCRs for each peptide in the IMMREP 2022 training dataset before and after redundancy reduction.</title><p>The redundancy reduction was performed using a kernel similarity threshold of 95%.</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left" valign="bottom">Peptide</th><th align="left" valign="bottom">Pre reduction count</th><th align="left" valign="bottom">Post reduction count</th><th align="left" valign="bottom">Percent redundant</th></tr></thead><tbody><tr><td align="left" valign="bottom">All</td><td align="left" valign="bottom">2445</td><td align="left" valign="bottom">1960</td><td align="left" valign="bottom">19.8%</td></tr><tr><td align="left" valign="bottom">GILGFVFTL</td><td align="left" valign="bottom">544</td><td align="left" valign="bottom">301</td><td align="left" valign="bottom">44.7%</td></tr><tr><td align="left" valign="bottom">NLVPMVATV</td><td align="left" valign="bottom">274</td><td align="left" valign="bottom">242</td><td align="left" valign="bottom">11.7%</td></tr><tr><td align="left" valign="bottom">YLQPRTFLL</td><td align="left" valign="bottom">267</td><td align="left" valign="bottom">227</td><td align="left" valign="bottom">15.0%</td></tr><tr><td align="left" valign="bottom">TTDPSFLGRY</td><td align="left" valign="bottom">193</td><td align="left" valign="bottom">187</td><td align="left" valign="bottom">3.1%</td></tr><tr><td align="left" valign="bottom">LLWNGPMAV</td><td align="left" valign="bottom">188</td><td align="left" valign="bottom">175</td><td align="left" valign="bottom">6.9%</td></tr><tr><td align="left" valign="bottom">CINGVCWTV</td><td align="left" valign="bottom">183</td><td align="left" valign="bottom">179</td><td align="left" valign="bottom">2.2%</td></tr><tr><td align="left" valign="bottom">GLCTLVAML</td><td align="left" valign="bottom">146</td><td align="left" valign="bottom">91</td><td align="left" valign="bottom">37.7%</td></tr><tr><td align="left" valign="bottom">ATDALMTGF</td><td align="left" valign="bottom">104</td><td align="left" valign="bottom">78</td><td align="left" valign="bottom">25.0%</td></tr><tr><td align="left" valign="bottom">LTDEMIAQY</td><td align="left" valign="bottom">100</td><td align="left" valign="bottom">94</td><td align="left" valign="bottom">6.0%</td></tr><tr><td align="left" valign="bottom">SPRWYFYYL</td><td align="left" valign="bottom">92</td><td align="left" valign="bottom">92</td><td align="left" valign="bottom">0.0%</td></tr><tr><td align="left" valign="bottom">KSKRTPMGF</td><td align="left" valign="bottom">85</td><td align="left" valign="bottom">63</td><td align="left" valign="bottom">25.9%</td></tr><tr><td align="left" valign="bottom">NQKLIANQF</td><td align="left" valign="bottom">56</td><td align="left" valign="bottom">53</td><td align="left" valign="bottom">5.4%</td></tr><tr><td align="left" valign="bottom">HPVTKYIM</td><td align="left" valign="bottom">48</td><td align="left" valign="bottom">41</td><td align="left" valign="bottom">14.6%</td></tr><tr><td align="left" valign="bottom">TPRVTGGGAM</td><td align="left" valign="bottom">45</td><td align="left" valign="bottom">44</td><td align="left" valign="bottom">2.2%</td></tr><tr><td align="left" valign="bottom">NYNYLYRLF</td><td align="left" valign="bottom">44</td><td align="left" valign="bottom">42</td><td align="left" valign="bottom">4.6%</td></tr><tr><td align="left" valign="bottom">GPRLGVRAT</td><td align="left" valign="bottom">40</td><td align="left" valign="bottom">37</td><td align="left" valign="bottom">7.5%</td></tr><tr><td align="left" valign="bottom">RAQAPPPSW</td><td align="left" valign="bottom">36</td><td align="left" valign="bottom">14</td><td align="left" valign="bottom">61.1%</td></tr></tbody></table></table-wrap><p>Swapped negatives were generated within each partition, by randomly sampling TCRs binding to other peptides with a Levenshtein distance of at least three, until a 1:3 ratio of positives to negatives were achieved. Negative controls were first subjected to a redundancy reduction at a 95% similarity threshold, followed by random partitioning. Within each partition, negative controls were sampled in a 1:2 ratio of positive to negatives for each peptide, bringing the total positive to negative ratio up to 1:5.</p><p>Models were then trained on this training dataset using nested cross-validation (or fivefold cross-validation for TCRbase), while the performance was evaluated on the test-partitions, which were not seen during training. The average prediction score of the four cross-validation models per test partition was used as the final prediction score for this performance evaluation. A summary of the per-peptide performance of all models trained and tested on the IMMREP 2022 dataset is found in <xref ref-type="supplementary-material" rid="supp2">Supplementary file 2</xref>.</p></sec></sec><sec id="s3" sec-type="results"><title>Results</title><p>Here, we seek to demonstrate step by step how improved low complexity models with state-of-the-art performance for the prediction of TCR specificity can be obtained by dealing with the essential issues related to data imbalance, low data accuracy and data volume. We do this on a large set of data obtained from the public domain covering paired full length TCR sequences with specificity annotated towards a set of 26 unique peptides (for details refer to Materials and methods). The machine learning framework applied is a low complexity max-pooled CNN architecture inspired by the original NetTCR model (<xref ref-type="bibr" rid="bib19">Montemurro et al., 2021</xref>). This model makes use of 80 convolutional filters for the peptide and each of the 6 CDRs. Due to the limited number of peptides (and HLAs), HLA is not included in the model.</p><p>The NetTCR framework has so far performed best in a peptide-specific setup where separate models are trained for individual peptides (<xref ref-type="bibr" rid="bib20">Montemurro et al., 2022</xref>). Ideally, one would like to construct pan-specific models trained across multiple peptides at once, since this should allow the model to leverage shared information resulting in boosted predictive power, especially for peptides characterized with few or even no positive TCR observations. However, for NetTCR 2.1, the opposite tendency was observed. This work was however limited to only 6 peptides, and we therefore first investigated if this conclusion still held true in the context of our data set with increased peptide coverage. The result of this analysis can be seen in <xref ref-type="fig" rid="fig2">Figure 2</xref> and demonstrates that peptide-specific models also here are superior to the pan-specific model.</p><fig id="fig2" position="float"><label>Figure 2.</label><caption><title>Per peptide performance of the peptide-specific and pan-specific NetTCR 2.1 in terms of AUC, when trained and evaluated on the new dataset.</title><p>The peptides are sorted based on the number of positive observations from most abundant to least abundant, with the number of positive observations listed next to the peptide sequence. The unweighted (direct) mean of AUC across all peptides is shown furthest to the left, while the weighted mean is shown second furthest to the left. The weighted mean is weighted by the number of positive observations per peptide and puts more emphasis on the peptides with the most observations. The models included in this figure corresponds to model 1 (NetTCR 2.1 - Pan) and model 2 (NetTCR 2.1 - Peptide) in <xref ref-type="supplementary-material" rid="supp1">Supplementary file 1</xref>.</p></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-93934-fig2-v1.tif"/></fig><sec id="s3-1"><title>Improving the pan-specific model</title><sec id="s3-1-1"><title>Updating the model architecture for pan-specific predictions</title><p>One potential source of the low performance for the pan-specific model is the high imbalance in the number of observations per peptide resulting in the model focusing/overfitting on the more abundant peptides. To investigate this, we first introduced a dropout-layer with a dropout rate of 0.6 to the architecture for the concatenated output of the max-pooling layer, while also doubling the number of neurons for the dense layer from 32 to 64 to allow for sufficient flow of information. Additionally, this model was rebuilt in Keras (<xref ref-type="bibr" rid="bib3">Chollet, 2015</xref>) and the stopping criterion was changed from validation loss to validation AUC 0.1. As shown in <xref ref-type="fig" rid="fig3">Figure 3</xref>, this resulted in a highly significant increase in performance (bootstrap test resulting in p&lt;0.0001 for all tested metrics).</p><fig-group><fig id="fig3" position="float"><label>Figure 3.</label><caption><title>Boxplot of AUC of the pan- and peptide-specific NetTCR 2.1 and 2.2 models, respectively.</title><p>The NetTCR 2.2 models include the updates to the model architecture, with the primary change being the introduction of dropout for the concatenated max-pooling layer (dropout rate = 0.6). Both the introduction of dropout and sample weights are shown to result in considerably improved performance for the pan-specific model. Separate boxplots are shown for all peptides, as well as separately for peptides with at least 100 positive observations and peptides with less than 100 positive observations, to highlight the effect of introducing dropout and sample weight for the least abundant peptides. The models included in this figure corresponds to model 1 (NetTCR 2.1 - Pan), model 3 (NetTCR 2.2 - Pan +Dropout), model 4 (NetTCR 2.2 - Pan +Dropout + Sample Weight), model 2 (NetTCR 2.1 - Peptide) and model 5 (NetTCR 2.2 - Peptide +Dropout) in <xref ref-type="supplementary-material" rid="supp1">Supplementary file 1</xref>.</p></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-93934-fig3-v1.tif"/></fig><fig id="fig3s1" position="float" specific-use="child-fig"><label>Figure 3—figure supplement 1.</label><caption><title>Boxplot of AUC 0.1 of the pan- and peptide-specific NetTCR 2.1 and 2.2 models, respectively.</title><p>The NetTCR 2.2 models include the updates to the model architecture, with the primary change being the introduction of dropout for the concatenated max-pooling layer (dropout rate = 0.6). Both the introduction of dropout and sample weights are shown to result in considerably improved performance for the pan-specific model. Separate boxplots are shown for all peptides, as well as separately for peptides with at least 100 positive observations and peptides with less than 100 positive observations, to highlight the effect of introducing dropout and sample weight for the least abundant peptides. The models included in this figure corresponds to model 1 (NetTCR 2.1 - Pan), model 3 (NetTCR 2.2 - Pan +Dropout), model 4 (NetTCR 2.2 - Pan +Dropout + Sample Weight), model 2 (NetTCR 2.1 - Peptide), and model 5 (NetTCR 2.2 - Peptide +Dropout) in <xref ref-type="supplementary-material" rid="supp1">Supplementary file 1</xref>.</p></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-93934-fig3-figsupp1-v1.tif"/></fig></fig-group><p>To further deal with the imbalance problem, we next introduced a peptide specific sample weight so that the loss was increased for peptides with a low number of positive observations (for details refer to Materials and methods). This is based on the notation that the model then would focus more on the less abundant peptides when updating the weights. As demonstrated in <xref ref-type="fig" rid="fig3">Figure 3</xref>, this approach resulted in a further increase in performance for the less abundant peptides, whereas the performance for the more abundant peptides was largely unaffected. Here, a significant increase in performance was observed for the unweighted mean AUC (p=0.0026) and AUC 0.1 (p&lt;0.0001).</p><p>Moreover, when only considering the peptides with less than 100 positive observations, the improvement in performance was significant across all metrics (p=0.0101, p=0.0035, p&lt;0.0001 and p&lt;0.0001 for AUC, weighted AUC, AUC 0.1 and weighted AUC 0.1, respectively).</p><p>Next, the impacts of the updates to the model architecture and training strategy on the performance of peptide-specific models was investigated. As expected, these results (<xref ref-type="fig" rid="fig3">Figure 3</xref> and <xref ref-type="fig" rid="fig3s1">Figure 3—figure supplement 1</xref>) demonstrated a limited gain in performance compared to NetTCR-2.1 - Peptide, which was however significant for all metrics (p=0.0337 for AUC, and p&lt;0.0001 for AUC 0.1 and weighted AUC/AUC 0.1). Interestingly, the updated pan-specific model significantly outperformed the updated peptide-specific models in terms of both unweighted (p&lt;0.0001) and weighted AUC (p=0.0004), and the performance gain was especially observed for the less abundant peptides. However, in terms of AUC 0.1, the updated peptide-specific model (NetTCR-2.2 - Peptide) maintained a superior performance (see <xref ref-type="fig" rid="fig3s1">Figure 3—figure supplement 1</xref>) (p=0.0008 and p&lt;0.0001 for AUC 0.1 and weighted AUC 0.1, respectively). We will later address how to get the best of the two models later in the Pre-training section.</p></sec><sec id="s3-1-2"><title>Reusing redundant data does not lead to better performance</title><p>The results until now have been generated based on redundancy reduced data. That is data where redundant data have been removed based on a Hobohm-1 like redundancy reduction algorithm (for details see Materials and methods). However, as data is very sparse, one could argue that a better approach would be to reuse redundant data, either by performing clustering when making the data partitions, or by adding back redundant data to the same partition as the data that it was redundant to. To test how such a strategy would affect the performance of the model, a new dataset was created using the latter approach. To keep the performance evaluation fair, redundant data were only re-introduced to the training dataset while the original dataset without redundant observations was used for testing and performance evaluation. The total number of redundant observations for each peptide from the first redundancy reduction is shown in <xref ref-type="table" rid="table1">Table 1</xref> (note that those from the second reduction are not added back).</p><p>As shown in <xref ref-type="fig" rid="fig4">Figure 4</xref>, neither the peptide- nor the pan-specific model benefitted from reusing the redundant data. In fact, the performance of the pan-specific model was significantly reduced in terms of unweighted AUC (p=0.0041) and weighted AUC 0.1 (p=0.0395). This is likely caused by the larger imbalance in observations per peptide introduced by the redundant data, as a large proportion of these observations came from the already abundant GILGFVFTL peptide.</p><fig id="fig4" position="float"><label>Figure 4.</label><caption><title>Mean AUC of the pan-specific and peptide-specific NetTCR 2.2 models, when training on the original redundancy reduced training data, and with redundant observations back.</title><p>The AUC is reported in terms of weighted and unweighted mean across all peptides, as well as unweighted mean when the data is split into peptides with at least 100 positive observations, and less than 100 positive observations. The models included in this figure corresponds to model 4 (NetTCR 2.2 - Pan), model 6 (NetTCR 2.2 - Pan - Add Redundant), model 5 (NetTCR 2.2 - Peptide), and model 7 (NetTCR 2.2 - Peptide - Add Redundant) in <xref ref-type="supplementary-material" rid="supp1">Supplementary file 1</xref>.</p></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-93934-fig4-v1.tif"/></fig></sec><sec id="s3-1-3"><title>Removing potential outliers from training leads to better performance</title><p>During the testing of our models, we observed that several peptides consistently had a performance much lower compared to other peptides characterized with similar amounts of data. One thing shared by these peptides is that 10 X sequencing made up the vast majority of the experimental source of the recorded TCRs, as shown in <xref ref-type="table" rid="table1">Table 1</xref>. For most of the peptides with poor performance (KLG, AVF, IVT, RLR, RLP, SLF), only 10 X sequencing data was available. On the other hand, not all 10 X data are bad, as illustrated by RAKFKQLL which is a high performing peptide only covered by 10 X data (see for instance <xref ref-type="supplementary-material" rid="supp1">Supplementary file 1</xref>). Further, when comparing the predicted score distributions between positive and negative TCRs, we observe examples of outliers with low scoring positive TCRs and high scoring negative TCRs across all peptides (see <xref ref-type="fig" rid="fig5s1">Figure 5—figure supplement 1</xref>). These observations strongly suggest that the data contain a certain degree of wrongly labeled entries, and that these could be a source to limit the performance of the models. Inspired by the plot in <xref ref-type="fig" rid="fig5s1">Figure 5—figure supplement 1</xref>, outliers were identified by scoring TCRs using the NetTCR-2.2 peptide-specific model, and positive and negative TCR outliers assessed based percentile scores estimated from the contrary TCR pool (for details refer to Materials and methods). Using this approach, TCRs were removed from the training data based on percentile thresholds of 50%, 60%, 70%, 80%, 85%, 90%, and 95% respectively. That is, for a threshold of 70%, a positive TCR was identified as an outlier if it had a predicted score below the lower 70% percentile score range of the negative TCRs for all models predicting on the validation data (four models per partition). Next, pan-specific models were trained using the “limited” data for training and validation, while evaluating the models based on the full dataset.</p><p>An overall increase in performance for the models trained on the limited datasets was observed up until the 70th percentile datasets, after which the performance gain stagnated (see <xref ref-type="fig" rid="fig5s2">Figure 5—figure supplement 2</xref>). Since the difference in performance between the 80th and 70th percentile model was statistically insignificant for any of the bootstrap metrics (p&gt;0.08 in all of weight and unweight performance metrics), the 70th percentile dataset for removing outliers from training was selected, since this filtering removed the least amount of data. As seen in <xref ref-type="fig" rid="fig5s3">Figure 5—figure supplement 3</xref>, more observations were, as expected, removed for the peptides with poor performance, indicating a higher presence of outliers for these peptides. The average performance of the model trained on the 70th percentile dataset was significantly higher than the model trained on the full dataset (p=0.0001, p&lt;0.0001, p=0.0054 and p&lt;0.0001 for AUC, weighted AUC, AUC 0.1 and weighted AUC 0.1, respectively). As shown in <xref ref-type="fig" rid="fig5">Figure 5</xref>, a higher performance was also consistently observed for the peptides which originated from 10 X sequencing, apart from the RLP peptide, which obtained a slightly lower AUC (–0.0066). While most peptides benefitted from the removal of potential outliers, some peptides did receive a substantially lower performance. It should however be noted that the performance evaluation was conducted on the full dataset, meaning that if a peptide has many actual outliers, the performance may be underestimated, since these outliers are included in the evaluation.</p><fig-group><fig id="fig5" position="float"><label>Figure 5.</label><caption><title>Difference in AUC between pan-specific CNN trained on the limited dataset (70th percentile) and full dataset.</title><p>Peptides with TCRs originating solely from 10 x sequencing are highlighted in red. The performance was in both cases evaluated per peptide on the full dataset. A positive ΔAUC indicates that the model trained on the limited dataset performs better than the model trained on the full dataset. The performance differences are based on the performance of model 10 and model 4 in <xref ref-type="supplementary-material" rid="supp1">Supplementary file 1</xref>, with model 4 being the baseline.</p></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-93934-fig5-v1.tif"/></fig><fig id="fig5s1" position="float" specific-use="child-fig"><label>Figure 5—figure supplement 1.</label><caption><title>Prediction values on the full test data for each peptide when predicted using the NetTCR 2.2 - Peptide model.</title><p>The prediction scores are shown for model 5 in <xref ref-type="supplementary-material" rid="supp1">Supplementary file 1</xref>.</p></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-93934-fig5-figsupp1-v1.tif"/></fig><fig id="fig5s2" position="float" specific-use="child-fig"><label>Figure 5—figure supplement 2.</label><caption><title>Mean AUC of the pan-specific NetTCR 2.2 models when trained on datasets with potential outliers removed.</title><p>The percentile refers to the threshold of prediction scores used for removing observations (see Materials and methods), and the higher the percentile is, the more observations are removed from training. The AUC is reported in terms of weighted and unweighted mean across all peptides, as well as unweighted mean when the data is split into peptides with at least 100 positive observations, and less than 100 positive observations. The performance is based on model 4 (All data), model 8 (50th percentile), model 9 (60th percentile), model 10 (70th percentile), model 11 (80th percentile), model 12 (85th percentile), model 13 (90th percentile), and model 14 (95th percentile) in <xref ref-type="supplementary-material" rid="supp1">Supplementary file 1</xref>.</p></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-93934-fig5-figsupp2-v1.tif"/></fig><fig id="fig5s3" position="float" specific-use="child-fig"><label>Figure 5—figure supplement 3.</label><caption><title>Percentage of observations discarded for the 70th percentile limited dataset, as a result of the removal of potential outliers.</title></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-93934-fig5-figsupp3-v1.tif"/></fig></fig-group></sec></sec><sec id="s3-2"><title>Improving the peptide-specific models</title><sec id="s3-2-1"><title>Pre-training</title><p>As described earlier, the pan-specific model was generally observed to excel in terms of AUC, whereas the peptide-specific model was better in terms of AUC 0.1.</p><p>To benefit from the strengths of both of these models, a new model architecture was investigated. In brief, this architecture consists of two blocks of CNNs; one which is used for training on a pan-specific dataset to learn a general representation of binding, while the other block is used to train on a peptide-specific dataset to better learn the pattern of binding specific to a certain peptide (for details refer to Materials and methods). The pan-specific CNN block was trained first, with frozen initial weights and biases in the peptide-specific CNN block. After pre-training the pan-specific CNN block, these pan-specific CNN layers were frozen, whereas the layers for the peptide-specific CNN were allowed to update during the peptide-specific training.</p><p>As shown in <xref ref-type="fig" rid="fig6">Figure 6</xref>, this pre-trained model outperformed both the pan- and peptide-specific models. This improvement was found to be highly significant (p&lt;0.0001) across all metrics, when compared to the bootstrap of the pan-specific model, which was also the case when comparing to the peptide-specific model (p&lt;0.0001, p&lt;0.0001, p=0.0008 and p=0.0021 for AUC, weighted AUC, AUC 0.1 and weighted AUC 0.1, respectively). Furthermore, this pre-trained model had higher performance across all metrics than a simple ensemble of the pan-specific and peptide-specific models (data not shown).</p><fig-group><fig id="fig6" position="float"><label>Figure 6.</label><caption><title>Per peptide performance of the updated peptide-specific, pan-specific, and pre-trained CNN in terms of AUC, when trained on the limited training dataset and evaluated on the full dataset.</title><p>The peptides are sorted based on the number of positive observations from most abundant to least abundant, with the number of positive observations listed next to the peptide sequence. The unweighted (direct) mean of AUC across all peptides is shown furthest to the left, while the weighted mean is shown second furthest to the left. The weighted mean is weighted by the number of positive observations per peptide and puts more emphasis on the peptides with the most observations. The models included in this figure corresponds to model 10 (NetTCR 2.2 - Pan), model 15 (NetTCR 2.2 - Peptide), model 16 (NetTCR 2.2 - Pre-trained) and model 17 (TCRbase ensemble) in <xref ref-type="supplementary-material" rid="supp1">Supplementary file 1</xref>.</p></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-93934-fig6-v1.tif"/></fig><fig id="fig6s1" position="float" specific-use="child-fig"><label>Figure 6—figure supplement 1.</label><caption><title>Per peptide performance of the updated peptide-specific, pan-specific, and pre-trained CNN in terms of AUC 0.1, when trained on the limited training dataset and evaluated on the full dataset.</title><p>The peptides are sorted based on the number of positive observations from most abundant to least abundant, with the number of positive observations listed next to the peptide sequence. The unweighted (direct) mean of AUC across all peptides is shown furthest to the left, while the weighted mean is shown second furthest to the left. The weighted mean is weighted by the number of positive observations per peptide and puts more emphasis on the peptides with the most observations. The models included in this figure corresponds to model 10 (NetTCR 2.2 - Pan), model 15 (NetTCR 2.2 - Peptide), model 16 (NetTCR 2.2 - Pre-trained), and model 17 (TCRbase ensemble) in <xref ref-type="supplementary-material" rid="supp1">Supplementary file 1</xref>.</p></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-93934-fig6-figsupp1-v1.tif"/></fig></fig-group></sec><sec id="s3-2-2"><title>TCRbase ensemble</title><p>Earlier work has demonstrated a high performance of simple similarity-based models for prediction of TCR-specificity (<xref ref-type="bibr" rid="bib17">Meysman et al., 2023</xref>). We therefore wanted to investigate if the predictive power could be further improved by integrating the sequence-similarity based predictions of TCRbase (<xref ref-type="bibr" rid="bib20">Montemurro et al., 2022</xref>) into our modeling framework. In short, TCRbase makes predictions by calculating a similarity between a given TCR and the positive TCRs for a given peptide in terms of a sum over the paired similarities over the 6 CDR loops (<xref ref-type="bibr" rid="bib20">Montemurro et al., 2022</xref>). TCRbase was integrated in terms of a simple scaling factor so that the pre-trained CNN model predictions were multiplied by the TCRbase predictions lifted to a power of <italic>α</italic>&gt;0. The optimal value of α was here estimated based on the validation partitions, and the test partitions were removed from the positive database given to TCRbase, to avoid overfitting and performance overestimation.</p><p>As shown in <xref ref-type="fig" rid="fig7">Figure 7a</xref>, the use of TCRbase predictions as a scaling factor resulted in a consistent increase in performance across both unweighted mean AUC and AUC 0.1. Although the mean AUC was only affected slightly by this scaling (maximum increase of 0.00212 at <italic>α</italic>=14), a greater increase in performance was observed in terms of AUC 0.1 (maximum increase of 0.00723 at <italic>α</italic>=8). Overall, the integration of TCRbase led to a significant improvement in performance for all metrics (p&lt;0.0001). It should however be noted that while the use of the TCRbase scaling generally improved performance, the optimal α factor varied between each validation partition and cross-validation model (see <xref ref-type="fig" rid="fig7">Figure 7b</xref>). Nevertheless, the median of the optimal α across the cross-validation models was 10 in the case of AUC 0.1, which strengthened our confidence in using this α as the base scaling factor. Despite these variable observations, we for the sake of consistency stick to an α of 10 for the remaining analysis in this paper. The performance per peptide when using the <italic>α</italic>=10 scaling is shown in <xref ref-type="fig" rid="fig6">Figure 6</xref> (AUC), as well as <xref ref-type="fig" rid="fig6s1">Figure 6—figure supplement 1</xref>.</p><fig-group><fig id="fig7" position="float"><label>Figure 7.</label><caption><title>Performance of TCRbase ensemble as a function of α along with boxplot of optimal alpha in terms of AUC and AUC 0.1 for the validation partitions.</title><p>(<bold>A</bold>) The predictions of the pre-trained model ensemble (trained on the limited dataset) on the test partitions (full data) were scaled by the kernel similarity to known binders, as given by TCRbase with a weight of (1,1,3,1,1,3), to a power of α. The performance is given as the unweighted mean performance across all 26 peptides, in terms of AUC and AUC 0.1. The dashed line shows the performance when α is set to 10, which strikes a good balance between AUC and AUC 0.1. An α of zero corresponds to the model ensemble without the TCRbase scaling. (<bold>B</bold>) Boxplot of the optimal alpha scaling factor per cross-validation model, when evaluated in terms of AUC and AUC 0.1, respectively, on the validation partitions. The models used for calculating the performance of the ensembles in this figure are model 16 (NetTCR 2.2 - Pre-trained) and model 21 (TCRbase) in <xref ref-type="supplementary-material" rid="supp1">Supplementary file 1</xref>.</p></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-93934-fig7-v1.tif"/></fig><fig id="fig7s1" position="float" specific-use="child-fig"><label>Figure 7—figure supplement 1.</label><caption><title>Difference in true positive rate (TPR) between TCRbase ensemble (pre-trained +TCRbase models) and pre-trained models as a function of false positive rate (FPR).</title><p>A positive ΔTPR corresponds to an increased performance of the TCRbase ensemble compared to the pre-trained models alone. The models used for this figure are model 16 (NetTCR 2.2 - Pre-trained) and model 17 (TCRbase ensemble) in <xref ref-type="supplementary-material" rid="supp1">Supplementary file 1</xref>.</p></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-93934-fig7-figsupp1-v1.tif"/></fig></fig-group><p>We also observed that the optimal value for α varied between peptides, with a slight positive correlation to the performance of TCRbase for the given peptide (see <xref ref-type="table" rid="table3">Table 3</xref>), suggesting the peptides with high TCRbase performance benefit more from the α rescaling.</p><table-wrap id="table3" position="float"><label>Table 3.</label><caption><title>Pearson Correlation Coefficients (PCC) between the optimal α scaling factor and performance per peptide in terms of AUC and AUC 0.1 of the pre-trained CNN model and TCRbase model, respectively, for the validation partitions.</title><p>Each partition was considered as a separate sample. p-Values for the null hypothesis that the performance and optimal α are uncorrelated are also shown.</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left" valign="bottom">Metric</th><th align="left" valign="bottom">PCC to optimal alpha</th><th align="left" valign="bottom">p-Value</th></tr></thead><tbody><tr><td align="left" valign="bottom">CNN AUC</td><td align="left" valign="bottom">–0.1101</td><td align="left" valign="bottom">0.2123</td></tr><tr><td align="left" valign="bottom">TCRbase AUC</td><td align="left" valign="bottom">0.3056</td><td align="left" valign="bottom">0.0004</td></tr><tr><td align="left" valign="bottom">CNN AUC 0.1</td><td align="left" valign="bottom">–0.0809</td><td align="left" valign="bottom">0.3602</td></tr><tr><td align="left" valign="bottom">TCRbase AUC 0.1</td><td align="left" valign="bottom">0.2068</td><td align="left" valign="bottom">0.0183</td></tr></tbody></table></table-wrap><p>To investigate further how the integration of TCRbase predictions benefitted the performance, we in <xref ref-type="fig" rid="fig7s1">Figure 7—figure supplement 1</xref> plotted the difference in true positive rates at different false positives rates between the TCRbase ensemble and the pre-trained CNN alone. This figure demonstrates that the benefit from TCRbase mainly consist of increasing the discrimination between binders and non-binders at thresholds corresponding to low FPRs (0 ≤ FPR &lt;= 0.15), whereas the predictions may become slightly worse than without scaling when the threshold for binders are set to that of an FPR higher than 0.3. This result thus suggests that scaling the predictions of neural network models based on similarity to known binders is mostly beneficial when a high specificity is desired.</p></sec><sec id="s3-2-3"><title>Percentile rank rescaling</title><p>The prediction scores of the final CNN + TCRbase model ensemble fall between 0 and 1 but display substantial score distribution variations between peptides (see <xref ref-type="fig" rid="fig8">Figure 8</xref>), which makes it hard to directly compare prediction scores between peptides. A common approach to resolve this is to apply percentile rank scores (<xref ref-type="bibr" rid="bib20">Montemurro et al., 2022</xref>). Here, we used the CNN + TCRbase model to predict scores for a set of 15,957 negative TCRs for each peptide, which was obtained from the dataset for the IMMREP 2022 workshop (<xref ref-type="bibr" rid="bib17">Meysman et al., 2023</xref>), and used these scores to calculate a percentile rank for each observation in our test data. Here, the percentile rank is defined as the proportion (in percentage) of negative controls, which scored higher than the given observation. As shown in <xref ref-type="fig" rid="fig8">Figure 8</xref>, the percentile ranks for binders between peptides are more similar when compared to the direct prediction scores.</p><fig id="fig8" position="float"><label>Figure 8.</label><caption><title>Boxplot of direct prediction scores and percentile ranks per peptide of the full test dataset for the TCRbase ensemble.</title><p>Peptides with 100% of positive observations coming from 10 X sequencing are highlighted in red. The model used in this figure is model 17 (TCRbase ensemble) in <xref ref-type="supplementary-material" rid="supp1">Supplementary file 1</xref>.</p></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-93934-fig8-v1.tif"/></fig></sec><sec id="s3-2-4"><title>Peptide specificity test</title><p>The performance evaluations performed so far have focused on the ability to predict whether or not a TCR can bind to a given peptide. Another important aspect is the ability to predict the correct peptide target of a given TCR. To investigate the performance in this context, each positive TCR was scored against all peptides, and a performance metric was estimated in terms of how often the correct TCR-peptide pair was given the highest score (or lowest percentile rank). The result of this analysis is shown in <xref ref-type="fig" rid="fig9">Figure 9</xref>, which was conducted on the limited dataset, while excluding observations for low performing peptides with an AUC &lt;0.8 and AUC 0.1&lt;0.65 for the TCRbase ensemble (see <xref ref-type="fig" rid="fig6">Figure 6</xref> and <xref ref-type="fig" rid="fig6s1">Figure 6—figure supplement 1</xref>). This dataset thus consists of 21 peptides, and a random predictor is expected to obtain a performance of 1/19~0.05. The results show that the model clearly outperforms this random baseline for all peptides. Also, a higher performance is observed for the three most abundant peptides in this analysis (GILGFVFTL, RAKFKQLL and ELAGIGILTV). Furthermore, it is seen that there is a slight tendency for a lower percentage of correctly chosen peptide-TCR pairs, as the number of positive TCRs for the training becomes lower. Interestingly, the percentage of correctly chosen pairs correlates very strongly with the AUC and the AUC 0.1 of the peptides. In the case of ranks when using direct prediction, the PCC of the percentage of correct predictions to AUC and AUC 0.1 were 0.740 and 0.830, respectively (sample size of 19 peptides). This high correlation was also observed for percentile ranks, with a PCC of 0.706 and 0.873 to AUC and AUC 0.1, respectively.</p><fig-group><fig id="fig9" position="float"><label>Figure 9.</label><caption><title>Percentage of correctly chosen true peptide-TCR pairs for each peptide in the limited dataset.</title><p>This was evaluated using the direct prediction score (blue) and the percentile rank (orange) of the TCRbase ensemble. KLGGALQAK, AVFDRKSDAK, NLVPMVATV, CTELKLSDY, RLRAEAQVK, RLPGVLPRA, and SLFNTVATLY were excluded from this analysis due to low predictive performance for these peptides (AUC 0.1&lt;0.65). The numbers next to the peptides indicate the number of positive TCRs in the filtered dataset, and the dashed line indicates the expected value for a random prediction. The predictions are based on model 17 (TCRbase ensemble) in <xref ref-type="supplementary-material" rid="supp1">Supplementary file 1</xref>.</p></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-93934-fig9-v1.tif"/></fig><fig id="fig9s1" position="float" specific-use="child-fig"><label>Figure 9—figure supplement 1.</label><caption><title>Boxplot of average rank per peptide for the final updated models.</title><p>The rank was evaluated on the limited dataset covering 21 peptides, that is excluding the peptides with low performance (KLGGALQAK, AVFDRKSDAK, NLVPMVATV, CTELKLSDY, RLRAEAQVK, RLPGVLPRA and SLFNTVATLY). The models used in this figure corresponds to model 21 (TCRbase), model 10 (NetTCR 2.2 - Pan), model 15 (NetTCR 2.2 - Peptide), model 16 (NetTCR 2.2 - Pre-trained), and model 17 (TCRbase ensemble) in <xref ref-type="supplementary-material" rid="supp1">Supplementary file 1</xref>.</p></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-93934-fig9-figsupp1-v1.tif"/></fig></fig-group><p>Furthermore, a tendency of lower average ranks for the pre-trained and TCRbase ensemble models compared to the other models was observed (see <xref ref-type="fig" rid="fig9s1">Figure 9—figure supplement 1</xref>). However, while the application of percentile rank widened the range of average rank per peptide, it generally resulted in a decrease of the median rank for most peptides.</p><p>To better understand why the models sometimes failed to predict the correct peptide-TCR pair, we looked at the distribution in percentile rank of the top scoring pairs. As <xref ref-type="fig" rid="fig10">Figure 10</xref> shows, the binding TCRs for the peptides with a high proportion of correctly chosen pairs (GILGFVFTL and RAKFKQLL) is characterized by having a low percentile rank of around 0.1 (see ‘Top TP’).</p><fig id="fig10" position="float"><label>Figure 10.</label><caption><title>Boxplot of percentile ranks per peptide in the rank test, with KLGGALQAK, NLVPMVATV, CTELKLSDY, RLRAEAQVK, RLPGVLPRA, and SLFNTVATLY excluded.</title><p>AVFDRKSDAK was included as an example of a peptide with a poor rank in the rank test. Top TP: Percentile rank of the correctly chosen pairs. Second TN: Percentile rank of the second-best pair, when the correct pair was chosen. Top FP: Percentile rank of the best scoring pair when the incorrect pair was chosen. FN: Percentile rank of the correct pair, when the incorrect pair was chosen. The predictions are based on model 17 in <xref ref-type="supplementary-material" rid="supp1">Supplementary file 1</xref>.</p></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-93934-fig10-v1.tif"/></fig><p>Peptides which had poor predictive performance (mainly those excluded in <xref ref-type="fig" rid="fig9">Figure 9</xref>) generally had a poor specificity with less than 20% peptide-TCR pairs chosen correctly. These peptides are characterized by having a much higher percentile rank for the true peptide:TCR pair, as exemplified by AVFDRKSDAK in <xref ref-type="fig" rid="fig10">Figure 10</xref>, which again indicates the presence of potential outliers for these peptides.</p><p>Interestingly, the percentile ranks for the TCR pairs of two of the peptides FEDLRLLSF and FEDLRVLSF are characterized by having a very low percentile rank for the second highest scoring pair. This appears to be at least partially due to a high shared similarity between these two peptides, causing the model to mislabel the top scoring peptide. For example, for FEDLRLLSF, the best scoring peptide was FEDLRVLSF 22.2% and 25.9% of the time for predictions and percentile ranks, respectively. For FEDLRVLSF, the best scoring peptide was FEDLRLLSF 23.8% and 38.1% of the time for predictions and percentile ranks, respectively.</p><p>Generally, it should also be noted that in cases where the correct peptide-TCR is not given the lowest rank, the correct peptide-TCR pair is given a very high percentile rank, most often greater than 20 (refer to FN label in <xref ref-type="fig" rid="fig10">Figure 10</xref>). The same observation holds for the top scoring peptides in these cases (top FP in <xref ref-type="fig" rid="fig10">Figure 10</xref>). This once again indicates that there might be some potential wrongly labeled outliers in the positive data, even when the data is filtered with the use of the model predictions.</p></sec></sec><sec id="s3-3"><title>Performance when data is scarce or absent</title><p>Having demonstrated a robust and high performance of the CNN-pan-specific model in the context of TCR specificity towards known peptides, i.e. peptides included in the training data, we next turned to the uttermost challenging question namely prediction of TCR specificity towards novel peptides.</p><p>To investigate this, we trained models in a pan-specific leave-one-out setup, where for a given peptide, both positives and negatives generated from that peptide were removed from the training data, thus preventing data leakage. This was done both for the NetTCR 2.1 and the updated NetTCR 2.2 architecture. For this experiment, the limited training dataset with outliers removed was used. This resulted in 26 different models, each of which was evaluated on the peptide dataset for the left-out peptide. As shown in <xref ref-type="fig" rid="fig11">Figure 11</xref>, a performance in terms of AUC slightly better than random was observed for most of the peptides. Furthermore, a noticeable improvement in performance was seen for the updated NetTCR 2.2 model. However, the performance was almost completely random when evaluated in terms of AUC 0.1, as can be seen in <xref ref-type="fig" rid="fig11s1">Figure 11—figure supplement 1</xref>. The only peptides with non-random AUC 0.1 performance were FEDLRLLSF and FEDLRVLSF, and this was only the case for the NetTCR-2.2 model architecture. These peptides differ by only a single amino acid, and the result thus indicates that the updated model in this case is able to transfer the knowledge gained from training on another similar peptide, which was not the case with the old architecture.</p><fig-group><fig id="fig11" position="float"><label>Figure 11.</label><caption><title>Per peptide performance of the old (NetTCR 2.1) and updated (NetTCR 2.2) pan-specific CNN models trained in a leave-one-out setup.</title><p>The performance was evaluated in terms of AUC on the full dataset. The performance shown in this figure is based on model 63 (NetTCR 2.1 - Leave one out) and model 19 (NetTCR 2.2 - Leave one out) in <xref ref-type="supplementary-material" rid="supp1">Supplementary file 1</xref>.</p></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-93934-fig11-v1.tif"/></fig><fig id="fig11s1" position="float" specific-use="child-fig"><label>Figure 11—figure supplement 1.</label><caption><title>Per peptide performance of the old (NetTCR 2.1) and updated (NetTCR 2.2) pan-specific CNN models trained in a leave-one-out setup.</title><p>The performance was evaluated in terms of AUC on the full dataset. The performance shown in this figure is based on model 63 (NetTCR 2.1 - Leave one out) and model 19 (NetTCR 2.2 - Leave one out) in <xref ref-type="supplementary-material" rid="supp1">Supplementary file 1</xref>.</p></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-93934-fig11-figsupp1-v1.tif"/></fig></fig-group><p>We next extended the analysis to a leave-most-out setting to investigate how little data is required in order to train models with non-random performance. Here, a number of training datasets were generated by subsampling the limited dataset in order to achieve 5, 10, 15, 20, 25, 50, and 100 positive observations, respectively, per peptide. Swapped negatives were also subsample in this way, keeping a ratio of 1:5 between binders and non-binders. This was only done for the peptides GILGFVFTL, RAKFKQLL, ELAGIGILTV, IVTDFSVIK, LLWNGPMAV, CINGVCWTV, GLCTLVAML and SPRWYFYYL, since they all had substantial performance (AUC 0.1 ≥ 0.65) for the full model and more than 100 positive observations to begin with.</p><p>In the case of the pre-trained model, the leave-one-out model was used as the startpoint. Rather than having to re-train the full pan-specific CNN block (which may be impractical, if a user wants to re-train the model on a new peptide), we decided to instead fine-tune this CNN block by adding the subsampled data to the leave-one-out training data, while setting the sample weight to 1 for the new peptide observations, and 0.1 for the remaining observations. The pan-specific CNN block was then trained for 30 epochs in this way (for details refer to Materials and methods).</p><p>As shown in <xref ref-type="fig" rid="fig12">Figure 12</xref> and <xref ref-type="fig" rid="fig12s1">Figure 12—figure supplement 1</xref> all models demonstrated a non-random performance with as low as 5 positive observations. As expected, a general increase in performance was observed as more and more data was available for training. This was especially the case for the TCRbase ensemble model, which strongly outperformed all other models with an AUC close to 0.8, when the number of training points surpassed 15.</p><fig-group><fig id="fig12" position="float"><label>Figure 12.</label><caption><title>Performance in terms of AUC of various models trained on increasing amounts of data.</title><p>These models were trained on the following peptides: GILGFVFTL, RAKFKQLL, ELAGIGILTV, IVTDFSVIK, LLWNGPMAV, CINGVCWTV, GLCTLVAML, and SPRWYFYYL. The pre-trained models were based on the leave-one-out model, and afterwards fine-tuned and re-trained on the smaller training datasets. The performance shown is based on the predictions for model 24–51 in <xref ref-type="supplementary-material" rid="supp1">Supplementary file 1</xref>.</p></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-93934-fig12-v1.tif"/></fig><fig id="fig12s1" position="float" specific-use="child-fig"><label>Figure 12—figure supplement 1.</label><caption><title>Performance in terms of AUC 0.1 of various models trained on increasing amounts of data.</title><p>These models were trained on the following peptides: GILGFVFTL, RAKFKQLL, ELAGIGILTV, IVTDFSVIK, LLWNGPMAV, CINGVCWTV, GLCTLVAML and SPRWYFYYL. The pre-trained models were based on the leave-one-out model, and afterwards fine-tuned and re-trained on the smaller training datasets. The performance shown is based on the predictions for model 24–51 in <xref ref-type="supplementary-material" rid="supp1">Supplementary file 1</xref>.</p></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-93934-fig12-figsupp1-v1.tif"/></fig></fig-group><p>Noticeably, the performance of the baseline TCRbase model did not improve nearly as much as the CNN-based models when the amount of training data was increased, suggesting that the CNN models are able to benefit much more from the increased amount of information present in larger datasets.</p></sec><sec id="s3-4"><title>External evaluation</title><sec id="s3-4-1"><title>IMMREP 2022 benchmark</title><p>Having defined a novel and improved architecture and framework for training models for prediction of TCR specificity, we next turned to an independent data set to confirm its robustness. Here, we applied the datasets from the IMMREP 2022 workshop (<xref ref-type="bibr" rid="bib17">Meysman et al., 2023</xref>), keeping all model hyperparameters unchanged compared to the different models described above. As shown in <xref ref-type="fig" rid="fig13">Figure 13</xref>, the updated peptide-specific models, NetTCR-2.2 - Peptide, significantly outperformed NetTCR 2.1 (p=0.0367, p=0.0263, p=0.0087 and p=0.0034 for AUC, weighted AUC, AUC 0.1 and weighted AUC 0.1, respectively). With an unweighted average AUC of 0.8476, this model performed on par with the best performing model in terms of AUC at the IMMREP workshop, TCRex αβ (<xref ref-type="bibr" rid="bib6">Gielis et al., 2018</xref>), with an average unweighted AUC of 0.8473. However, to our surprise, and contrary to our findings on the original dataset of this paper, the NetTCR-2.2 - Pre-trained model underperformed compared to the peptide-specific model, even though part of this performance loss was recovered when introducing the TCRbase scaling on the pre-trained model. Furthermore, the NetTCR-2.2 - Pan model was also found to perform much worse than expected.</p><fig-group><fig id="fig13" position="float"><label>Figure 13.</label><caption><title>Boxplot of reported unweighted AUC per peptide for the models in the IMMREP benchmark, as well as the updated NetTCR 2.2 models.</title><p>Except for the updated NetTCR 2.2 models (NetTCR 2.2 - Pan, NetTCR 2.2 - Peptide, NetTCR 2.2 - Pre-trained and TCRbase ensemble) the performance of all models is equal to the reported performance in the IMMREP benchmark. The color of the bars indicates the type of input used by the model. Machine-learning models are labeled with black text, whereas distance-based models are labeled with blue text. Note that the TCRbase ensemble is a mixture between a machine-learning and distance-based model. The performance of the NetTCR 2.2 models is based on model 53 (NetTCR 2.2 - Pan), model 54 (NetTCR 2.2 - Peptide), model 55 (NetTCR 2.2 - Pre-trained), and model 56 (TCRbase ensemble) in <xref ref-type="supplementary-material" rid="supp2">Supplementary file 2</xref>. The performance of the remaining models are based on the values listed in the IMMREP 2022 GitHub repository at <ext-link ext-link-type="uri" xlink:href="https://github.com/viragbioinfo/IMMREP_2022_TCRSpecificity/blob/main/evaluation/microaucs.csv">https://github.com/viragbioinfo/IMMREP_2022_TCRSpecificity/blob/main/evaluation/microaucs.csv</ext-link>.</p></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-93934-fig13-v1.tif"/></fig><fig id="fig13s1" position="float" specific-use="child-fig"><label>Figure 13—figure supplement 1.</label><caption><title>Boxplot of average rank per peptide per model in the IMMREP test data, as reported in the IMMREP benchmark.</title><p>The updated NetTCR 2.2 models are included to the right. The color of the bars indicates the type of input used by the model. Machine-learning models are labeled with black text, whereas distance-based models are labeled with blue text. Note that the TCRbase ensemble is a mixture between a machine-learning and distance-based model. The mean rank of the NetTCR 2.2 models are based on model 53 (NetTCR 2.2 - Pan), model 54 (NetTCR 2.2 - Peptide), model 55 (NetTCR 2.2 - Pre-trained), and model 56 (TCRbase ensemble) in <xref ref-type="supplementary-material" rid="supp2">Supplementary file 2</xref>. The mean rank of the remaining models are based on the values listed in the IMMREP 2022 GitHub repository at <ext-link ext-link-type="uri" xlink:href="https://github.com/viragbioinfo/IMMREP_2022_TCRSpecificity/blob/main/evaluation/epitoperank.csv">https://github.com/viragbioinfo/IMMREP_2022_TCRSpecificity/blob/main/evaluation/epitoperank.csv</ext-link>.</p></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-93934-fig13-figsupp1-v1.tif"/></fig></fig-group><p>We further evaluated the peptide specificity of the models by calculating the average rank of each peptide in the benchmark specificity test dataset, and compared the ranks to those of the other methods included in the IMMREP benchmark. As is shown in <xref ref-type="fig" rid="fig13s1">Figure 13—figure supplement 1</xref>, also here the average ranks of the updated models were found to be comparable to the best performing models in the IMMREP benchmark.</p><p>To understand the source of the relatively poor performance of the pan-specific models in this benchmark, we further investigated the IMMREP datasets. Even though the construction of IMMRep datasets was made to ensure that no positive TCR was shared between the training and test data sets, inspection of the data revealed that swapped negatives were present in the training data, which originated from positive peptides in the test data. When a pan-specific model is trained on such data, this results in certain TCRs being ‘seen’ only as non-binders only during the model training. Given this, the model will likely assign such TCRs as negative when asked to predict the test data. This problem is limited to pan-specific models hence explaining the reduced performance compared to the peptide-specific model.</p><p>Further, as shown in <xref ref-type="table" rid="table4">Table 4</xref>, the degree of redundancy between training and test data was relatively high for many of the peptides. This redundancy between the IMMREP test and training data may result in test performance overestimation since the models observe similar TCR-peptide combinations during training.</p><table-wrap id="table4" position="float"><label>Table 4.</label><caption><title>Degree of redundancy between the IMMREP test and training data, when using a 95% kernel similarity threshold for redundancy within each peptide.</title><p>The redundancy reduction was performed on both positive and negative observations. The counts and percentages, however, only refers to the positive observations.</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left" valign="bottom">Peptide</th><th align="left" valign="bottom">Pre reduction count</th><th align="left" valign="bottom">Post reduction count</th><th align="left" valign="bottom">Percent redundant</th></tr></thead><tbody><tr><td align="left" valign="bottom">All</td><td align="left" valign="bottom">619</td><td align="left" valign="bottom">467</td><td align="left" valign="bottom">24.56%</td></tr><tr><td align="left" valign="bottom">GILGFVFTL</td><td align="left" valign="bottom">136</td><td align="left" valign="bottom">58</td><td align="left" valign="bottom">57.35%</td></tr><tr><td align="left" valign="bottom">NLVPMVATV</td><td align="left" valign="bottom">69</td><td align="left" valign="bottom">54</td><td align="left" valign="bottom">21.74%</td></tr><tr><td align="left" valign="bottom">YLQPRTFLL</td><td align="left" valign="bottom">67</td><td align="left" valign="bottom">53</td><td align="left" valign="bottom">20.90%</td></tr><tr><td align="left" valign="bottom">TTDPSFLGRY</td><td align="left" valign="bottom">49</td><td align="left" valign="bottom">47</td><td align="left" valign="bottom">4.08%</td></tr><tr><td align="left" valign="bottom">LLWNGPMAV</td><td align="left" valign="bottom">47</td><td align="left" valign="bottom">44</td><td align="left" valign="bottom">6.38%</td></tr><tr><td align="left" valign="bottom">CINGVCWTV</td><td align="left" valign="bottom">46</td><td align="left" valign="bottom">46</td><td align="left" valign="bottom">0.00%</td></tr><tr><td align="left" valign="bottom">GLCTLVAML</td><td align="left" valign="bottom">37</td><td align="left" valign="bottom">23</td><td align="left" valign="bottom">37.84%</td></tr><tr><td align="left" valign="bottom">ATDALMTGF</td><td align="left" valign="bottom">26</td><td align="left" valign="bottom">22</td><td align="left" valign="bottom">15.38%</td></tr><tr><td align="left" valign="bottom">LTDEMIAQY</td><td align="left" valign="bottom">25</td><td align="left" valign="bottom">23</td><td align="left" valign="bottom">8.00%</td></tr><tr><td align="left" valign="bottom">SPRWYFYYL</td><td align="left" valign="bottom">24</td><td align="left" valign="bottom">24</td><td align="left" valign="bottom">0.00%</td></tr><tr><td align="left" valign="bottom">KSKRTPMGF</td><td align="left" valign="bottom">22</td><td align="left" valign="bottom">13</td><td align="left" valign="bottom">40.91%</td></tr><tr><td align="left" valign="bottom">NQKLIANQF</td><td align="left" valign="bottom">15</td><td align="left" valign="bottom">15</td><td align="left" valign="bottom">0.00%</td></tr><tr><td align="left" valign="bottom">TPRVTGGGAM</td><td align="left" valign="bottom">12</td><td align="left" valign="bottom">12</td><td align="left" valign="bottom">0.00%</td></tr><tr><td align="left" valign="bottom">HPVTKYIM</td><td align="left" valign="bottom">12</td><td align="left" valign="bottom">10</td><td align="left" valign="bottom">16.67%</td></tr><tr><td align="left" valign="bottom">NYNYLYRLF</td><td align="left" valign="bottom">12</td><td align="left" valign="bottom">9</td><td align="left" valign="bottom">25.00%</td></tr><tr><td align="left" valign="bottom">GPRLGVRAT</td><td align="left" valign="bottom">11</td><td align="left" valign="bottom">11</td><td align="left" valign="bottom">0.00%</td></tr><tr><td align="left" valign="bottom">RAQAPPPSW</td><td align="left" valign="bottom">9</td><td align="left" valign="bottom">3</td><td align="left" valign="bottom">66.67%</td></tr></tbody></table></table-wrap><p>When comparing the per peptide AUC of all models to the per peptide redundancy between training- and test data, we observed a Pearson correlation of 0.428 (sample size of 370), which was a much stronger correlation than observed between the number of training observations and AUC (0.062).</p><p>To address these issues, we applied the redundancy reduction and swapped negative data generation (generating the swapped within each data partition) from our own data pipeline on the training data, while ensuring a positive to swapped negative ratio of 1:3 and positive to negative control ratio of 1:2, as was the case for the original IMMREP dataset. The performance of the different models was next assessed via nested cross-validation on this dataset, rather than the original left-out test data. As shown in <xref ref-type="fig" rid="fig14">Figure 14</xref>, this data setup once again resulted in the pre-trained models outperforming the peptide-specific models, and that the use of TCRbase scaling together with the pre-trained model resulted in the overall best performance, in line with our earlier findings. Moreover, the overall performance of the models was found to drop, especially for the peptides with a high degree of redundant data, confirming a degree of performance overestimation in the original benchmark (see <xref ref-type="supplementary-material" rid="supp2">Supplementary file 2</xref> for individual peptide performance).</p><fig id="fig14" position="float"><label>Figure 14.</label><caption><title>Boxplot of unweighted AUC per peptide for the NetTCR 2.1 and 2.2 models, when trained and evaluated on the redundancy reduced dataset.</title><p>The evaluation was performed using a nested cross-validation setup. The performance is based on model 58 (NetTCR 2.1 - Peptide), model 59 (NetTCR 2.2 - Pan), model 60 (NetTCR 2.2 - Peptide), model 61 (NetTCR 2.2 - Pre-trained), and model 62 (TCRbase ensemble) in <xref ref-type="supplementary-material" rid="supp2">Supplementary file 2</xref>.</p></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-93934-fig14-v1.tif"/></fig></sec></sec></sec><sec id="s4" sec-type="discussion"><title>Discussion</title><p>Here, we have presented an improved NetTCR framework for prediction of TCR specificity including updates to the training data, modeling architecture and training setup, with the goal of increasing the overall performance and generalization power of the model. First and foremost, the update includes a substantial expansion of the training data to 26 peptides, up from the six peptides available for predictions in NetTCR 2.1. The model updates included dropout and peptide-specific sample weights to deal with data imbalance, forcing the model to focus more evenly on all peptides, and resulted in vastly improved performance in the pan-specific setup. This performance gain was particularly pronounced for peptides with few observed binding TCRs. The updated architecture in the form of more hidden units in the dense layer, the change from sigmoid to ReLu activation for the max-pooling, and the introduction of dropout further improved the NetTCR model. A variation of the updated architecture was also investigated, which combined the properties of the pan-specific and peptide-specific models, by having two separate CNN blocks where one block was pre-trained separately in pan-specific setup, followed by training the second block in a peptide-specific setup. This pre-training setup resulted in an additional increase in performance, mainly for the least abundant peptides.</p><sec id="s4-1"><title>How to best use available data for training</title><p>The scarness of paired TCR data means that it often could be tempting to include all available data to the fullest, and include all redundant data for training. However, as we show here, the addition of redundant data in the training does not lead to improved performance. In fact, we found that the addition of redundant data may cause pan-specific models to underperform if the peptide imbalance of data is not accounted for, since the inclusion of redundant data often results in a further increased peptide imbalance.</p><p>The observation that the predictive performance for some peptides was much lower than expected given the amount of available training data, led us to believe that outliers in the form of false positives might be a potential issue. Furthermore, many of these peptides had in common that the main source of data was 10 X sequencing (<xref ref-type="bibr" rid="bib1">10x Genomics, 2020</xref>), a platform known to have a high proportion of false annotations (<xref ref-type="bibr" rid="bib34">Zhang et al., 2021</xref>; <xref ref-type="bibr" rid="bib26">Povlsen et al., 2023</xref>). To deal with this issue, we implemented a machine learning driven approach for outlier detection using the predictions of the peptide-specific NetTCR models to identify observations which repeatedly received very poor predictions. The removal of these potential outliers from the training led to significantly improved test performance. It should also be noted that the data applied in the study included denoising for most of the 10 X data in the form of ITRAP (<xref ref-type="bibr" rid="bib26">Povlsen et al., 2023</xref>)<bold>,</bold> which together with ICON <xref ref-type="bibr" rid="bib34">Zhang et al., 2021</xref> have earlier been shown to properly remove outliers (<xref ref-type="bibr" rid="bib21">Montemurro et al., 2023</xref>). Nevertheless, our results suggest that some outliers had escaped these denoising steps, indicating that denoising methods should still be improved upon. While the use of our model predictions to remove outliers resulted in improved performance, we believe that this approach should only be considered a proof-of-concept, and that more elaborate ways to identify outliers merit further investigation.</p></sec><sec id="s4-2"><title>Integrating distance-based methods can improve performance of ML models</title><p>Inspired by the observation that sequence similarity distance-based models often achieve very high performance for the prediction of TCR specificity (<xref ref-type="bibr" rid="bib17">Meysman et al., 2023</xref>), we investigated if integrating TCRbase predictions could improve the performance of our models. We integrated TCRbase by scaling the CNN prediction with the TCRbase prediction to a power of α, and found that the performance of this ensemble (Pre-trained +TCRbase) achieved a significantly improved performance in terms of AUC and AUC 0.1. Interestingly, further inspections revealed that the increased performance mainly resulted from improved discrimination of binders and non-binders when the binding-threshold was set to result in a low FPR. Given how we are often interested in keeping the FPR very low for TCR specificity predictions, the simple integration of TCRbase can thus vastly benefit many real-world use-cases for TCR specificity predictions. While we decided to use a general α of 10 for the TCRbase scaling, it is possible that performance could be improved further, if α is allowed to be flexible depending on the peptide. For example, one could imagine that a peptide with a very high TCRbase predictive performance could benefit from a higher α, compared to another peptide with a lower TCRbase performance. Furthermore, the amount of positive data also influences which α is optimal. It would therefore be interesting to further investigate this, as this could potentially lead to further improved performance. Finally, investigating the relation between TPR and FPR at different values of α could also benefit many actual use-cases, considering that the optimal alpha value could be determined based on the desired maximum FPR rate.</p></sec><sec id="s4-3"><title>Predictions for unseen peptide</title><p>It has repeatedly been shown that predicting TCR specificity for “unseen” peptides is extremely hard, especially for peptides that are very dissimilar to the peptides included in the training data (<xref ref-type="bibr" rid="bib22">Moris et al., 2021</xref>; <xref ref-type="bibr" rid="bib7">Grazioli et al., 2022</xref>). Investigating the performance of the pan-specific models in a leave-one-out setup revealed that the performance on unseen peptides overall remained very poor, also for the updated NetTCR-2.2 model. While the performance for NetTCR-2.2 in terms of AUC was generally better than random, the performance in terms of AUC 0.1 was very close to random, severely limiting its general potential use. Nevertheless, we observed that the performance of NetTCR 2.2 in the leave-one-out setup was improved when compared to NetTCR 2.1, especially for two peptides sharing a high mutual similarity. While the performance for these two peptides was still low compared to that observed in the full training setup, this result affirms that given a broad enough peptide coverage, pan-specific models have the potential to predict binding also for unseen peptides.</p></sec><sec id="s4-4"><title>Improved performance when data is scarce</title><p>While high performance for unseen peptides so far remains very challenging, another important issue is to boost performance for peptides with relatively few observations. Performing a leave-most-data-out, a substantial increase in performance was observed compared to the leave-out-out experiment with as little as five training observations, and already with 15 observations, a satisfactory performance was observed. This is in great contrast to earlier work, where a number of ~150 was suggested to be required for modeling TCR specificity (<xref ref-type="bibr" rid="bib19">Montemurro et al., 2021</xref>). These results thus suggest that the pre-trained models can beneficially be used as seeds for the development of peptide-specific models allowing for rapid fine-tuning to new data.</p><p>We also observed that the TCRbase ensemble based on the pre-trained model consistently outperformed any of the other models, both when data was very scarce, but also as the amount of training data was increased, highlighting the benefits of integrating distance-based methods for predictions. As a final note, we would also expect that the discrepancy between the performance of the peptide-specific- and pre-trained model will become larger as the number of peptides to train on increases in the future, as a pan-specific CNN block trained on a more diverse dataset should allow for better generalization.</p></sec><sec id="s4-5"><title>Performance on IMMREP 2022 benchmark</title><p>To compare the updated models with other models for TCR specificity predictions, we applied the modeling framework to the dataset from the IMMREP 2022 benchmark (<xref ref-type="bibr" rid="bib17">Meysman et al., 2023</xref>). Here, we observed that the updated peptide-specific model performed on par with the best models in the benchmark. We however also observed that the pre-trained model performed worse than expected. Careful inspection of the data revealed that swapped negatives had been generated across the test and training data, meaning that some TCRs were only seen as negatives in the training, whereas they could be positive in the test data, albeit for a different peptide. This problem strongly affected the pre-trained model, which had a pan-specific component. Furthermore, since redundancy was only dealt with by removing duplicate TCRs, redundancy in both training and test data was observed, resulting in a certain degree of performance overestimation. This was for instance reflected in an unusually high performance for the peptides which had higher degrees of redundancies between training and test data.</p><p>To deal with these problems, we performed redundancy reduction on the training data identical to what was done for our novel extended data set, and made sure to only generate swapped negatives from TCRs within a given partition. We then trained and evaluated our models using the nested cross-validation approach on this redundancy reduced data. Here, we recovered the earlier conclusion that the pre-trained models outperformed the peptide-specific models, and that the integration of TCRbase led to the highest overall performance. These results thus strongly underline a problematic issue with data redundancy and the leakage of swapped negative TCR between training and test datasets present in the IMMREP benchmark. This is of high concern, since these properties, as shown here, are in particular detrimental for pan-specific models. Considering this, we encourage the creation of a new benchmark which takes these issues into account, while ideally also expanding on the number of peptides present for predictions.</p></sec><sec id="s4-6"><title>Conclusion</title><p>In this work, we have demonstrated how prediction of TCR specificity can be greatly improved by introducing minor but critical updates to the NetTCR training and modeling framework. While also improving on the peptide-specific models, these updates in particular boost the performance of pan-specific models. In addition, we show that pre-training models on pan-specific data, followed by training in a peptide-specific setup, leads to substantially improved performance, especially when the amount of data is low. Scaling the predictions from NetTCR with similarity to known binders is also shown to boost performance. Further, we have for the first time demonstrated how machine learning models can be designed and applied for rational data denoising in the context of TCR specificity data. The performance for ‘unseen’ peptides was found to be overall low. However, the results demonstrated an encouraging tendency of high predictive power in cases of ‘unseen’ peptides with high similarity to the training data.</p></sec></sec></body><back><sec sec-type="additional-information" id="s5"><title>Additional information</title><fn-group content-type="competing-interest"><title>Competing interests</title><fn fn-type="COI-statement" id="conf1"><p>No competing interests declared</p></fn></fn-group><fn-group content-type="author-contribution"><title>Author contributions</title><fn fn-type="con" id="con1"><p>Conceptualization, Data curation, Software, Formal analysis, Investigation, Visualization, Methodology, Writing – original draft, Project administration, Writing – review and editing</p></fn><fn fn-type="con" id="con2"><p>Conceptualization, Supervision, Funding acquisition, Validation, Investigation, Methodology, Writing – original draft, Project administration, Writing – review and editing</p></fn></fn-group></sec><sec sec-type="supplementary-material" id="s6"><title>Additional files</title><supplementary-material id="supp1"><label>Supplementary file 1.</label><caption><title>Overview of training data, model parameters, predictions and performance of the models trained and evaluated in this article, excluding the models trained and evaluated on the IMMREP 2022 dataset.</title><p>The listed Model Number for each model can be used to find the source data for the figures in this article (see the figure legends).</p></caption><media xlink:href="elife-93934-supp1-v1.xlsx" mimetype="application" mime-subtype="xlsx"/></supplementary-material><supplementary-material id="supp2"><label>Supplementary file 2.</label><caption><title>Overview of training data, model parameters, predictions and performance of the models trained and evaluated on the IMMREP 2022 dataset.</title><p>The listed Model Number for each model can be used to find the source data for the figures in this article (see the figure legends).</p></caption><media xlink:href="elife-93934-supp2-v1.xlsx" mimetype="application" mime-subtype="xlsx"/></supplementary-material><supplementary-material id="mdar"><label>MDAR checklist</label><media xlink:href="elife-93934-mdarchecklist1-v1.docx" mimetype="application" mime-subtype="docx"/></supplementary-material></sec><sec sec-type="data-availability" id="s7"><title>Data availability</title><p>The final peptide-specific, pan-specific and pre-trained models, along with the main datasets, are available on GitHub at <ext-link ext-link-type="uri" xlink:href="https://github.com/mnielLab/NetTCR-2.2">https://github.com/mnielLab/NetTCR-2.2</ext-link>, copy archived at <xref ref-type="bibr" rid="bib18">mnielLab, 2024</xref> and a web server for the pan- and pre-trained models is available at <ext-link ext-link-type="uri" xlink:href="https://services.healthtech.dtu.dk/services/NetTCR-2.2/">https://services.healthtech.dtu.dk/services/NetTCR-2.2/</ext-link>, where an easy-to-use interface is provided for predictions. In addition, an overview of the performance of the different models, along with their predictions and training data, is summarized in <xref ref-type="supplementary-material" rid="supp1">Supplementary file 1</xref> (New dataset) and <xref ref-type="supplementary-material" rid="supp2">Supplementary file 2</xref> (IMMREP 2022 dataset).</p></sec><ref-list><title>References</title><ref id="bib1"><element-citation publication-type="web"><person-group person-group-type="author"><collab>10x Genomics</collab></person-group><year iso-8601-date="2020">2020</year><article-title>A new way of exploring immunity - linking highly multiplexed antigen recognition to immune Repertoire and Phenotype</article-title><ext-link ext-link-type="uri" xlink:href="https://www.technologynetworks.com/immunology/application-notes/a-new-way-of-exploring-immunity-linking-highly-multiplexed-antigen-recognition-to-immune-repertoire-332554">https://www.technologynetworks.com/immunology/application-notes/a-new-way-of-exploring-immunity-linking-highly-multiplexed-antigen-recognition-to-immune-repertoire-332554</ext-link><date-in-citation iso-8601-date="2020-03-25">March 25, 2020</date-in-citation></element-citation></ref><ref id="bib2"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bagaev</surname><given-names>DV</given-names></name><name><surname>Vroomans</surname><given-names>RMA</given-names></name><name><surname>Samir</surname><given-names>J</given-names></name><name><surname>Stervbo</surname><given-names>U</given-names></name><name><surname>Rius</surname><given-names>C</given-names></name><name><surname>Dolton</surname><given-names>G</given-names></name><name><surname>Greenshields-Watson</surname><given-names>A</given-names></name><name><surname>Attaf</surname><given-names>M</given-names></name><name><surname>Egorov</surname><given-names>ES</given-names></name><name><surname>Zvyagin</surname><given-names>IV</given-names></name><name><surname>Babel</surname><given-names>N</given-names></name><name><surname>Cole</surname><given-names>DK</given-names></name><name><surname>Godkin</surname><given-names>AJ</given-names></name><name><surname>Sewell</surname><given-names>AK</given-names></name><name><surname>Kesmir</surname><given-names>C</given-names></name><name><surname>Chudakov</surname><given-names>DM</given-names></name><name><surname>Luciani</surname><given-names>F</given-names></name><name><surname>Shugay</surname><given-names>M</given-names></name></person-group><year iso-8601-date="2020">2020</year><article-title>VDJdb in 2019: database extension, new analysis infrastructure and a T-cell receptor motif compendium</article-title><source>Nucleic Acids Research</source><volume>48</volume><fpage>D1057</fpage><lpage>D1062</lpage><pub-id pub-id-type="doi">10.1093/nar/gkz874</pub-id><pub-id pub-id-type="pmid">31588507</pub-id></element-citation></ref><ref id="bib3"><element-citation publication-type="software"><person-group person-group-type="author"><name><surname>Chollet</surname><given-names>F</given-names></name></person-group><year iso-8601-date="2015">2015</year><data-title>Keras</data-title><version designator="ab1f404">ab1f404</version><source>GitHub</source><ext-link ext-link-type="uri" xlink:href="https://github.com/fchollet/keras">https://github.com/fchollet/keras</ext-link></element-citation></ref><ref id="bib4"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Davis</surname><given-names>MM</given-names></name><name><surname>Bjorkman</surname><given-names>PJ</given-names></name></person-group><year iso-8601-date="1988">1988</year><article-title>T-cell antigen receptor genes and T-cell recognition</article-title><source>Nature</source><volume>334</volume><fpage>395</fpage><lpage>402</lpage><pub-id pub-id-type="doi">10.1038/334395a0</pub-id><pub-id pub-id-type="pmid">3043226</pub-id></element-citation></ref><ref id="bib5"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Dunbar</surname><given-names>J</given-names></name><name><surname>Deane</surname><given-names>CM</given-names></name></person-group><year iso-8601-date="2016">2016</year><article-title>ANARCI: antigen receptor numbering and receptor classification</article-title><source>Bioinformatics</source><volume>32</volume><fpage>298</fpage><lpage>300</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/btv552</pub-id><pub-id pub-id-type="pmid">26424857</pub-id></element-citation></ref><ref id="bib6"><element-citation publication-type="preprint"><person-group person-group-type="author"><name><surname>Gielis</surname><given-names>S</given-names></name><name><surname>Moris</surname><given-names>P</given-names></name><name><surname>Bittremieux</surname><given-names>W</given-names></name><name><surname>De Neuter</surname><given-names>N</given-names></name><name><surname>Ogunjimi</surname><given-names>B</given-names></name><name><surname>Laukens</surname><given-names>K</given-names></name><name><surname>Meysman</surname><given-names>P</given-names></name></person-group><year iso-8601-date="2018">2018</year><article-title>TCRex: detection of enriched T cell epitope specificity in full T cell receptor sequence repertoires</article-title><source>bioRxiv</source><pub-id pub-id-type="doi">10.1101/373472</pub-id></element-citation></ref><ref id="bib7"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Grazioli</surname><given-names>F</given-names></name><name><surname>Mösch</surname><given-names>A</given-names></name><name><surname>Machart</surname><given-names>P</given-names></name><name><surname>Li</surname><given-names>K</given-names></name><name><surname>Alqassem</surname><given-names>I</given-names></name><name><surname>O’Donnell</surname><given-names>TJ</given-names></name><name><surname>Min</surname><given-names>MR</given-names></name></person-group><year iso-8601-date="2022">2022</year><article-title>On TCR binding predictors failing to generalize to unseen peptides</article-title><source>Frontiers in Immunology</source><volume>13</volume><elocation-id>1014256</elocation-id><pub-id pub-id-type="doi">10.3389/fimmu.2022.1014256</pub-id><pub-id pub-id-type="pmid">36341448</pub-id></element-citation></ref><ref id="bib8"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Heather</surname><given-names>JM</given-names></name><name><surname>Spindler</surname><given-names>MJ</given-names></name><name><surname>Alonso</surname><given-names>MH</given-names></name><name><surname>Shui</surname><given-names>YI</given-names></name><name><surname>Millar</surname><given-names>DG</given-names></name><name><surname>Johnson</surname><given-names>DS</given-names></name><name><surname>Cobbold</surname><given-names>M</given-names></name><name><surname>Hata</surname><given-names>AN</given-names></name></person-group><year iso-8601-date="2022">2022</year><article-title>Stitchr: stitching coding TCR nucleotide sequences from V/J/CDR3 information</article-title><source>Nucleic Acids Research</source><volume>50</volume><elocation-id>e68</elocation-id><pub-id pub-id-type="doi">10.1093/nar/gkac190</pub-id><pub-id pub-id-type="pmid">35325179</pub-id></element-citation></ref><ref id="bib9"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hobohm</surname><given-names>U</given-names></name><name><surname>Scharf</surname><given-names>M</given-names></name><name><surname>Schneider</surname><given-names>R</given-names></name><name><surname>Sander</surname><given-names>C</given-names></name></person-group><year iso-8601-date="1992">1992</year><article-title>Selection of representative protein data sets</article-title><source>Protein Science</source><volume>1</volume><fpage>409</fpage><lpage>417</lpage><pub-id pub-id-type="doi">10.1002/pro.5560010313</pub-id><pub-id pub-id-type="pmid">1304348</pub-id></element-citation></ref><ref id="bib10"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Huang</surname><given-names>H</given-names></name><name><surname>Wang</surname><given-names>C</given-names></name><name><surname>Rubelt</surname><given-names>F</given-names></name><name><surname>Scriba</surname><given-names>TJ</given-names></name><name><surname>Davis</surname><given-names>MM</given-names></name></person-group><year iso-8601-date="2020">2020</year><article-title>Analyzing the Mycobacterium tuberculosis immune response by T-cell receptor clustering with GLIPH2 and genome-wide antigen screening</article-title><source>Nature Biotechnology</source><volume>38</volume><fpage>1194</fpage><lpage>1202</lpage><pub-id pub-id-type="doi">10.1038/s41587-020-0505-4</pub-id><pub-id pub-id-type="pmid">32341563</pub-id></element-citation></ref><ref id="bib11"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hudson</surname><given-names>D</given-names></name><name><surname>Fernandes</surname><given-names>RA</given-names></name><name><surname>Basham</surname><given-names>M</given-names></name><name><surname>Ogg</surname><given-names>G</given-names></name><name><surname>Koohy</surname><given-names>H</given-names></name></person-group><year iso-8601-date="2023">2023</year><article-title>Can we predict T cell specificity with digital biology and machine learning?</article-title><source>Nature Reviews. Immunology</source><volume>23</volume><fpage>511</fpage><lpage>521</lpage><pub-id pub-id-type="doi">10.1038/s41577-023-00835-3</pub-id><pub-id pub-id-type="pmid">36755161</pub-id></element-citation></ref><ref id="bib12"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Jokinen</surname><given-names>E</given-names></name><name><surname>Huuhtanen</surname><given-names>J</given-names></name><name><surname>Mustjoki</surname><given-names>S</given-names></name><name><surname>Heinonen</surname><given-names>M</given-names></name><name><surname>Lähdesmäki</surname><given-names>H</given-names></name></person-group><year iso-8601-date="2021">2021</year><article-title>Predicting recognition between T cell receptors and epitopes with TCRGP</article-title><source>PLOS Computational Biology</source><volume>17</volume><elocation-id>e1008814</elocation-id><pub-id pub-id-type="doi">10.1371/journal.pcbi.1008814</pub-id><pub-id pub-id-type="pmid">33764977</pub-id></element-citation></ref><ref id="bib13"><element-citation publication-type="preprint"><person-group person-group-type="author"><name><surname>Kingma</surname><given-names>DP</given-names></name><name><surname>Ba</surname><given-names>J</given-names></name></person-group><year iso-8601-date="2014">2014</year><article-title>Adam: a method for stochastic optimization</article-title><source>arXiv</source><pub-id pub-id-type="doi">10.48550/arXiv.1412.6980</pub-id></element-citation></ref><ref id="bib14"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Lefranc</surname><given-names>MP</given-names></name><name><surname>Pommié</surname><given-names>C</given-names></name><name><surname>Ruiz</surname><given-names>M</given-names></name><name><surname>Giudicelli</surname><given-names>V</given-names></name><name><surname>Foulquier</surname><given-names>E</given-names></name><name><surname>Truong</surname><given-names>L</given-names></name><name><surname>Thouvenin-Contet</surname><given-names>V</given-names></name><name><surname>Lefranc</surname><given-names>G</given-names></name></person-group><year iso-8601-date="2003">2003</year><article-title>IMGT unique numbering for immunoglobulin and T cell receptor variable domains and Ig superfamily V-like domains</article-title><source>Developmental and Comparative Immunology</source><volume>27</volume><fpage>55</fpage><lpage>77</lpage><pub-id pub-id-type="doi">10.1016/s0145-305x(02)00039-3</pub-id><pub-id pub-id-type="pmid">12477501</pub-id></element-citation></ref><ref id="bib15"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Mayer-Blackwell</surname><given-names>K</given-names></name><name><surname>Schattgen</surname><given-names>S</given-names></name><name><surname>Cohen-Lavi</surname><given-names>L</given-names></name><name><surname>Crawford</surname><given-names>JC</given-names></name><name><surname>Souquette</surname><given-names>A</given-names></name><name><surname>Gaevert</surname><given-names>JA</given-names></name><name><surname>Hertz</surname><given-names>T</given-names></name><name><surname>Thomas</surname><given-names>PG</given-names></name><name><surname>Bradley</surname><given-names>P</given-names></name><name><surname>Fiore-Gartland</surname><given-names>A</given-names></name></person-group><year iso-8601-date="2021">2021</year><article-title>TCR meta-clonotypes for biomarker discovery with <italic>tcrdist3</italic> enabled identification of public, HLA-restricted clusters of SARS-CoV-2 TCRs</article-title><source>eLife</source><volume>10</volume><elocation-id>e68605</elocation-id><pub-id pub-id-type="doi">10.7554/eLife.68605</pub-id><pub-id pub-id-type="pmid">34845983</pub-id></element-citation></ref><ref id="bib16"><element-citation publication-type="preprint"><person-group person-group-type="author"><name><surname>Meynard-Piganeau</surname><given-names>B</given-names></name><name><surname>Feinauer</surname><given-names>C</given-names></name><name><surname>Weigt</surname><given-names>M</given-names></name><name><surname>Walczak</surname><given-names>AM</given-names></name><name><surname>Mora</surname><given-names>T</given-names></name></person-group><year iso-8601-date="2023">2023</year><article-title>TULIP — a transformer based unsupervised language model for interacting peptides and T-cell receptors that generalizes to unseen epitopes</article-title><source>bioRxiv</source><pub-id pub-id-type="doi">10.1101/2023.07.19.549669</pub-id></element-citation></ref><ref id="bib17"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Meysman</surname><given-names>P</given-names></name><name><surname>Barton</surname><given-names>J</given-names></name><name><surname>Bravi</surname><given-names>B</given-names></name><name><surname>Cohen-Lavi</surname><given-names>L</given-names></name><name><surname>Karnaukhov</surname><given-names>V</given-names></name><name><surname>Lilleskov</surname><given-names>E</given-names></name><name><surname>Montemurro</surname><given-names>A</given-names></name><name><surname>Nielsen</surname><given-names>M</given-names></name><name><surname>Mora</surname><given-names>T</given-names></name><name><surname>Pereira</surname><given-names>P</given-names></name><name><surname>Postovskaya</surname><given-names>A</given-names></name><name><surname>Martínez</surname><given-names>MR</given-names></name><name><surname>Fernandez-de-Cossio-Diaz</surname><given-names>J</given-names></name><name><surname>Vujkovic</surname><given-names>A</given-names></name><name><surname>Walczak</surname><given-names>AM</given-names></name><name><surname>Weber</surname><given-names>A</given-names></name><name><surname>Yin</surname><given-names>R</given-names></name><name><surname>Eugster</surname><given-names>A</given-names></name><name><surname>Sharma</surname><given-names>V</given-names></name></person-group><year iso-8601-date="2023">2023</year><article-title>Benchmarking solutions to the T-cell receptor epitope prediction problem: IMMREP22 workshop report</article-title><source>ImmunoInformatics</source><volume>9</volume><elocation-id>100024</elocation-id><pub-id pub-id-type="doi">10.1016/j.immuno.2023.100024</pub-id></element-citation></ref><ref id="bib18"><element-citation publication-type="software"><person-group person-group-type="author"><collab>mnielLab</collab></person-group><year iso-8601-date="2024">2024</year><data-title>Nettcr-2.2</data-title><version designator="swh:1:rev:cf04117cc0d5635d1272ee58c905de18dc85f3bd">swh:1:rev:cf04117cc0d5635d1272ee58c905de18dc85f3bd</version><source>Software Heritage</source><ext-link ext-link-type="uri" xlink:href="https://archive.softwareheritage.org/swh:1:dir:cb38fb8658948cf63c5ca7023d13349f0677e337;origin=https://github.com/mnielLab/NetTCR-2.2;visit=swh:1:snp:bb0d99dae31b1649dec75c477be52bb3670b7625;anchor=swh:1:rev:cf04117cc0d5635d1272ee58c905de18dc85f3bd">https://archive.softwareheritage.org/swh:1:dir:cb38fb8658948cf63c5ca7023d13349f0677e337;origin=https://github.com/mnielLab/NetTCR-2.2;visit=swh:1:snp:bb0d99dae31b1649dec75c477be52bb3670b7625;anchor=swh:1:rev:cf04117cc0d5635d1272ee58c905de18dc85f3bd</ext-link></element-citation></ref><ref id="bib19"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Montemurro</surname><given-names>A</given-names></name><name><surname>Schuster</surname><given-names>V</given-names></name><name><surname>Povlsen</surname><given-names>HR</given-names></name><name><surname>Bentzen</surname><given-names>AK</given-names></name><name><surname>Jurtz</surname><given-names>V</given-names></name><name><surname>Chronister</surname><given-names>WD</given-names></name><name><surname>Crinklaw</surname><given-names>A</given-names></name><name><surname>Hadrup</surname><given-names>SR</given-names></name><name><surname>Winther</surname><given-names>O</given-names></name><name><surname>Peters</surname><given-names>B</given-names></name><name><surname>Jessen</surname><given-names>LE</given-names></name><name><surname>Nielsen</surname><given-names>M</given-names></name></person-group><year iso-8601-date="2021">2021</year><article-title>NetTCR-2.0 enables accurate prediction of TCR-peptide binding by using paired TCRα and β sequence data</article-title><source>Communications Biology</source><volume>4</volume><elocation-id>1060</elocation-id><pub-id pub-id-type="doi">10.1038/s42003-021-02610-3</pub-id><pub-id pub-id-type="pmid">34508155</pub-id></element-citation></ref><ref id="bib20"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Montemurro</surname><given-names>A</given-names></name><name><surname>Jessen</surname><given-names>LE</given-names></name><name><surname>Nielsen</surname><given-names>M</given-names></name></person-group><year iso-8601-date="2022">2022</year><article-title>NetTCR-2.1: Lessons and guidance on how to develop models for TCR specificity predictions</article-title><source>Frontiers in Immunology</source><volume>13</volume><elocation-id>1055151</elocation-id><pub-id pub-id-type="doi">10.3389/fimmu.2022.1055151</pub-id><pub-id pub-id-type="pmid">36561755</pub-id></element-citation></ref><ref id="bib21"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Montemurro</surname><given-names>A</given-names></name><name><surname>Povlsen</surname><given-names>HR</given-names></name><name><surname>Jessen</surname><given-names>LE</given-names></name><name><surname>Nielsen</surname><given-names>M</given-names></name></person-group><year iso-8601-date="2023">2023</year><article-title>Benchmarking data-driven filtering for denoising of TCRpMHC single-cell data</article-title><source>Scientific Reports</source><volume>13</volume><elocation-id>16147</elocation-id><pub-id pub-id-type="doi">10.1038/s41598-023-43048-3</pub-id><pub-id pub-id-type="pmid">37752190</pub-id></element-citation></ref><ref id="bib22"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Moris</surname><given-names>P</given-names></name><name><surname>De Pauw</surname><given-names>J</given-names></name><name><surname>Postovskaya</surname><given-names>A</given-names></name><name><surname>Gielis</surname><given-names>S</given-names></name><name><surname>De Neuter</surname><given-names>N</given-names></name><name><surname>Bittremieux</surname><given-names>W</given-names></name><name><surname>Ogunjimi</surname><given-names>B</given-names></name><name><surname>Laukens</surname><given-names>K</given-names></name><name><surname>Meysman</surname><given-names>P</given-names></name></person-group><year iso-8601-date="2021">2021</year><article-title>Current challenges for unseen-epitope TCR interaction prediction and a new perspective derived from image classification</article-title><source>Briefings in Bioinformatics</source><volume>22</volume><elocation-id>bbaa318</elocation-id><pub-id pub-id-type="doi">10.1093/bib/bbaa318</pub-id><pub-id pub-id-type="pmid">33346826</pub-id></element-citation></ref><ref id="bib23"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Nielsen</surname><given-names>M</given-names></name><name><surname>Andreatta</surname><given-names>M</given-names></name><name><surname>Peters</surname><given-names>B</given-names></name><name><surname>Buus</surname><given-names>S</given-names></name></person-group><year iso-8601-date="2020">2020</year><article-title>Immunoinformatics: Predicting Peptide-MHC Binding</article-title><source>Annual Review of Biomedical Data Science</source><volume>3</volume><fpage>191</fpage><lpage>215</lpage><pub-id pub-id-type="doi">10.1146/annurev-biodatasci-021920-100259</pub-id><pub-id pub-id-type="pmid">37427310</pub-id></element-citation></ref><ref id="bib24"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Nilsson</surname><given-names>JB</given-names></name><name><surname>Kaabinejadian</surname><given-names>S</given-names></name><name><surname>Yari</surname><given-names>H</given-names></name><name><surname>Peters</surname><given-names>B</given-names></name><name><surname>Barra</surname><given-names>C</given-names></name><name><surname>Gragert</surname><given-names>L</given-names></name><name><surname>Hildebrand</surname><given-names>W</given-names></name><name><surname>Nielsen</surname><given-names>M</given-names></name></person-group><year iso-8601-date="2023">2023</year><article-title>Machine learning reveals limited contribution of trans-only encoded variants to the HLA-DQ immunopeptidome</article-title><source>Communications Biology</source><volume>6</volume><elocation-id>442</elocation-id><pub-id pub-id-type="doi">10.1038/s42003-023-04749-7</pub-id><pub-id pub-id-type="pmid">37085710</pub-id></element-citation></ref><ref id="bib25"><element-citation publication-type="preprint"><person-group person-group-type="author"><name><surname>Paszke</surname><given-names>A</given-names></name><name><surname>Gross</surname><given-names>S</given-names></name><name><surname>Massa</surname><given-names>F</given-names></name><name><surname>Lerer</surname><given-names>A</given-names></name><name><surname>Bradbury</surname><given-names>J</given-names></name><name><surname>Chanan</surname><given-names>G</given-names></name><name><surname>Killeen</surname><given-names>T</given-names></name><name><surname>Lin</surname><given-names>Z</given-names></name><name><surname>Gimelshein</surname><given-names>N</given-names></name><name><surname>Antiga</surname><given-names>L</given-names></name><name><surname>Desmaison</surname><given-names>A</given-names></name><name><surname>Köpf</surname><given-names>A</given-names></name><name><surname>Yang</surname><given-names>E</given-names></name><name><surname>DeVito</surname><given-names>Z</given-names></name><name><surname>Raison</surname><given-names>M</given-names></name><name><surname>Tejani</surname><given-names>A</given-names></name><name><surname>Chilamkurthy</surname><given-names>S</given-names></name><name><surname>Steiner</surname><given-names>B</given-names></name><name><surname>Fang</surname><given-names>L</given-names></name><name><surname>Bai</surname><given-names>J</given-names></name><name><surname>Chintala</surname><given-names>S</given-names></name></person-group><year iso-8601-date="2019">2019</year><article-title>Pytorch: An Imperative Style, High-Performance Deep Learning Library. Advances in Neural Information Processing Systems</article-title><source>arXiv</source><pub-id pub-id-type="doi">10.48550/arXiv.1912.01703</pub-id></element-citation></ref><ref id="bib26"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Povlsen</surname><given-names>HR</given-names></name><name><surname>Bentzen</surname><given-names>AK</given-names></name><name><surname>Kadivar</surname><given-names>M</given-names></name><name><surname>Jessen</surname><given-names>LE</given-names></name><name><surname>Hadrup</surname><given-names>SR</given-names></name><name><surname>Nielsen</surname><given-names>M</given-names></name></person-group><year iso-8601-date="2023">2023</year><article-title>Improved T cell receptor antigen pairing through data-driven filtering of sequencing information from single cells</article-title><source>eLife</source><volume>12</volume><elocation-id>e81810</elocation-id><pub-id pub-id-type="doi">10.7554/eLife.81810</pub-id><pub-id pub-id-type="pmid">37133356</pub-id></element-citation></ref><ref id="bib27"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Reynisson</surname><given-names>B</given-names></name><name><surname>Alvarez</surname><given-names>B</given-names></name><name><surname>Paul</surname><given-names>S</given-names></name><name><surname>Peters</surname><given-names>B</given-names></name><name><surname>Nielsen</surname><given-names>M</given-names></name></person-group><year iso-8601-date="2020">2020</year><article-title>NetMHCpan-4.1 and NetMHCIIpan-4.0: improved predictions of MHC antigen presentation by concurrent motif deconvolution and integration of MS MHC eluted ligand data</article-title><source>Nucleic Acids Research</source><volume>48</volume><fpage>W449</fpage><lpage>W454</lpage><pub-id pub-id-type="doi">10.1093/nar/gkaa379</pub-id><pub-id pub-id-type="pmid">32406916</pub-id></element-citation></ref><ref id="bib28"><element-citation publication-type="preprint"><person-group person-group-type="author"><name><surname>Shen</surname><given-names>W</given-names></name><name><surname>Wong</surname><given-names>H</given-names></name><name><surname>Xiao</surname><given-names>Q</given-names></name><name><surname>Guo</surname><given-names>X</given-names></name><name><surname>Smale</surname><given-names>S</given-names></name></person-group><year iso-8601-date="2012">2012</year><article-title>Towards a mathematical foundation of immunology and amino acid chains</article-title><source>arXiv</source><pub-id pub-id-type="doi">10.48550/arXiv.1205.6031</pub-id></element-citation></ref><ref id="bib29"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Sidhom</surname><given-names>JW</given-names></name><name><surname>Larman</surname><given-names>HB</given-names></name><name><surname>Pardoll</surname><given-names>DM</given-names></name><name><surname>Baras</surname><given-names>AS</given-names></name></person-group><year iso-8601-date="2021">2021</year><article-title>DeepTCR is a deep learning framework for revealing sequence concepts within T-cell repertoires</article-title><source>Nature Communications</source><volume>12</volume><elocation-id>1605</elocation-id><pub-id pub-id-type="doi">10.1038/s41467-021-21879-w</pub-id><pub-id pub-id-type="pmid">33707415</pub-id></element-citation></ref><ref id="bib30"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Tong</surname><given-names>Y</given-names></name><name><surname>Wang</surname><given-names>J</given-names></name><name><surname>Zheng</surname><given-names>T</given-names></name><name><surname>Zhang</surname><given-names>X</given-names></name><name><surname>Xiao</surname><given-names>X</given-names></name><name><surname>Zhu</surname><given-names>X</given-names></name><name><surname>Lai</surname><given-names>X</given-names></name><name><surname>Liu</surname><given-names>X</given-names></name></person-group><year iso-8601-date="2020">2020</year><article-title>SETE: Sequence-based Ensemble learning approach for TCR Epitope binding prediction</article-title><source>Computational Biology and Chemistry</source><volume>87</volume><elocation-id>107281</elocation-id><pub-id pub-id-type="doi">10.1016/j.compbiolchem.2020.107281</pub-id><pub-id pub-id-type="pmid">32623023</pub-id></element-citation></ref><ref id="bib31"><element-citation publication-type="software"><person-group person-group-type="author"><collab>viragbioinfo</collab><collab>pmeysman</collab><collab>liel-cohen</collab></person-group><year iso-8601-date="2022">2022</year><data-title>Immrep_2022_Tcrspecificity</data-title><source>GitHub</source><ext-link ext-link-type="uri" xlink:href="https://github.com/viragbioinfo/IMMREP_2022_TCRSpecificity">https://github.com/viragbioinfo/IMMREP_2022_TCRSpecificity</ext-link></element-citation></ref><ref id="bib32"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Virtanen</surname><given-names>P</given-names></name><name><surname>Gommers</surname><given-names>R</given-names></name><name><surname>Oliphant</surname><given-names>TE</given-names></name><name><surname>Haberland</surname><given-names>M</given-names></name><name><surname>Reddy</surname><given-names>T</given-names></name><name><surname>Cournapeau</surname><given-names>D</given-names></name><name><surname>Burovski</surname><given-names>E</given-names></name><name><surname>Peterson</surname><given-names>P</given-names></name><name><surname>Weckesser</surname><given-names>W</given-names></name><name><surname>Bright</surname><given-names>J</given-names></name><name><surname>van der Walt</surname><given-names>SJ</given-names></name><name><surname>Brett</surname><given-names>M</given-names></name><name><surname>Wilson</surname><given-names>J</given-names></name><name><surname>Millman</surname><given-names>KJ</given-names></name><name><surname>Mayorov</surname><given-names>N</given-names></name><name><surname>Nelson</surname><given-names>ARJ</given-names></name><name><surname>Jones</surname><given-names>E</given-names></name><name><surname>Kern</surname><given-names>R</given-names></name><name><surname>Larson</surname><given-names>E</given-names></name><name><surname>Carey</surname><given-names>CJ</given-names></name><name><surname>Polat</surname><given-names>İ</given-names></name><name><surname>Feng</surname><given-names>Y</given-names></name><name><surname>Moore</surname><given-names>EW</given-names></name><name><surname>VanderPlas</surname><given-names>J</given-names></name><name><surname>Laxalde</surname><given-names>D</given-names></name><name><surname>Perktold</surname><given-names>J</given-names></name><name><surname>Cimrman</surname><given-names>R</given-names></name><name><surname>Henriksen</surname><given-names>I</given-names></name><name><surname>Quintero</surname><given-names>EA</given-names></name><name><surname>Harris</surname><given-names>CR</given-names></name><name><surname>Archibald</surname><given-names>AM</given-names></name><name><surname>Ribeiro</surname><given-names>AH</given-names></name><name><surname>Pedregosa</surname><given-names>F</given-names></name><name><surname>van Mulbregt</surname><given-names>P</given-names></name><collab>SciPy 1.0 Contributors</collab></person-group><year iso-8601-date="2020">2020</year><article-title>SciPy 1.0: fundamental algorithms for scientific computing in Python</article-title><source>Nature Methods</source><volume>17</volume><fpage>261</fpage><lpage>272</lpage><pub-id pub-id-type="doi">10.1038/s41592-019-0686-2</pub-id><pub-id pub-id-type="pmid">32015543</pub-id></element-citation></ref><ref id="bib33"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Vita</surname><given-names>R</given-names></name><name><surname>Mahajan</surname><given-names>S</given-names></name><name><surname>Overton</surname><given-names>JA</given-names></name><name><surname>Dhanda</surname><given-names>SK</given-names></name><name><surname>Martini</surname><given-names>S</given-names></name><name><surname>Cantrell</surname><given-names>JR</given-names></name><name><surname>Wheeler</surname><given-names>DK</given-names></name><name><surname>Sette</surname><given-names>A</given-names></name><name><surname>Peters</surname><given-names>B</given-names></name></person-group><year iso-8601-date="2019">2019</year><article-title>The Immune Epitope Database (IEDB): 2018 update</article-title><source>Nucleic Acids Research</source><volume>47</volume><fpage>D339</fpage><lpage>D343</lpage><pub-id pub-id-type="doi">10.1093/nar/gky1006</pub-id><pub-id pub-id-type="pmid">30357391</pub-id></element-citation></ref><ref id="bib34"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Zhang</surname><given-names>W</given-names></name><name><surname>Hawkins</surname><given-names>PG</given-names></name><name><surname>He</surname><given-names>J</given-names></name><name><surname>Gupta</surname><given-names>NT</given-names></name><name><surname>Liu</surname><given-names>J</given-names></name><name><surname>Choonoo</surname><given-names>G</given-names></name><name><surname>Jeong</surname><given-names>SW</given-names></name><name><surname>Chen</surname><given-names>CR</given-names></name><name><surname>Dhanik</surname><given-names>A</given-names></name><name><surname>Dillon</surname><given-names>M</given-names></name><name><surname>Deering</surname><given-names>R</given-names></name><name><surname>Macdonald</surname><given-names>LE</given-names></name><name><surname>Thurston</surname><given-names>G</given-names></name><name><surname>Atwal</surname><given-names>GS</given-names></name></person-group><year iso-8601-date="2021">2021</year><article-title>A framework for highly multiplexed dextramer mapping and prediction of T cell receptor sequences to antigen specificity</article-title><source>Science Advances</source><volume>7</volume><elocation-id>eabf5835</elocation-id><pub-id pub-id-type="doi">10.1126/sciadv.abf5835</pub-id><pub-id pub-id-type="pmid">33990328</pub-id></element-citation></ref></ref-list></back><sub-article article-type="editor-report" id="sa0"><front-stub><article-id pub-id-type="doi">10.7554/eLife.93934.3.sa0</article-id><title-group><article-title>eLife assessment</article-title></title-group><contrib-group><contrib contrib-type="author"><name><surname>Sohn</surname><given-names>Jungsan</given-names></name><role specific-use="editor">Reviewing Editor</role><aff><institution>Johns Hopkins University School of Medicine</institution><country>United States</country></aff></contrib></contrib-group><kwd-group kwd-group-type="evidence-strength"><kwd>Compelling</kwd></kwd-group><kwd-group kwd-group-type="claim-importance"><kwd>Useful</kwd></kwd-group></front-stub><body><p>This study presents a <bold>useful</bold> tool for predicting TCR specificity with <bold>compelling</bold> evidence for improvements over prior art. This work/tool will be broadly relevant to computational biologists and immunologists.</p></body></sub-article><sub-article article-type="referee-report" id="sa1"><front-stub><article-id pub-id-type="doi">10.7554/eLife.93934.3.sa1</article-id><title-group><article-title>Reviewer #1 (Public Review):</article-title></title-group><contrib-group><contrib contrib-type="author"><anonymous/><role specific-use="referee">Reviewer</role></contrib></contrib-group></front-stub><body><p>In this article, different machine learning models (pan-specific, peptide-specific, pre-trained, and ensemble models) are tested to predict TCR-specificity from a paired-chain peptide-TCR dataset. The data consists of 6,358 positive observations across 26 peptides (as compared to six peptides in NetTCR version 2.1) after several pre-processing steps (filtering and redundancy reduction). For each positive sample, five negative samples were generated by swapping TCRs of a given peptide with TCRs binding to other peptides. The weighted loss function is used to deal with the imbalanced dataset in pan-specific models.</p><p>The results demonstrate that the redundant data introduced during training did not lead to performance gain; rather, a decrease in performance was observed for the pan-specific model. The removal of outliers leads to better performance.</p><p>To further improve the peptide-specific model performance, an architecture is created to combine pan-specific and peptide-specific models, where the pan-specific model is trained on pan-specfic data while keeping the peptide-specfic part of the model frozen, and the peptide-specific model is trained on a peptide-specific dataset while keeping the pan-specific part of the model frozen. This model surpassed the performance of individual pan-specific and peptide-specific models. Finally, sequence similarity-based predictions of TCRbase are integrated into the pre-trained CNN model, which further improved the model performance (mostly due to the better discrimination of binders and non-binders).</p><p>The prediction for unseen peptides is still low in a pan-specific model; however, an improvement in prediction is observed for peptides with high similarity to the ones in the training dataset. Furthermore, it is shown that 15 observations shows satisfactory performance as compared to the ~150 recommended in the literature.</p><p>Models are evaluated on the external dataset (IMMREP benchmark). Peptide-specific models performed competitively with the best models in the benchmark. The pre-trained model performed worst, which the authors suggested could be because of positive and negative sample swapping across training and testing sets. To resolve this issue, they applied the redundancy removal technique to the IMMER dataset. The results agreed with earlier conclusion that the pre-trained models surpassed peptide-specific models and the integration of similarity-based methods leads to performance boost. It highlights the need for the creation of a new benchmark without data redundancy or leakage problems.</p><p>The manuscript is well written, clear and easy to understand. The data is effectively presented. The results validate the drawn conclusions.</p></body></sub-article><sub-article article-type="referee-report" id="sa2"><front-stub><article-id pub-id-type="doi">10.7554/eLife.93934.3.sa2</article-id><title-group><article-title>Reviewer #2 (Public Review):</article-title></title-group><contrib-group><contrib contrib-type="author"><anonymous/><role specific-use="referee">Reviewer</role></contrib></contrib-group></front-stub><body><p>Summary:</p><p>The authors describe a novel ML approach to predict binding between MHC-bound peptides and T-Cell receptors. Such approaches are particularly useful for predicting the binding of peptide sequences with low similarity when compared to existing data sets. The authors focus on improving dataset quality and optimizing model architecture to achieve a pan-specific predictive model in hopes of achieving a high precision model for novel peptide sequences.</p><p>Strengths:</p><p>Since assuring the quality of training datasets is the first major step in any ML training project, the extensive human curation and computational analysis and enhancements made in this manuscript represent a major contribution to the field. Moreover, the systematic approach to testing redundancy reduction and data augmentation is exemplary, and will significantly help future research in the field.</p><p>The authors also highlight how their model can identify outliers and how that can be used to improve the model around known sequences, which can help the creation and optimization of future datasets for peptide binding.</p><p>The new models presented here are novel and built using paired α/β TCR sequence data to predict peptide-specific TCR binding, and have been extensively and rigorously tested.</p><p>Weaknesses:</p><p>Achieving an accurate pan-specific model is an ambitious goal, and the authors have significant difficulties when trying to achieve non-random performance for prediction of TCR binding to novel peptides. This is the most challenging task for this kind of model, but also the most desirable when applying such models to biotechnological and bioengineering projects.</p><p>The manuscript is a highly technical and extremely detailed computational work, which can make the achievements and impact of the work hard to parse for application-oriented researchers, and still hard to translate to real-world use-cases for TCR specificity predictions.</p></body></sub-article><sub-article article-type="author-comment" id="sa3"><front-stub><article-id pub-id-type="doi">10.7554/eLife.93934.3.sa3</article-id><title-group><article-title>Author Response</article-title></title-group><contrib-group><contrib contrib-type="author"><name><surname>Jensen</surname><given-names>Mathias Fynbo</given-names></name><role specific-use="author">Author</role><aff><institution>Technical University of Denmark</institution><addr-line><named-content content-type="city">Kgs. Lyngby</named-content></addr-line><country>Denmark</country></aff></contrib><contrib contrib-type="author"><name><surname>Nielsen</surname><given-names>Morten</given-names></name><role specific-use="author">Author</role><aff><institution>Technical University of Denmark</institution><addr-line><named-content content-type="city">Kgs. Lyngby</named-content></addr-line><country>Denmark</country></aff></contrib></contrib-group></front-stub><body><p>The following is the authors’ response to the original reviews.</p><p>We thank the editor and reviewers for their valuable feedback and comments. Below we have addressed all points carefully and have, when needed, revised the manuscript accordingly.</p><p>Note that we have taken the opportunity to correct minor typos and unclear text in the revised manuscript.</p><p>Of importance to the editors and reviewers, we detected a few minor factual errors in the method section, which we have now corrected. The first error was that we wrongfully stated that our final dataset had 6358 unique TCRs, whereas it was in fact 6353 unique TCRs. The second error was that we stated that the maximum length of CDR1ꞵ was 5, where it was in fact 6. The last error was that we stated that we used a Levenshtein distance of at least 3 to discard similar peptides when swapping the TCRs to generate negatives. This should have been a Levenshtein greater than 3, to match the script we used to generate negatives (though no peptides had a Levenshtein distance of exactly 3).</p><disp-quote content-type="editor-comment"><p><bold>eLife assessment</bold></p><p>This important study reports on an improved deep-learning-based method for predicting TCR specificity. The evidence supporting the overall method is compelling, although the inclusion of real-world applications and clear comparisons with the previous version would have further strengthened the study. This work will be of broad interest to immunologists and computational biologists.</p></disp-quote><p>It is not fully clear to us what is meant by “clear comparisons with the previous version”. In the manuscript we consistently compare the performance of each novel approach introduced to that of the ancestor NetTCR-2.1. Further, we concluded the manuscript with a performance to a large set of current state-of-the-art methods by training and evaluating the novel modeling framework on the IMMREP22 benchmark data.</p><p>We agree that the manuscript can be improved by including a brief discussion of real-life applications of models for prediction of TCR specificity, and have included a brief text in the introduction.</p><disp-quote content-type="editor-comment"><p><bold>Reviewer #1 (Recommendations For The Authors):</bold></p><p>It was a great pleasure to read this article. All the concepts and motivations are clearly defined. I have just a few questions.</p><p>What was the motivation behind employing a 1:5 positive-negative ratio? Could it be the cause of worse performance in the case of outliers?</p></disp-quote><p>The ratio 1:5 is based on results from earlier work [36561755]. In this work, negatives were constructed as a mix of swapped and true (i.e measured) negatives with a ratio 1:5 for each. This work demonstrated a slight gain when including both types of negatives compared to only using swapped. In a subsequent publication [<ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/j.immuno.2023.100024">https://doi.org/10.1016/j.immuno.2023.100024</ext-link>], it demonstrated that optimal performance was obtained when only including swapped negatives (again in a ratio 1:5). Given this, we maintained this approach in the current work. It is clear that this choice is somewhat arbitrary, and that further work is needed to fully address this issue and the general issue of how to best generate negatives for ML of TCR specificity. Such work is in our view however beyond the scope of the current manuscript.</p><disp-quote content-type="editor-comment"><p>Why is the patience of 200 epochs for peptide-specific models and 100 epochs for pan-specific and pre-trained models used in the context of the early stopping mechanism?</p></disp-quote><p>We observed that the loss curve was overall very stable in the case of pan-specific training, likely due to the large amount of data included in this training. Therefore, these models were less likely to become stuck in a local minimum during training, meaning that a lower patience for early stopping would not prevent the model from learning optimally. In contrast, we found for some peptides that the loss curve was very erratic, and would sometimes become stuck in a local minimum for an extended time. To resolve this, the patience was increased from 100 to 200, which resulted in a better chance to escape these minima, as well as a better overall performance.</p><disp-quote content-type="editor-comment"><p>Why is weight 3.8 used in the weighted loss function in the pan-specific model?</p></disp-quote><p>The weighted loss was scaled with a division factor (c) of 3.8, in order to get an overall loss that was comparable to training without sample weights. This was primarily done to better compare the two approaches (scaling and no scaling) in terms of loss, and not so much to improve the training itself, as we already use a relatively conservative sample weight scaling based on log2. We have added a brief sentence to clarify this in the manuscript.</p><disp-quote content-type="editor-comment"><p><bold>Reviewer #2 (Recommendations For The Authors):</bold></p><p>This work is the evolution of previous studies that developed the NetTCR platform, and in a previous paper cited in this study, the authors explore the paired dataset approach with &quot;paired α/β TCR sequence data&quot;. In this manuscript, the authors should make clear what advances were made when compared to the previous study. This is not clear, although extensive reference is made to NetTCR 2.0 and 2.1. Differences are scattered throughout the manuscript, so I would suggest a section or paragraph clearly delineating the advances in model architecture and training when compared to previous versions recently published.</p></disp-quote><p>It is not clear to us when the reviewer is referring to when stating “the authors should make clear what advances were made when compared to the previous study”. Throughout the manuscript we consistently compare the performance of each novel approach introduced to that of the ancestor NetTCR-2.1. In addition, we briefly discuss all of the changes to the architecture and training at the start of the discussion section. Further, we concluded the manuscript with a performance to a large set of current state-of-the-art methods by training and evaluating the novel modeling framework on the IMMREP22 benchmark data. It is correct that the advances are described progressively by introducing each novel approach one by one, i.e. refining the machine learning model architecture and training setup, data denoising in terms of outlier identification in the training data, new model architectures combining the properties of a pan- and peptide-specific model, and integration of similarity based approach to boost model performance. We believe this helps better justify the relevance of each of the novel approaches introduced.</p><disp-quote content-type="editor-comment"><p>In Figure 3, the colors have labels, but they are not explained in the legend or in the text. This makes it very difficult to understand the data in the various columns. Also, since it represents the Mean AUC, the data would be best displayed with a boxplot or a mean and bars for variance.</p></disp-quote><p>We agree, and have changed Figure 3 and its corresponding AUC 0.1 figure (Supplementary Figure 1) into a boxplot. We also further clarified what the different models were in the figure text.</p><disp-quote content-type="editor-comment"><p>Given the potential impact of this work on bioengineering and biotechnology, I would suggest adding a paragraph or section to the discussion where potential applications of the current model, or examples of applications of previous (or competing) models have been used to further biological research.</p></disp-quote><p>We agree and have added a brief sentence in the introduction to outline biotechnological applications of models for prediction of TCR specificity.</p></body></sub-article></article>