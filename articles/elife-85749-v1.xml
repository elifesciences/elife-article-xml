<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD with MathML3 v1.3 20210610//EN"  "JATS-archivearticle1-3-mathml3.dtd"><article xmlns:ali="http://www.niso.org/schemas/ali/1.0/" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article" dtd-version="1.3"><front><journal-meta><journal-id journal-id-type="nlm-ta">elife</journal-id><journal-id journal-id-type="publisher-id">eLife</journal-id><journal-title-group><journal-title>eLife</journal-title></journal-title-group><issn publication-format="electronic" pub-type="epub">2050-084X</issn><publisher><publisher-name>eLife Sciences Publications, Ltd</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="publisher-id">85749</article-id><article-id pub-id-type="doi">10.7554/eLife.85749</article-id><article-categories><subj-group subj-group-type="display-channel"><subject>Tools and Resources</subject></subj-group><subj-group subj-group-type="heading"><subject>Computational and Systems Biology</subject></subj-group></article-categories><title-group><article-title>Predicting metabolic modules in incomplete bacterial genomes with MetaPathPredict</article-title></title-group><contrib-group><contrib contrib-type="author" corresp="yes" id="author-301596"><name><surname>Geller-McGrath</surname><given-names>David</given-names></name><contrib-id authenticated="true" contrib-id-type="orcid">https://orcid.org/0000-0002-5629-9983</contrib-id><email>dgellermcgrath@whoi.edu</email><xref ref-type="aff" rid="aff1">1</xref><xref ref-type="fn" rid="con1"/><xref ref-type="fn" rid="conf1"/></contrib><contrib contrib-type="author" id="author-303893"><name><surname>Konwar</surname><given-names>Kishori M</given-names></name><xref ref-type="aff" rid="aff2">2</xref><xref ref-type="fn" rid="con2"/><xref ref-type="fn" rid="conf2"/></contrib><contrib contrib-type="author"><name><surname>Edgcomb</surname><given-names>Virginia P</given-names></name><xref ref-type="aff" rid="aff3">3</xref><xref ref-type="fn" rid="con3"/><xref ref-type="fn" rid="conf1"/></contrib><contrib contrib-type="author"><name><surname>Pachiadaki</surname><given-names>Maria</given-names></name><xref ref-type="aff" rid="aff1">1</xref><xref ref-type="fn" rid="con4"/><xref ref-type="fn" rid="conf1"/></contrib><contrib contrib-type="author"><name><surname>Roddy</surname><given-names>Jack W</given-names></name><xref ref-type="aff" rid="aff4">4</xref><xref ref-type="other" rid="fund3"/><xref ref-type="fn" rid="con5"/><xref ref-type="fn" rid="conf1"/></contrib><contrib contrib-type="author" corresp="yes"><name><surname>Wheeler</surname><given-names>Travis J</given-names></name><email>twheeler@arizona.edu</email><xref ref-type="aff" rid="aff4">4</xref><xref ref-type="other" rid="fund2"/><xref ref-type="other" rid="fund3"/><xref ref-type="fn" rid="con6"/><xref ref-type="fn" rid="conf1"/></contrib><contrib contrib-type="author" corresp="yes"><name><surname>McDermott</surname><given-names>Jason E</given-names></name><contrib-id authenticated="true" contrib-id-type="orcid">https://orcid.org/0000-0003-2961-2572</contrib-id><email>jason.mcdermott@pnnl.gov</email><xref ref-type="aff" rid="aff5">5</xref><xref ref-type="aff" rid="aff6">6</xref><xref ref-type="other" rid="fund2"/><xref ref-type="other" rid="fund3"/><xref ref-type="fn" rid="con7"/><xref ref-type="fn" rid="conf1"/></contrib><aff id="aff1"><label>1</label><institution-wrap><institution-id institution-id-type="ror">https://ror.org/03zbnzt98</institution-id><institution>Biology Department, Woods Hole Oceanographic Institution</institution></institution-wrap><addr-line><named-content content-type="city">Woods Hole</named-content></addr-line><country>United States</country></aff><aff id="aff2"><label>2</label><institution>Luit Consulting</institution><addr-line><named-content content-type="city">Revere</named-content></addr-line><country>United States</country></aff><aff id="aff3"><label>3</label><institution-wrap><institution-id institution-id-type="ror">https://ror.org/03zbnzt98</institution-id><institution>Marine Geology and Geophysics Department, Woods Hole Oceanographic Institution</institution></institution-wrap><addr-line><named-content content-type="city">Woods Hole</named-content></addr-line><country>United States</country></aff><aff id="aff4"><label>4</label><institution-wrap><institution-id institution-id-type="ror">https://ror.org/03m2x1q45</institution-id><institution>R. Ken Coit College of Pharmacy, University of Arizona</institution></institution-wrap><addr-line><named-content content-type="city">Tucson</named-content></addr-line><country>United States</country></aff><aff id="aff5"><label>5</label><institution-wrap><institution-id institution-id-type="ror">https://ror.org/05h992307</institution-id><institution>Computational Sciences Division, Pacific Northwest National Laboratory</institution></institution-wrap><addr-line><named-content content-type="city">Richland</named-content></addr-line><country>United States</country></aff><aff id="aff6"><label>6</label><institution-wrap><institution-id institution-id-type="ror">https://ror.org/009avj582</institution-id><institution>Department of Molecular Microbiology and Immunology, Oregon Health &amp; Science University</institution></institution-wrap><addr-line><named-content content-type="city">Portland</named-content></addr-line><country>United States</country></aff></contrib-group><contrib-group content-type="section"><contrib contrib-type="editor"><name><surname>Nicolás</surname><given-names>Marisa</given-names></name><role>Reviewing Editor</role><aff><institution-wrap><institution-id institution-id-type="ror">https://ror.org/0498ekt05</institution-id><institution>Laboratório Nacional de Computação Científica</institution></institution-wrap><country>Brazil</country></aff></contrib><contrib contrib-type="senior_editor"><name><surname>Kana</surname><given-names>Bavesh D</given-names></name><role>Senior Editor</role><aff><institution-wrap><institution-id institution-id-type="ror">https://ror.org/03rp50x72</institution-id><institution>University of the Witwatersrand</institution></institution-wrap><country>South Africa</country></aff></contrib></contrib-group><pub-date publication-format="electronic" date-type="publication"><day>02</day><month>05</month><year>2024</year></pub-date><volume>13</volume><elocation-id>e85749</elocation-id><history><date date-type="received" iso-8601-date="2022-12-22"><day>22</day><month>12</month><year>2022</year></date><date date-type="accepted" iso-8601-date="2024-04-16"><day>16</day><month>04</month><year>2024</year></date></history><pub-history><event><event-desc>This manuscript was published as a preprint at bioRxiv.</event-desc><date date-type="preprint" iso-8601-date="2022-12-22"><day>22</day><month>12</month><year>2022</year></date><self-uri content-type="preprint" xlink:href="https://doi.org/10.1101/2022.12.21.521254"/></event></pub-history><permissions><ali:free_to_read/><license xlink:href="http://creativecommons.org/publicdomain/zero/1.0/"><ali:license_ref>http://creativecommons.org/publicdomain/zero/1.0/</ali:license_ref><license-p>This is an open-access article, free of all copyright, and may be freely reproduced, distributed, transmitted, modified, built upon, or otherwise used by anyone for any lawful purpose. The work is made available under the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">Creative Commons CC0 public domain dedication</ext-link>.</license-p></license></permissions><self-uri content-type="pdf" xlink:href="elife-85749-v1.pdf"/><abstract><p>The reconstruction of complete microbial metabolic pathways using ‘omics data from environmental samples remains challenging. Computational pipelines for pathway reconstruction that utilize machine learning methods to predict the presence or absence of KEGG modules in incomplete genomes are lacking. Here, we present MetaPathPredict, a software tool that incorporates machine learning models to predict the presence of complete KEGG modules within bacterial genomic datasets. Using gene annotation data and information from the KEGG module database, MetaPathPredict employs deep learning models to predict the presence of KEGG modules in a genome. MetaPathPredict can be used as a command line tool or as a Python module, and both options are designed to be run locally or on a compute cluster. Benchmarks show that MetaPathPredict makes robust predictions of KEGG module presence within highly incomplete genomes.</p></abstract><kwd-group kwd-group-type="author-keywords"><kwd>machine learning</kwd><kwd>metabolism prediction</kwd><kwd>bioinformatics</kwd></kwd-group><kwd-group kwd-group-type="research-organism"><title>Research organism</title><kwd>None</kwd></kwd-group><funding-group><award-group id="fund1"><funding-source><institution-wrap><institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100000015</institution-id><institution>Department of Energy</institution></institution-wrap></funding-source><award-id>SCGSR Program 2020 Solicitation 2 in Computational Biology and Bioinformatics</award-id><principal-award-recipient><name><surname>Geller-McGrath</surname><given-names>David</given-names></name></principal-award-recipient></award-group><award-group id="fund2"><funding-source><institution-wrap><institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100000002</institution-id><institution>National Institutes of Health</institution></institution-wrap></funding-source><award-id>NIGMS R01GM132600</award-id><principal-award-recipient><name><surname>McDermott</surname><given-names>Jason E</given-names></name><name><surname>Wheeler</surname><given-names>Travis J</given-names></name></principal-award-recipient></award-group><award-group id="fund3"><funding-source><institution-wrap><institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100000015</institution-id><institution>Department of Energy Office of Biological and Environmental Research</institution></institution-wrap></funding-source><award-id>Machine-Learning Approaches for Integrating Multi-Omics Data to Expand Microbiome Annotation</award-id><principal-award-recipient><name><surname>McDermott</surname><given-names>Jason E</given-names></name><name><surname>Roddy</surname><given-names>Jack W</given-names></name><name><surname>Wheeler</surname><given-names>Travis J</given-names></name></principal-award-recipient></award-group><funding-statement>The funders had no role in study design, data collection and interpretation, or the decision to submit the work for publication.</funding-statement></funding-group><custom-meta-group><custom-meta specific-use="meta-only"><meta-name>Author impact statement</meta-name><meta-value>MetaPathPredict is a novel bioinformatics tool that makes accurate predictions of KEGG module presence within highly incomplete bacterial genomes.</meta-value></custom-meta></custom-meta-group></article-meta></front><body><sec id="s1" sec-type="intro"><title>Introduction</title><p>Microorganisms play a key role in all major biogeochemical cycles on Earth. Accurate and more complete identification of microbial metabolic pathways within genomic data is crucial to understanding their potential activities. This identification of pathways within genomic data, and assessment of their expression, provides important insight into their influence on the chemistry of their environment and their mediation of interactions with other organisms.</p><p>In recent decades, the scientific community has significantly advanced its capability to gather and sequence genomes from microorganisms. Key steps in the process of working with isolated genomes, single-amplified genomes (SAGs), or metagenome assembled genomes (MAGs), are identifying genes coding for enzymes that catalyze metabolic reactions and inferring the metabolic potential of the associated organism from these data. These analyses involve comparing protein-coding sequences with homologous sequences from reference metabolic pathway databases including KEGG (<xref ref-type="bibr" rid="bib12">Kanehisa and Goto, 2000</xref>) and MetaCyc (<xref ref-type="bibr" rid="bib7">Caspi et al., 2018</xref>). Environmental genomes that are recovered from high-throughput sequencing samples vary in their degree of completeness due to numerous factors including limited coverage of low-abundance microbes, composition-based coverage biases, insertion-deletion errors, and substitution errors (<xref ref-type="bibr" rid="bib6">Browne et al., 2020</xref>). Enzymes encoded in genomes are also missed due to limitations in protein annotation methods, that is, undiscovered protein families may be undetected by traditional homology-based methods. This can limit the ability to determine the extent to which these organisms (or communities) can catalyze metabolic reactions and form pathways.</p><p>Sequencing biases, novel protein families, and incomplete gene and protein annotation databases lead to missing, ambiguous, or inaccurate gene annotations that create incomplete metabolic networks in recovered environmental genomes. This leads to a challenge in genome analysis: given a set of annotated genes that incompletely covers some known metabolic network, predict whether the network is, in fact, present in that organism (i.e. to predict whether one or more unobserved network components is likely present but unobserved for some reason). Existing algorithms for this metabolic network ‘gap filling’ largely fall into two categories of approaches: those based on network topology, such as the method utilized by Gapseq (<xref ref-type="bibr" rid="bib34">Zimmermann et al., 2021</xref>), and those that utilize pre-defined KEGG module cutoffs, such as those used by METABOLIC (<xref ref-type="bibr" rid="bib33">Zhou et al., 2022</xref>). Network topology and pathway gene presence/absence cutoffs, however, can lead to underestimation of pathways that are present, particularly in highly incomplete genomes. Parsimony-based algorithms such as MinPath detect gaps in a metabolic network and identify the minimum number of modifications to the network that can be made to activate those reactions (<xref ref-type="bibr" rid="bib32">Ye and Doak, 2009</xref>) its conservative approach, however, can lead to underestimation of the metabolic pathways present in a sample. KEMET (<xref ref-type="bibr" rid="bib21">Palù et al., 2022</xref>) can detect gaps in metabolic pathways by searching unannotated genes in a genome with custom Hidden Markov Models (HMMs) created based on the genome’s taxonomy. This approach, however, is limited by the genome taxonomies available in the KEGG GENES database. Other modern tools, such as DRAM (<xref ref-type="bibr" rid="bib28">Shaffer et al., 2020</xref>), provide annotations for metagenomic sequences but do not closely tie these to metabolic pathways. Flux-balance analysis (e.g. Escher-FBA; <xref ref-type="bibr" rid="bib25">Rowe et al., 2018</xref>) utilizes genome-scale metabolic models of organisms and requires experimental growth data for model parameterization; it is not easily applied to incomplete genome data, and the additional required experimental measurements may prohibit application in many use cases.</p><p>An emerging set of methods utilize machine learning models to a related problem of classifying microbial organisms’ niches based on their genomic features. One such example is a tool called Traitar, which utilizes Support Vector Machines (SVMs) to predict lifestyle and pathogenic traits in prokaryotes based on gene family abundance profiles (<xref ref-type="bibr" rid="bib31">Weimann et al., 2016</xref>). Other recent approaches have used machine learning approaches to train models using eukaryote MAG and transcriptome data to classify trophic mode (autotroph, mixotroph, or heterotroph) based on gene family abundance profiles (<xref ref-type="bibr" rid="bib15">Lambert et al., 2022</xref>; <xref ref-type="bibr" rid="bib1">Alexander et al., 2021</xref>). To our knowledge, there are no existing tools that predict the presence/absence of KEGG metabolic modules via machine learning models trained on gene features of high-quality genomes.</p><p>Here, we present ‘MetaPathPredict’, an open-source tool for metabolic pathway prediction based on a deep learning classification framework. MetaPathPredict addresses critical deficiencies in existing metabolic pathway reconstruction tools that limit the utility and predictive power of ‘omics data: it connects manually curated, current knowledge of metabolic pathways from the KEGG database with machine learning methods to reconstruct and predict the presence or absence of KEGG metabolic modules within genomic datasets including bacterial isolate genomes, MAGs, and SAGs.</p><p>The models underlying MetaPathPredict contain metabolic reaction and pathway information from taxonomically diverse bacterial isolate genomes and MAGs found in the NCBI RefSeq (<xref ref-type="bibr" rid="bib20">O’Leary et al., 2016</xref>) and Genome Taxonomy (GTDB, <xref ref-type="bibr" rid="bib22">Parks et al., 2022</xref>) databases. The set of metabolic modules from the KEGG database is the basis of the tool’s metabolic module reconstruction and prediction. The KEGG database contains metabolic pathway information for thousands of prokaryotic species and strains. KEGG modules are functional units of metabolic pathways composed of sets of ordered reaction steps. Examples include carbon fixation pathways, nitrification, biosynthesis of vitamins, and transporters or two-component systems (see <xref ref-type="supplementary-material" rid="supp1">Supplementary file 1a</xref> for a description of the distribution of modules covered by MetaPathPredict). MetaPathPredict is designed to run on the command-line locally or on a computing cluster and is available as a Python module on GitHub (<ext-link ext-link-type="uri" xlink:href="https://github.com/d-mcgrath/MetaPathPredict">https://github.com/d-mcgrath/MetaPathPredict</ext-link>).</p><p>A detailed overview of the MetaPathPredict pipeline is provided in <xref ref-type="fig" rid="fig1">Figure 1</xref>. The tool accepts as input gene annotations of one or more (possibly-incomplete) genomes, with associated KEGG ortholog (KO) gene identifiers. Because the genomes may be incomplete, it is possible that a KEGG module that is truly present in the organism will not be fully represented in the available data. MetaPathPredict first reconstructs both complete and incomplete KEGG metabolic modules, then predicts whether incomplete modules are in fact present. Input annotations can come from tools such as KofamScan (<xref ref-type="bibr" rid="bib2">Aramaki et al., 2020</xref>), DRAM, blastKOALA (<xref ref-type="bibr" rid="bib14">Kanehisa et al., 2016</xref>), ghostKOALA (<xref ref-type="bibr" rid="bib14">Kanehisa et al., 2016</xref>), or a custom list of KO identifier gene annotations. MetaPathPredict classification models produced accurate results on held-out test genome annotation datasets even when the data were highly incomplete. A set of two deep learning models.</p><fig id="fig1" position="float"><label>Figure 1.</label><caption><title>Overview of the MetaPathPredict pipeline.</title><p>Input genome annotations are read into MetaPathPredict as a data object. The data are scanned for present KEGG modules and are formatted into a feature matrix. The feature matrix is then used to make predictions for all incomplete modules (or modules specified by the user). A summary and detailed reconstruction and prediction objects, along with gap-filling options are returned in a list as the final output.</p></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-85749-fig1-v1.tif"/></fig><p>(5 hidden layers each) made predictions with a high degree of precision on all test datasets and with high recall on genomes with an estimated completeness as low as 30%. One model was trained to classify the presence or absence of 96 KEGG modules that were present in ≥10% and≤90% of training genomes. The second model classifies 94 modules with an imbalanced profile of presence/absence (i.e. were present in &lt;10% or&gt;90% of training genomes). False positive predictions were rare in all tests, while false negatives increased when predictions were made with highly incomplete gene annotation information, as would be expected. We believe that MetaPathPredict is a valuable tool to further enhance studies of metabolic potential in environmental microbiome studies as well as synthetic biology efforts.</p></sec><sec id="s2" sec-type="results|discussion"><title>Results and discussion</title><p>MetaPathPredict is designed to predict the presence of a metabolic module even when annotation support for that module is incomplete, for example due to incomplete sequencing/annotation of the constituent proteins. It was trained on both complete and down-sampled genomes for this task. Complete genomes containing the genes required to non-redundantly complete a KEGG module were labelled as containing the module, otherwise the module was labelled as absent. To create down-sampled genomes for training, protein annotations were randomly removed form complete genomes in increasing increments while still retaining KEGG module class labels (from those complete genomes). To assess MetaPathPredict’s efficacy in this ‘gap filling’ task, we performed a variety of benchmarking experiments in which the complete genomes/proteomes were down-sampled to artificially produce incomplete modules.</p><p>MetaPathPredict’s exhibited superior performance to other recently developed metabolic pathway reconstruction and prediction approaches. Its performance metrics on held-out test datasets suggest its models predict with high fidelity when at least 30% of gene annotations are recovered from a reconstructed genome (<xref ref-type="fig" rid="fig2">Figure 2</xref>). The efficacy of MetaPathPredict models was assessed using incomplete gene annotation data simulated from whole genomes, as well as from genomes reconstructed from reads that had been randomly down-sampled. We further benchmarked MetaPathPredict against custom presence/absence classification rules, and existing gap-filling tools METABOLIC and Gapseq.</p><fig id="fig2" position="float"><label>Figure 2.</label><caption><title>Comparison of performance metrics of MetaPathPredict’s pair of deep learning multi-label classification models to next-best performing XGBoost, single-layer neural network, and XGBoost/single-layer neural network stacked ensemble machine learning models as well as two naïve classification rules.</title><p>Down-sampled gene annotations of high-quality genomes used in held-out test sets are from NCBI RefSeq and GTDB. Each boxplot displays the distribution of model performance metrics for predictions on randomly sampled versions of the gene annotation test sets in downsampling increments of 10% (90% down to 10%, from right to left). The binary classifier performances are based on the classification of the presence or absence of KEGG modules in the complete versions of the gene annotations that were down-sampled for model testing.</p><p><supplementary-material id="fig2sdata1"><label>Figure 2—source data 1.</label><caption><title>Column ‘Module name’ contains the shorthand identifiers from the KEGG database that correspond to KEGG modules; ‘Percent of protein families retained’ contains the percent of protein family presence/absence annotations retained during protein family downsampling; ‘Model type’ corresponds to the machine learning architecture or classification rule; ‘Metric’ lists the performance metric; ‘Score’ contains the value for the performance metric.</title></caption><media mimetype="application" mime-subtype="xlsx" xlink:href="elife-85749-fig2-data1-v1.xlsx"/></supplementary-material></p></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-85749-fig2-v1.tif"/></fig><sec id="s2-1"><title>Benchmarking MetaPathPredict on down-sampled NCBI RefSeq and GTDB data</title><p>We compared the performance of MetaPathPredict’s deep learning models to two classes of competitor classifiers: naive rule-based classifiers and various other machine learning model architectures. The evaluation was performed on test datasets comprised of isolate and metagenome-assembled genomes from GTDB and NCBI (30,596 total genomes; see Methods). When evaluating with the same sets of randomly down-sampled gene annotations, we found that each competing method showed poorer performance than MetaPathPredict (<xref ref-type="fig" rid="fig2">Figure 2</xref>). We assessed two naïve classification methods. First, we devised a classification rule based on the completeness of a KEGG module relative to the number of genes retained after downsampling: if, in a down-sampled genome, the number of genes involved in a KEGG module are present in at least the same proportion of all genes retained, the KEGG module is classified as ‘present,’ otherwise it is labeled ‘absent’. For example, if 50% of gene annotations were removed from a genome during downsampling, then any KEGG module for which 50% of its associated genes are retained would be reported as ‘present’. The results of this naive approach (<xref ref-type="fig" rid="fig2">Figure 2</xref>) show that the relative completeness of a KEGG module alone is not a robust classification strategy. The second classification rule that we tested was: for all gene annotation sets in the dataset, if any genes were present in an annotation set that were unique to a KEGG module (relative to other modules) then the module was classified as ‘present’, otherwise it was labelled ‘absent’. The results of this naive approach (<xref ref-type="fig" rid="fig2">Figure 2</xref>) suggest that the presence of rare protein annotations or genes unique to a certain KEGG module is not always a strong indicator of the presence of a module in a genome. Ultimately, the performance of these naive classifiers indicate that MetaPathPredict’s models have the advantage of incorporating information from genes outside of KEGG modules. We additionally compared the performance of various machine learning model architectures. Of these, the XGBoost, neural network (single hidden layer) and XGBoost/neural network (single hidden layer) stacked ensemble architectures were the next-best performing models and are included in <xref ref-type="fig" rid="fig2">Figure 2</xref>.</p><p>MetaPathPredict’s deep learning strategy produced the best observed performance. Mean F1 score (a summary metric of the predictive performance) of the models was 0.96 when predicting on test datasets in which 30–90% of gene annotations had been retained. MetaPathPredict rarely made false positive predictions based on data from highly incomplete gene annotation sets; the average precision of the models was consistently above 0.94 for all held-out test sets. MetaPathPredict also did not misclassify most negative class observations. The recall of MetaPathPredict’s models was greater than 0.96 on average for test datasets containing at least 30% of the complete gene annotation data. The mean recall decreased to 0.89 and the mean precision decreased to 0.86 on genomes containing only 20% or less of the complete gene annotation data. The models’ ability to achieve notably high recall even with significantly reduced sampling rates implies that it compensates for limited sequence availability by becoming more assertive in labeling a module as ‘present’ at the cost of decreased precision.</p></sec><sec id="s2-2"><title>Benchmarking MetaPathPredict against Genomes from arth’s Microbiomes repository MAGs</title><p>MetaPathPredict was further tested on gene annotations from a set of 40 high-quality metagenome-assembled genomes from the Genomes from Earth’s Microbiomes (GEM; <xref ref-type="bibr" rid="bib19">Nayfach et al., 2021</xref>) genome repository. This repository contains a set of MAGs recovered from a diverse array of environments that make it ideal for benchmarking MetaPathPredict’s performance (<xref ref-type="fig" rid="fig3">Figure 3</xref>). The MAGs selected from the repository had an estimated completeness of 100 and estimated contamination of 0, MIMAG quality score of ‘High Quality’. The genomes belonged to 7 taxonomic phyla and were recovered from 9 different environments, primarily from human-associated and built environment metagenomes (see <xref ref-type="fig" rid="app1fig1">Appendix 1—figure 1</xref> for GEM genome taxonomic distributions and environmental sources). We created a set of 9 GEM datasets by randomly downsampling the data to retain 10% to 90% of gene annotations (in 10% increments) as in the previous section. MetaPathPredict classified the presence/absence of KEGG modules in each MAG. Overall, results were comparable to MetaPathPredict’s performance on the GTDB/NCBI benchmark. The models excelled at predicting the presence or absence of KEGG modules in genomes when at least 40% of gene annotations were randomly retained. Predictions were less reliable though still accurate when 30% or less gene annotation data was retained.</p><fig id="fig3" position="float"><label>Figure 3.</label><caption><title>Boxplots of performance metrics of MetaPathPredict models on high-quality bacterial GEM MAGs (n=40).</title><p>Model performance metrics are for predictions on down-sampled versions of GEM genome gene annotations in decreasing increments of 10% (retaining 10–90% of the annotations in each test set). MetaPathPredict’s deep learning models were benchmarked against XGBoost and neural network model architectures.</p><p><supplementary-material id="fig3sdata1"><label>Figure 3—source data 1.</label><caption><title>Column ‘Module name’ contains the shorthand identifiers from the KEGG database that correspond to KEGG modules; ‘Percent of protein families retained’ contains the percent of protein family presence/absence annotations retained during protein family downsampling; ‘Model type’ corresponds to the machine learning architecture; ‘Metric’ lists the performance metric; ‘Score’ contains the value for the performance metric.</title></caption><media mimetype="application" mime-subtype="xlsx" xlink:href="elife-85749-fig3-data1-v1.xlsx"/></supplementary-material></p></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-85749-fig3-v1.tif"/></fig></sec><sec id="s2-3"><title>Benchmarking MetaPathPredict against existing tools on a dataset with down-sampled reads</title><p>In addition to model assessments made through down-sampling protein annotations, we evaluated a second set of held-out test set genomes from the GTDB/NCBI dataset (n=50). In this analysis, the sequence reads for each genome were randomly down-sampled to simulate genomes incompletely recovered from an environmental sample. This analysis replicates situations with lower sequencing coverage, which can cause proteins to be unobserved due to incomplete or error-filled assemblies. As an example, using only 3% of reads (equivalent to an average of 1.5 x coverage of the genomes), roughly 86% of the genomes’ proteins were assembled; meanwhile a reduction to 1% of reads caused assembly to recover ~40% of proteins. MetaPathPredict’s performance on this test set resembled protein annotation random sampling results (<xref ref-type="fig" rid="fig4">Figure 4a</xref>, <xref ref-type="fig" rid="fig4">Figure 4b</xref>), although with greater loss in precision for down-sampling &lt;3%.</p><fig id="fig4" position="float"><label>Figure 4.</label><caption><title>Performance metrics boxplots of two deep learning classification models.</title><p>Down-sampled sequence reads of high-quality genomes used as a second held-out test set are from NCBI RefSeq and GTDB databases. (<bold>Panel a</bold>) Boxplots display the distribution of model performance metrics for predictions of KEGG module presence/absence on simulated incomplete genomes down-sampled at the sequence read level by MetaPathPredict models, various next-best performing machine learning architectures, and METABOLIC. Downsampling increments were chosen based on average estimated completeness of the test set genomes at each increment to reflect a range of estimated completeness thresholds. (<bold>Panel b</bold>) Average estimated genome completeness distributions of test set genomes that were down-sampled at the sequence read level using SeqTK and then assembled with SPAdes.</p><p><supplementary-material id="fig4sdata1"><label>Figure 4—source data 1.</label><caption><title>Column ‘Module name’ contains the shorthand identifiers from the KEGG database that correspond to KEGG modules; ‘Percent of sequencing reads retained’ contains the percent of sequencing reads retained during sequencing read downsampling; ‘Model type’ corresponds to the machine learning architecture or annotation tool; ‘Metric’ lists the performance metric; ‘core’ contains the value for the performance metric.</title></caption><media mimetype="application" mime-subtype="xlsx" xlink:href="elife-85749-fig4-data1-v1.xlsx"/></supplementary-material></p></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-85749-fig4-v1.tif"/></fig><p>MetaPathPredict had an average F1 score for all 190 modules of 0.96 on the second held-out test set observations that had an average estimated genome completeness of at least 30%. The similarity of these results to the gene annotation downsampling approach validates the latter approach that was used more broadly to assess MetaPathPredict.</p><p>In addition to evaluating MetaPathPredict against our custom competitor models, we tested the software METABOLIC, which is a command line tool that performs gene annotations and estimates the completeness of individual KEGG modules in genomes and prokaryotic microbial communities (<xref ref-type="fig" rid="fig4">Figure 4a</xref>). METABOLIC showed much poorer recall at all levels of read sampling.</p><p>MetaPathPredict was also compared to another gap filling tool, Gapseq (<xref ref-type="fig" rid="fig5">Figure 5a</xref>). Gapseq makes predictions of the presence or absence of KEGG pathways, and thus indirectly makes predictions of all modules and reactions they contain (instead of predictions for individual modules or reactions). We facilitated the direct comparison of MetaPathPredict to Gapseq by classifying a single KEGG pathway to be present if all modules it contained were predicted ‘present’ by MetaPathPredict. MetaPathPredict outperformed predictions made by Gapseq, particularly on genomes with low read sampling prior to assembly.</p><fig id="fig5" position="float"><label>Figure 5.</label><caption><title>Performance metrics boxplots of MetaPathPredict and Gapseq predictions for KEGG pathway map00290 (Valine, leucine, and isoleucine biosynthesis) which contains KEGG modules M00019, M00432, M00535, and M00570.</title><p>For MetaPathPredict predictions, the whole KEGG pathway was considered present if the aforementioned KEGG modules were all present. Down-sampled sequence reads of high-quality genomes used as a second held-out test set are from NCBI RefSeq and GTDB databases. Line segments display model performance metrics for MetaPathPredict and Gapseq predictions of KEGG pathway map00290 presence/absence on simulated incomplete genomes down-sampled at the sequence read level. Downsampling increments were chosen based on average estimated completeness of the test set genomes at each increment to reflect a range of estimated completeness thresholds.</p><p><supplementary-material id="fig5sdata1"><label>Figure 5—source data 1.</label><caption><title>‘Percent of sequencing reads retained’ contains the percent of sequencing reads retained during sequencing read downsampling; ‘Model type’ corresponds to the machine learning architecture or annotation tool; ‘Metric’ lists the performance metric; ‘Score’ contains the value for the performance metric.</title></caption><media mimetype="application" mime-subtype="xlsx" xlink:href="elife-85749-fig5-data1-v1.xlsx"/></supplementary-material></p></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-85749-fig5-v1.tif"/></fig></sec><sec id="s2-4"><title>Analysis of model feature importance using SHAP</title><p>Though the neural networks of MetaPathPredict produce accurate predictions of module presence/absence, it is not immediately clear what input features contribute to its decision-making process. To gain some insight into this, we calculated the importance of the various features of MetaPathPredict’s models using the SHAP method (<xref ref-type="bibr" rid="bib17">Lundberg and Lee, 2017</xref>), a mathematical method to explain the predictions of machine learning models. Features with large absolute SHAP values play an important role in calculating a model’s predictions. SHAP values in the first model (trained to classify modules present in ≥10% and≤90% of training genomes) indicated that 30 of the top 100 most important features (genes) influencing predictions were direct components of KEGG modules predicted by this model (<xref ref-type="supplementary-material" rid="supp1">Supplementary file 1b</xref>). In the second model (classifies modules present in &lt;10% or&gt;90% of training genomes), 37 of the 100 most influential features were part of KEGG modules this model was trained to predict.</p><p>The two models share 14 most important features out of the top 50 that are not part of KEGG modules. We examined these top features and found that there were a number of proteins annotated as sensors or transcriptional regulators (<xref ref-type="supplementary-material" rid="supp1">Supplementary file 1b</xref>). Also, we noted a number of transporters annotated as top features in both models and, interestingly, factors related to pathogenesis like toxins and mobile elements. Given the multi-label architecture of our models, it is difficult to draw direct conclusions from SHAP analysis. However, it is clear that MetaPathPredict’s predictions are in part influenced by select genes present in KEGG modules, and also to a larger extent by genes not directly participating in KEGG module reactions.</p></sec><sec id="s2-5"><title>Conclusion</title><p>MetaPathPredict is an open-source tool that can be used to characterize the functional potential of one or more sample genomes by detecting complete KEGG modules and predicting the presence or absence of those that are incomplete or missing. The tool accepts sets of gene annotations of individual genomes in KO gene identifier format as input. This type of annotation format can be acquired by annotating a genome of interest using KEGG-based annotation tools such as KofamScan (<xref ref-type="bibr" rid="bib2">Aramaki et al., 2020</xref>), DRAM, blastKOALA (<xref ref-type="bibr" rid="bib14">Kanehisa et al., 2016</xref>), or ghostKOALA (<xref ref-type="bibr" rid="bib14">Kanehisa et al., 2016</xref>). MetaPathPredict also provides gene gap-filling options by listing putative KO gene annotations that could fill in missing gaps in predicted modules.</p><p>MetaPathPredict further validates the use of gene family presence or absence within a genome as a feature for bacterial metabolic function predictions. The performance metrics of MetaPathPredict on NCBI/GTDB and GEM test datasets validated the use of deep learning models to predict the presence/absence of KEGG metabolic modules with high fidelity on sparse to near-complete bacterial genomes. MetaPathPredict’s multi-label classification models consistently made predictions with high precision and recall on simulated and real genomes using gene annotation and sequence read downsampling methods. The predictive power of the deep learning models was most limited when predicting on 10%–30% of protein annotations, and when the mean estimated completeness of reconstructed genomes from down-sampled reads was below 30%. We suggest that optimal performance with MetaPathPredict can be achieved when at least 40% of a genome has been recovered in an input bacterial gene annotation dataset.</p><p>Based on our performance tests of MetaPathPredict, the recall of its models was robust (mean &gt;0.9) even when protein sets were down-sampled to 10%. However, MetaPathPredict also surprisingly shows a decrease in precision (i.e. an increase in false calls of module presence). This, combined with surprisingly high recall rates at such low sampling rates, suggests that the model directly compensates for low general sequence availability by increasing aggressiveness in calling a module ‘present’. This over-exuberant positive class prediction problem arose in our analyses only when &lt;30% of gene annotation data was retained. Though such low sampling rates are not expected to be typical, it suggests an opportunity for method improvement.</p><p>Due to the multi-label architecture of MetaPathPredict’s models, it is difficult to draw connections between the important features identified for the models and individual KEGG modules. However, the presence of sensing proteins (e.g. iron sensing and chemotaxis), pathogen proteins (e.g. toxins and lysins), and transporters in these lists may indicate the contribution of lifestyle and environmental factors in predicting presence or absence of individual modules. Additionally, transcriptional regulators may be important due to their outsized influence on the expression of many genes (and thus modules) in each organism. Perhaps the most intriguing finding was that components of mobile elements (transposases) were found to be important features of both models. This could indicate that insertional elements are being used by the model to indicate, for example, evolutionary lineage, which could be used to inform predictions of KEGG module composition.</p><p>MetaPathPredict facilitates more complete and accurate reconstruction of the metabolic potential encoded within bacterial genomes from a diverse array of environments and will enhance the ability to infer what metabolisms they are capable of, and/or how they may respond to perturbations. MetaPathPredict connects the field of machine learning with the growing community of environmental microbiologists using genomic sequencing techniques and will help transform and improve the way they work with environmental genomic datasets.</p></sec></sec><sec id="s3" sec-type="materials|methods"><title>Materials and methods</title><sec id="s3-1"><title>Filtering genome database metadata, downloading high-quality genomes, and gene annotations</title><p>The NCBI RefSeq (Release 205) database metadata file was downloaded and filtered to retain only the information for all bacterial genomes classified as ‘Complete genome’. These are defined on the NCBI assembly help webpage: ‘all chromosomes are gapless and have no runs of 10 or more ambiguous bases (Ns), there are no unplaced or unlocalized scaffolds, and all the expected chromosomes are present (i.e. the assembly is not noted as having partial genome representation). Plasmids and organelles may or may not be included in the assembly but if present, then the sequences are gapless’. This resulted in 17,491 complete NCBI genomes.</p><p>The GTDB bacterial metadata file for release 95 was downloaded and filtered to keep the information for all genomes with an estimated completeness greater than 99, an estimated contamination of 0, and a MIMAG (<xref ref-type="bibr" rid="bib5">Bowers et al., 2017</xref>) quality score of “High Quality”. A total of 30,760 non-redundant bacterial genomes from the two database metadata files were downloaded using the ncbi-genome-download command line tool (<xref ref-type="bibr" rid="bib4">Blin, 2023</xref>). The RefSeq genomes (17,491 total) were downloaded from the RefSeq FTP server, and the GTDB genomes (13,105 total) were downloaded from the GenBank FTP server (<xref ref-type="fig" rid="app1fig2">Appendix 1—figure 2</xref>). Genes were called using Prodigal (<xref ref-type="bibr" rid="bib11">Hyatt et al., 2010</xref>), and the KofamScan command line tool (<xref ref-type="bibr" rid="bib2">Aramaki et al., 2020</xref>) was used to generate gene annotations (in KO gene identifier format) for all of the genomes using the KOfam set of HMMs available for download from the KEGG database (<xref ref-type="bibr" rid="bib13">Kanehisa, 2002</xref>). KofamScan-derived annotations had to surpass their HMM’s adaptive scoring threshold to be included in the training dataset. This approach provides resilience to using specific e-value cutoffs by preventing inflation of our training and assessment datasets with less-confident gene annotations.</p></sec><sec id="s3-2"><title>Formatting gene annotation data, fitting KEGG module classification models</title><p>The full dataset of simulated incomplete genomes (n=305,960) was split so that 75% of genomes were used for training and the remaining 25% as a test dataset. The training dataset was further split into 80% training/20% validation test sets. Each observation in the train/test/validation datasets contained a vector of length 8,853 that consisted of KO gene identifier (protein family) presence/absence indicated by ones and zeroes, respectively.</p><p>Training and test sets contained both complete and incomplete gene annotations of bacterial genomes from a diverse array of phyla (<xref ref-type="fig" rid="app1fig2">Appendix 1—figure 2</xref>). The incomplete annotations used in training and testing of MetaPathPredict’s models were constructed from complete genome annotation observations that were randomly down-sampled to retain 10–90% of the total gene content while the presence/absence class labels were kept unchanged for all down-sampled data. All complete and down-sampled versions of genomes were retained. The training datasets had a size of 305,960 observations, and the test datasets each contained 76,490 observations. The percent of observations with a positive class (a complete KEGG module ‘present’ in the gene annotations) in the training and test datasets varied, with a mean of 26.2% (<xref ref-type="fig" rid="app1fig3">Appendix 1—figure 3</xref>).</p><p>The gene copy number data of the downloaded genomes was formatted in a matrix containing KO gene identifier presence/absence (1 or 0, respectively) in columns and genomes in rows. The label of each model was the presence/absence (1 or 0) of a KEGG module, as was determined using the KEGG modules downloaded from the KEGG database and the Anvi’o Python module (<xref ref-type="bibr" rid="bib10">Eren et al., 2015</xref>). The ‘unroll_module_definition’ function from the Anvi’o module was utilized with downloaded KEGG module data to create a list of all possible KEGG Ortholog combinations to complete each module. For the module to be categorized as present, at least one possible combination of every step of the module had to be present in a genome, otherwise it was designated as absent. Two models were constructed for 190 KEGG modules for which at least 306 (0.1%) of the complete genomes (n=30,596) contained the module genes, due to an improvement in performance when two models were trained (one model for the more balanced labels, one for highly imbalanced labels) instead of one. The models were trained using the gene annotation data of the genomes consolidated from the NCBI and GTDB databases. The first model was trained to classify modules within ≥10% and≤90% of training genomes, while the second model classified modules within &lt;10% or&gt;90% of training genomes. The constructed models classify the presence or absence of complete KEGG modules based on the gene annotations of a genome.</p><p>A deep learning classification approach was chosen to model the relationship between whole genome KO gene identifier annotation data and the presence of metabolic modules. The same training data was used to train both of the models. MetaPathPredict is built on the Keras deep learning library (<xref ref-type="bibr" rid="bib26">Sattler et al., 2015</xref>). L2-regularization was utilized to adjust hidden unit weights during training, with a learning rate of 0.001. Features used in each training dataset for classification were the presence or absence of protein families that were assigned KO gene identifiers. A deep learning architecture consisting of one input layer, five hidden layers, and one output layer were used as the machine learning architectures in MetaPathPredict’s models. The input layer consisted of the presence/absence vector of KO gene identifiers (n=8,853), and the hidden layers each contained 2048 hidden units and were fully connected. The output layer of the first and second models contained 94 and 96 nodes for a total of 190 module presence/absence predictions when prediction outputs from both are combined.</p><p>Stratified sampling is a sampling method that ensures that all groups within the training and test data are represented in the same proportion as they are in the population as a whole. A multi-label stratified sampling method (<xref ref-type="bibr" rid="bib27">Sechidis et al., 2011</xref>) was used to generate 75% train/25% test dataset splits that each contained data observations with preserved proportions of positive (‘KEGG module present’) and negative (‘KEGG module absent’) classes that were present in the genome dataset (see boxplot of the distribution of module presence/absence classes in <xref ref-type="fig" rid="app1fig2">Appendix 1—figure 2</xref>, and an example of a held-out test dataset in <xref ref-type="fig" rid="app1fig4">Appendix 1—figure 4</xref>). The training dataset was further separated into 80% train/20% validation dataset splits to fit the deep learning models.</p><p>The binary cross entropy loss function was used in tandem with the Adaptive Moment Estimation (Adam) optimizer. The input and hidden layers utilized the rectified linear unit (ReLu) activation function; the output layer contained a sigmoid activation function. Dropout (<xref ref-type="bibr" rid="bib30">Srivastava, 2014</xref>) was applied to 10% of edges at all layers except the final layer to avoid overfitting the training data. The input and hidden layers utilized the ‘he_uniform’ layer weight initializer, and each of these layers contained 2,048 hidden units.</p><p>We assessed and benchmarked MetaPathPredict’s models against two naive classification methods. First, we devised a simple model that predicted the presence of a KEGG module if, after downsampling test sets of gene annotations, the proportion of module genes present in the dataset was greater than or equal to the percentage of annotations retained in the dataset. If the proportion of genes involved in a KEGG module were present in a dataset observation at least equivalently to the proportion of gene annotations retained after downsampling, the module was classified as ‘present’, otherwise it was classified as ‘absent’. The second naïve classification rule was: for all gene annotation sets in the dataset, if any genes were present in an annotation set that were unique to a KEGG module (relative to all other KEGG modules) then the module was classified as ‘present’, otherwise it was labeled ‘absent’. We additionally benchmarked MetaPathPredict’s deep learning models against several other machine learning model types including single-layer neural network, XGBoost, and neural network/XGBoost stacked ensemble models, each trained on the same input data.</p></sec><sec id="s3-3"><title>Evaluating models on test data, including test data randomly down-sampled to simulate varying degrees of genome incompleteness</title><p>Each of MetaPathPredict’s models was validated on a held-out test set consisting of a combination of 76,490 complete and simulated incomplete genomes, and the performance metrics were extracted using the Scikit-learn (<xref ref-type="bibr" rid="bib23">Pedregosa, 2011</xref>) Python module. The genome annotations in each test set were created by randomly downsampling complete genomes to simulate recovered gene annotations from incomplete genomes. 10% to 90% of genes from each annotation set were randomly retained (in increments of 10%) and used as input for MetaPathPredict predictions of KEGG module presence/absence. The performance metrics used in evaluating the models were precision, recall, F1 score, positive predictive value, and negative predictive value (<xref ref-type="table" rid="table1">Table 1</xref>).</p><table-wrap id="table1" position="float"><label>Table 1.</label><caption><title>Definitions of machine learning model performance metrics used to assess MetaPathPredict models.</title></caption><table frame="hsides" rules="groups"><thead><tr><th align="left" valign="bottom">Metric</th><th align="left" valign="bottom">Definition</th></tr></thead><tbody><tr><td align="left" valign="bottom">Precision</td><td align="left" valign="bottom">true positive/(true positive +false positive)</td></tr><tr><td align="left" valign="bottom">Recall</td><td align="left" valign="bottom">true positive/(true positive +false negative)</td></tr><tr><td align="left" valign="bottom">Specificity<xref ref-type="table-fn" rid="table1fn1">*</xref></td><td align="left" valign="bottom">true negative/(true negative +false positive)</td></tr><tr><td align="left" valign="bottom">F1 score</td><td align="left" valign="bottom">2 × ((precision ×recall)/(precision +recall))</td></tr><tr><td align="left" valign="bottom">Positive predictive value</td><td align="left" valign="bottom">recall ×prevalence / (recall ×prevalence) + (1 – specificity) × (1 – prevalence)</td></tr><tr><td align="left" valign="bottom">Negative predictive value</td><td align="left" valign="bottom">specificity × (1 – prevalence) / ((1 – recall)×prevalence) + (specificity × (1 – prevalence))</td></tr><tr><td align="left" valign="bottom">Prevalence<xref ref-type="table-fn" rid="table1fn1">*</xref></td><td align="left" valign="bottom">(true positive +false negative) / (true positive +false positive +true negative +false negative)</td></tr><tr><td align="left" valign="bottom" colspan="2"/></tr></tbody></table><table-wrap-foot><fn id="table1fn1"><label>*</label><p>Specificity and prevalence are defined due to their use in the definitions of negative and positive predictive value.</p></fn></table-wrap-foot></table-wrap></sec><sec id="s3-4"><title>Testing models with a set of high-quality metagenome-assembled genomes from the Genomes from Earth’s Microbiomes online repository</title><p>MetaPathPredict was further validated on another test set of genome annotations extracted from the GEM repository of MAGs. The GEM metadata file was downloaded from the repository and filtered to retain a random sample of 40 MAGs with a CheckM2 (<xref ref-type="bibr" rid="bib9">Chklovski et al., 2023</xref>) estimated completeness of 100, an estimated contamination of 0, and a MIMAG quality score of ‘High Quality’. The method for this assessment was the same as was described above for testing MetaPathPredict model performances on the held-out test data.</p></sec><sec id="s3-5"><title>Evaluating models on test data down-sampled at the read level</title><p>A second held-out set of complete genomes (n=50), independent of the training dataset, was downloaded from NCBI/GTDB databases using the <xref ref-type="bibr" rid="bib29">SRA, 1988</xref> and SRA explorer (<xref ref-type="bibr" rid="bib24">Phil Ewels, 2024</xref>). The raw sequencing reads were filtered using fastp (<xref ref-type="bibr" rid="bib8">Chen et al., 2018</xref>), and the quality-filtered reads were randomly down-sampled using seqtk (<xref ref-type="bibr" rid="bib16">Li, 2023</xref>). Down-sampled reads were assembled into genomes using the SPAdes assembler (<xref ref-type="bibr" rid="bib3">Bankevich et al., 2012</xref>), genes were called with Prodigal and then annotated using KofamScan. MetaPathPredict’s deep learning models were then used to predict the presence or absence of all 190 KEGG modules in each genome and predictions were then cross-referenced with their known presence/absence based on the unmodified test dataset. In addition to simple approaches described above, the METABOLIC (<xref ref-type="bibr" rid="bib33">Zhou et al., 2022</xref>) and Gapseq (<xref ref-type="bibr" rid="bib34">Zimmermann et al., 2021</xref>) tools were evaluated on the same benchmark dataset. Both tools were used with default settings. Gapseq makes predictions of the presence or absence of entire KEGG pathways, and therefore it was benchmarked against MetaPathPredict by evaluating predictions for the presence or absence of the KEGG pathway map00290 (Valine, leucine, and isoleucine biosynthesis). This pathway consists of KEGG modules M00019, M00432, M00535, and M00570. In order to facilitate a direct comparison to Gapseq’s predictions, the whole KEGG pathway was considered present if the aforementioned KEGG modules were all predicted as present by MetaPathPredict, otherwise it was classified as absent.</p></sec><sec id="s3-6"><title>Gapfilling for incomplete modules predicted as present</title><p>MetaPathPredict provides enzyme gap-filling options for KEGG modules predicted as present by suggesting putative KO gene annotations missing from an input genome’s gene annotations that could fill in missing gaps in predicted modules.</p></sec></sec></body><back><sec sec-type="additional-information" id="s4"><title>Additional information</title><fn-group content-type="competing-interest"><title>Competing interests</title><fn fn-type="COI-statement" id="conf1"><p>No competing interests declared</p></fn><fn fn-type="COI-statement" id="conf2"><p>affiliated with Luit Consulting. The author has no financial interests to declare</p></fn></fn-group><fn-group content-type="author-contribution"><title>Author contributions</title><fn fn-type="con" id="con1"><p>Conceptualization, Data curation, Software, Formal analysis, Validation, Investigation, Visualization, Methodology, Writing – original draft</p></fn><fn fn-type="con" id="con2"><p>Conceptualization, Supervision, Methodology, Writing – review and editing</p></fn><fn fn-type="con" id="con3"><p>Conceptualization, Methodology, Supervision, Writing – review and editing</p></fn><fn fn-type="con" id="con4"><p>Conceptualization, Supervision, Writing – review and editing</p></fn><fn fn-type="con" id="con5"><p>Conceptualization, Methodology, Supervision, Writing – review and editing</p></fn><fn fn-type="con" id="con6"><p>Conceptualization, Methodology, Supervision, Writing – review and editing</p></fn><fn fn-type="con" id="con7"><p>Conceptualization, Methodology, Supervision, Writing – review and editing</p></fn></fn-group></sec><sec sec-type="supplementary-material" id="s5"><title>Additional files</title><supplementary-material id="supp1"><label>Supplementary file 1.</label><caption><title>Metadata for KEGG modules available within MetaPathPredict, mean SHAP values for both of MetaPathPredict’s models, and training genome metadata.</title><p>(<bold>a</bold>) MetaPathPredict KEGG Module information. The column “Module name” contains the name of all KEGG Modules that MetaPathPredict is trained to predict; “Module number” contains the module identifier; “Module class” contains module metadata including which group of KEGG metabolism the module belongs to. (<bold>b</bold>) SHAP results for the features in MetaPathPredict’s models. The column “K number (Model 1)” contains the KEGG Ortholog gene identifier for each feature in Model 1. “Mean SHAP value (Model 1)” corresponds to the mean SHAP value for features in Model 1; highest mean SHAP values are listed at the top of the column in descending order. “KEGG Module (Model 1)” shows which KEGG module(s), if any, the features of Model 1 are present in; “Gene definition (Model 1)” contains gene annotation information for each feature in Model 1. The same column definitions are repeated for Model 2 and correspond to the same information as for Model 1. (<bold>c</bold>) Training genome metadata. The column “Genome ID” lists the names of genomes downloaded from the NCBI and GTDB databases; “Database” lists which database each genome was downloaded from (NCBI or GTDB); columns “Phylum”, “Class”, “Order”, “Family”, “Genus”, and “Species” contain the associated taxonomic information for each genome.</p></caption><media mimetype="application" mime-subtype="xls" xlink:href="elife-85749-supp1-v1.xls"/></supplementary-material><supplementary-material id="mdar"><label>MDAR checklist</label><media xlink:href="elife-85749-mdarchecklist1-v1.pdf" mimetype="application" mime-subtype="pdf"/></supplementary-material></sec><sec sec-type="data-availability" id="s6"><title>Data availability</title><p>Genomic data used for creation of MetaPathPredict models is available from the NCBI Bacterial RefSeq Genomes database (https://ftp.ncbi.nlm.nih.gov/genomes/refseq/bacteria/, version 209) and the Genome Taxonomy Database (<ext-link ext-link-type="uri" xlink:href="https://data.gtdb.ecogenomic.org/releases/latest/">https://data.gtdb.ecogenomic.org/releases/latest/</ext-link>, version r95). The GEM genomes used for model benchmarking are available at the GEM repository (<ext-link ext-link-type="uri" xlink:href="https://portal.nersc.gov/GEM/genomes/">https://portal.nersc.gov/GEM/genomes/</ext-link>). The sequencing reads used for model benchmarking are available at the NCBI Sequence Read Archive website (<ext-link ext-link-type="uri" xlink:href="https://www.ncbi.nlm.nih.gov/sra">https://www.ncbi.nlm.nih.gov/sra</ext-link>). The scripts used for all data processing, model training, model benchmarking, and figure creation used in this study are available in the following GitHub repository: <ext-link ext-link-type="uri" xlink:href="https://github.com/Microbiaki-Lab/MetaPathPredict_workflow">https://github.com/Microbiaki-Lab/MetaPathPredict_workflow</ext-link> (copy archived at <xref ref-type="bibr" rid="bib18">McGrath, 2024</xref>). The MetaPathPredict Python module is available from the following GitHub repository: <ext-link ext-link-type="uri" xlink:href="https://github.com/d-mcgrath/MetaPathPredict">https://github.com/d-mcgrath/MetaPathPredict</ext-link> and XetHub repository: <ext-link ext-link-type="uri" xlink:href="https://xethub.com/dgellermcgrath/MetaPathPredict">https://xethub.com/dgellermcgrath/MetaPathPredict</ext-link>.</p></sec><ack id="ack"><title>Acknowledgements</title><p>Geller-McGrath acknowledges funding from the Department of Energy (DOE) SCGSR Fellowship for the 2020 Solicitation 2 in Computational Biology and Bioinformatics. We would like to thank A Solow (WHOI) for helpful initial discussion about statistical approaches. JWR and TJW were supported by NIH NIGMS R01GM132600. JEM, JWR, and TJW were supported by the DOE Office of Biological and Environmental Research (BER) through the “Machine-Learning Approaches for Integrating Multi-Omics Data to Expand Microbiome Annotation” project. PNNL is operated for the DOE by Battelle Memorial Institute under Contract DE-AC05-76RL01830.</p></ack><ref-list><title>References</title><ref id="bib1"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Alexander</surname><given-names>H</given-names></name><name><surname>Hu</surname><given-names>SK</given-names></name><name><surname>Krinos</surname><given-names>AI</given-names></name><name><surname>Pachiadaki</surname><given-names>M</given-names></name><name><surname>Tully</surname><given-names>BJ</given-names></name><name><surname>Neely</surname><given-names>CJ</given-names></name><name><surname>Reiter</surname><given-names>T</given-names></name></person-group><year iso-8601-date="2021">2021</year><article-title>Eukaryotic genomes from a global metagenomic dataset illuminate trophic modes and biogeography of ocean plankton</article-title><source>Microbiology</source><volume>01</volume><elocation-id>3713</elocation-id><pub-id pub-id-type="doi">10.1101/2021.07.25.453713</pub-id><pub-id pub-id-type="pmid">33832427</pub-id></element-citation></ref><ref id="bib2"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Aramaki</surname><given-names>T</given-names></name><name><surname>Blanc-Mathieu</surname><given-names>R</given-names></name><name><surname>Endo</surname><given-names>H</given-names></name><name><surname>Ohkubo</surname><given-names>K</given-names></name><name><surname>Kanehisa</surname><given-names>M</given-names></name><name><surname>Goto</surname><given-names>S</given-names></name><name><surname>Ogata</surname><given-names>H</given-names></name></person-group><year iso-8601-date="2020">2020</year><article-title>Kofamkoala: kegg ortholog assignment based on profile hmm and adaptive score threshold</article-title><source>Bioinformatics</source><volume>36</volume><fpage>2251</fpage><lpage>2252</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/btz859</pub-id><pub-id pub-id-type="pmid">31742321</pub-id></element-citation></ref><ref id="bib3"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bankevich</surname><given-names>A</given-names></name><name><surname>Nurk</surname><given-names>S</given-names></name><name><surname>Antipov</surname><given-names>D</given-names></name><name><surname>Gurevich</surname><given-names>AA</given-names></name><name><surname>Dvorkin</surname><given-names>M</given-names></name><name><surname>Kulikov</surname><given-names>AS</given-names></name><name><surname>Lesin</surname><given-names>VM</given-names></name><name><surname>Nikolenko</surname><given-names>SI</given-names></name><name><surname>Pham</surname><given-names>S</given-names></name><name><surname>Prjibelski</surname><given-names>AD</given-names></name><name><surname>Pyshkin</surname><given-names>AV</given-names></name><name><surname>Sirotkin</surname><given-names>AV</given-names></name><name><surname>Vyahhi</surname><given-names>N</given-names></name><name><surname>Tesler</surname><given-names>G</given-names></name><name><surname>Alekseyev</surname><given-names>MA</given-names></name><name><surname>Pevzner</surname><given-names>PA</given-names></name></person-group><year iso-8601-date="2012">2012</year><article-title>SPAdes: a new genome assembly algorithm and its applications to single-cell sequencing</article-title><source>Journal of Computational Biology</source><volume>19</volume><fpage>455</fpage><lpage>477</lpage><pub-id pub-id-type="doi">10.1089/cmb.2012.0021</pub-id><pub-id pub-id-type="pmid">22506599</pub-id></element-citation></ref><ref id="bib4"><element-citation publication-type="software"><person-group person-group-type="author"><name><surname>Blin</surname><given-names>K</given-names></name></person-group><year iso-8601-date="2023">2023</year><data-title>Kblin/Ncbi-genome-download</data-title><version designator="b193745">b193745</version><source>Github</source><ext-link ext-link-type="uri" xlink:href="https://github.com/kblin/ncbi-genome-download">https://github.com/kblin/ncbi-genome-download</ext-link></element-citation></ref><ref id="bib5"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bowers</surname><given-names>RM</given-names></name><name><surname>Kyrpides</surname><given-names>NC</given-names></name><name><surname>Stepanauskas</surname><given-names>R</given-names></name><name><surname>Harmon-Smith</surname><given-names>M</given-names></name><name><surname>Doud</surname><given-names>D</given-names></name><name><surname>Reddy</surname><given-names>TBK</given-names></name><name><surname>Schulz</surname><given-names>F</given-names></name><name><surname>Jarett</surname><given-names>J</given-names></name><name><surname>Rivers</surname><given-names>AR</given-names></name><name><surname>Eloe-Fadrosh</surname><given-names>EA</given-names></name><name><surname>Tringe</surname><given-names>SG</given-names></name><name><surname>Ivanova</surname><given-names>NN</given-names></name><name><surname>Copeland</surname><given-names>A</given-names></name><name><surname>Clum</surname><given-names>A</given-names></name><name><surname>Becraft</surname><given-names>ED</given-names></name><name><surname>Malmstrom</surname><given-names>RR</given-names></name><name><surname>Birren</surname><given-names>B</given-names></name><name><surname>Podar</surname><given-names>M</given-names></name><name><surname>Bork</surname><given-names>P</given-names></name><name><surname>Weinstock</surname><given-names>GM</given-names></name><name><surname>Garrity</surname><given-names>GM</given-names></name><name><surname>Dodsworth</surname><given-names>JA</given-names></name><name><surname>Yooseph</surname><given-names>S</given-names></name><name><surname>Sutton</surname><given-names>G</given-names></name><name><surname>Glöckner</surname><given-names>FO</given-names></name><name><surname>Gilbert</surname><given-names>JA</given-names></name><name><surname>Nelson</surname><given-names>WC</given-names></name><name><surname>Hallam</surname><given-names>SJ</given-names></name><name><surname>Jungbluth</surname><given-names>SP</given-names></name><name><surname>Ettema</surname><given-names>TJG</given-names></name><name><surname>Tighe</surname><given-names>S</given-names></name><name><surname>Konstantinidis</surname><given-names>KT</given-names></name><name><surname>Liu</surname><given-names>WT</given-names></name><name><surname>Baker</surname><given-names>BJ</given-names></name><name><surname>Rattei</surname><given-names>T</given-names></name><name><surname>Eisen</surname><given-names>JA</given-names></name><name><surname>Hedlund</surname><given-names>B</given-names></name><name><surname>McMahon</surname><given-names>KD</given-names></name><name><surname>Fierer</surname><given-names>N</given-names></name><name><surname>Knight</surname><given-names>R</given-names></name><name><surname>Finn</surname><given-names>R</given-names></name><name><surname>Cochrane</surname><given-names>G</given-names></name><name><surname>Karsch-Mizrachi</surname><given-names>I</given-names></name><name><surname>Tyson</surname><given-names>GW</given-names></name><name><surname>Rinke</surname><given-names>C</given-names></name><name><surname>Lapidus</surname><given-names>A</given-names></name><name><surname>Meyer</surname><given-names>F</given-names></name><name><surname>Yilmaz</surname><given-names>P</given-names></name><name><surname>Parks</surname><given-names>DH</given-names></name><name><surname>Eren</surname><given-names>AM</given-names></name><name><surname>Schriml</surname><given-names>L</given-names></name><name><surname>Banfield</surname><given-names>JF</given-names></name><name><surname>Hugenholtz</surname><given-names>P</given-names></name><name><surname>Woyke</surname><given-names>T</given-names></name></person-group><year iso-8601-date="2017">2017</year><article-title>Minimum information about a single amplified genome (MISAG) and a metagenome-assembled genome (MIMAG) of bacteria and archaea</article-title><source>Nature Biotechnology</source><volume>35</volume><fpage>725</fpage><lpage>731</lpage><pub-id pub-id-type="doi">10.1038/nbt.3893</pub-id><pub-id pub-id-type="pmid">28787424</pub-id></element-citation></ref><ref id="bib6"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Browne</surname><given-names>PD</given-names></name><name><surname>Nielsen</surname><given-names>TK</given-names></name><name><surname>Kot</surname><given-names>W</given-names></name><name><surname>Aggerholm</surname><given-names>A</given-names></name><name><surname>Gilbert</surname><given-names>MTP</given-names></name><name><surname>Puetz</surname><given-names>L</given-names></name><name><surname>Rasmussen</surname><given-names>M</given-names></name><name><surname>Zervas</surname><given-names>A</given-names></name><name><surname>Hansen</surname><given-names>LH</given-names></name></person-group><year iso-8601-date="2020">2020</year><article-title>GC bias affects genomic and metagenomic reconstructions, underrepresenting GC-poor organisms</article-title><source>GigaScience</source><volume>9</volume><elocation-id>giaa008</elocation-id><pub-id pub-id-type="doi">10.1093/gigascience/giaa008</pub-id><pub-id pub-id-type="pmid">32052832</pub-id></element-citation></ref><ref id="bib7"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Caspi</surname><given-names>R</given-names></name><name><surname>Billington</surname><given-names>R</given-names></name><name><surname>Fulcher</surname><given-names>CA</given-names></name><name><surname>Keseler</surname><given-names>IM</given-names></name><name><surname>Kothari</surname><given-names>A</given-names></name><name><surname>Krummenacker</surname><given-names>M</given-names></name><name><surname>Latendresse</surname><given-names>M</given-names></name><name><surname>Midford</surname><given-names>PE</given-names></name><name><surname>Ong</surname><given-names>Q</given-names></name><name><surname>Ong</surname><given-names>WK</given-names></name><name><surname>Paley</surname><given-names>S</given-names></name><name><surname>Subhraveti</surname><given-names>P</given-names></name><name><surname>Karp</surname><given-names>PD</given-names></name></person-group><year iso-8601-date="2018">2018</year><article-title>The MetaCyc database of metabolic pathways and enzymes</article-title><source>Nucleic Acids Research</source><volume>46</volume><fpage>D633</fpage><lpage>D639</lpage><pub-id pub-id-type="doi">10.1093/nar/gkx935</pub-id><pub-id pub-id-type="pmid">29059334</pub-id></element-citation></ref><ref id="bib8"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Chen</surname><given-names>S</given-names></name><name><surname>Zhou</surname><given-names>Y</given-names></name><name><surname>Chen</surname><given-names>Y</given-names></name><name><surname>Gu</surname><given-names>J</given-names></name></person-group><year iso-8601-date="2018">2018</year><article-title>fastp: an ultra-fast all-in-one FASTQ preprocessor</article-title><source>Bioinformatics</source><volume>34</volume><fpage>i884</fpage><lpage>i890</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/bty560</pub-id><pub-id pub-id-type="pmid">30423086</pub-id></element-citation></ref><ref id="bib9"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Chklovski</surname><given-names>A</given-names></name><name><surname>Parks</surname><given-names>DH</given-names></name><name><surname>Woodcroft</surname><given-names>BJ</given-names></name><name><surname>Tyson</surname><given-names>GW</given-names></name></person-group><year iso-8601-date="2023">2023</year><article-title>CheckM2: a rapid, scalable and accurate tool for assessing microbial genome quality using machine learning</article-title><source>Nature Methods</source><volume>20</volume><fpage>1203</fpage><lpage>1212</lpage><pub-id pub-id-type="doi">10.1038/s41592-023-01940-w</pub-id><pub-id pub-id-type="pmid">37500759</pub-id></element-citation></ref><ref id="bib10"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Eren</surname><given-names>AM</given-names></name><name><surname>Esen</surname><given-names>ÖC</given-names></name><name><surname>Quince</surname><given-names>C</given-names></name><name><surname>Vineis</surname><given-names>JH</given-names></name><name><surname>Morrison</surname><given-names>HG</given-names></name><name><surname>Sogin</surname><given-names>ML</given-names></name><name><surname>Delmont</surname><given-names>TO</given-names></name></person-group><year iso-8601-date="2015">2015</year><article-title>Anvi’o: an advanced analysis and visualization platform for ’omics data</article-title><source>PeerJ</source><volume>3</volume><elocation-id>e1319</elocation-id><pub-id pub-id-type="doi">10.7717/peerj.1319</pub-id><pub-id pub-id-type="pmid">26500826</pub-id></element-citation></ref><ref id="bib11"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hyatt</surname><given-names>D</given-names></name><name><surname>Chen</surname><given-names>GL</given-names></name><name><surname>Locascio</surname><given-names>PF</given-names></name><name><surname>Land</surname><given-names>ML</given-names></name><name><surname>Larimer</surname><given-names>FW</given-names></name><name><surname>Hauser</surname><given-names>LJ</given-names></name></person-group><year iso-8601-date="2010">2010</year><article-title>Prodigal: prokaryotic gene recognition and translation initiation site identification</article-title><source>BMC Bioinformatics</source><volume>11</volume><elocation-id>119</elocation-id><pub-id pub-id-type="doi">10.1186/1471-2105-11-119</pub-id><pub-id pub-id-type="pmid">20211023</pub-id></element-citation></ref><ref id="bib12"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kanehisa</surname><given-names>M</given-names></name><name><surname>Goto</surname><given-names>S</given-names></name></person-group><year iso-8601-date="2000">2000</year><article-title>KEGG: kyoto encyclopedia of genes and genomes</article-title><source>Nucleic Acids Research</source><volume>28</volume><fpage>27</fpage><lpage>30</lpage><pub-id pub-id-type="doi">10.1093/nar/28.1.27</pub-id><pub-id pub-id-type="pmid">10592173</pub-id></element-citation></ref><ref id="bib13"><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Kanehisa</surname><given-names>M</given-names></name></person-group><year iso-8601-date="2002">2002</year><article-title>The KEGG database</article-title><conf-name>Novartis Foundation Symposium</conf-name><fpage>91</fpage><lpage>101</lpage></element-citation></ref><ref id="bib14"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kanehisa</surname><given-names>M</given-names></name><name><surname>Sato</surname><given-names>Y</given-names></name><name><surname>Morishima</surname><given-names>K</given-names></name></person-group><year iso-8601-date="2016">2016</year><article-title>Blastkoala and ghostkoala: Kegg tools for functional characterization of genome and metagenome sequences</article-title><source>Journal of Molecular Biology</source><volume>428</volume><fpage>726</fpage><lpage>731</lpage><pub-id pub-id-type="doi">10.1016/j.jmb.2015.11.006</pub-id><pub-id pub-id-type="pmid">26585406</pub-id></element-citation></ref><ref id="bib15"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Lambert</surname><given-names>BS</given-names></name><name><surname>Groussman</surname><given-names>RD</given-names></name><name><surname>Schatz</surname><given-names>MJ</given-names></name><name><surname>Coesel</surname><given-names>SN</given-names></name><name><surname>Durham</surname><given-names>BP</given-names></name><name><surname>Alverson</surname><given-names>AJ</given-names></name><name><surname>White</surname><given-names>AE</given-names></name><name><surname>Armbrust</surname><given-names>EV</given-names></name></person-group><year iso-8601-date="2022">2022</year><article-title>The dynamic trophic architecture of open-ocean protist communities revealed through machine-guided metatranscriptomics</article-title><source>PNAS</source><volume>119</volume><elocation-id>e2100916119</elocation-id><pub-id pub-id-type="doi">10.1073/pnas.2100916119</pub-id><pub-id pub-id-type="pmid">35145022</pub-id></element-citation></ref><ref id="bib16"><element-citation publication-type="software"><person-group person-group-type="author"><name><surname>Li</surname><given-names>H</given-names></name></person-group><year iso-8601-date="2023">2023</year><data-title>Seqtk Toolkit for processing sequences in FASTA/Q formats</data-title><version designator="c9458ba">c9458ba</version><source>GitHub</source><ext-link ext-link-type="uri" xlink:href="https://github.com/lh3/seqtk">https://github.com/lh3/seqtk</ext-link></element-citation></ref><ref id="bib17"><element-citation publication-type="preprint"><person-group person-group-type="author"><name><surname>Lundberg</surname><given-names>SM</given-names></name><name><surname>Lee</surname><given-names>SI</given-names></name></person-group><year iso-8601-date="2017">2017</year><article-title>A Unified Approach to Interpreting Model Predictions</article-title><source>arXiv</source><ext-link ext-link-type="uri" xlink:href="https://arxiv.org/abs/1705.07874">https://arxiv.org/abs/1705.07874</ext-link></element-citation></ref><ref id="bib18"><element-citation publication-type="software"><person-group person-group-type="author"><name><surname>McGrath</surname><given-names>D</given-names></name></person-group><year iso-8601-date="2024">2024</year><data-title>Metapathpredict_Workflow</data-title><version designator="swh:1:rev:c5c6610d6060328e7459cc25c22d0a182dbdf338">swh:1:rev:c5c6610d6060328e7459cc25c22d0a182dbdf338</version><source>Software Heritage</source><ext-link ext-link-type="uri" xlink:href="https://archive.softwareheritage.org/swh:1:dir:c0f9ea83ab0481d1b6651b689325fd9266d06799;origin=https://github.com/Microbiaki-Lab/MetaPathPredict_workflow;visit=swh:1:snp:bf0d9597d2ac3df99d24fbc6aa58be98de40da56;anchor=swh:1:rev:c5c6610d6060328e7459cc25c22d0a182dbdf338">https://archive.softwareheritage.org/swh:1:dir:c0f9ea83ab0481d1b6651b689325fd9266d06799;origin=https://github.com/Microbiaki-Lab/MetaPathPredict_workflow;visit=swh:1:snp:bf0d9597d2ac3df99d24fbc6aa58be98de40da56;anchor=swh:1:rev:c5c6610d6060328e7459cc25c22d0a182dbdf338</ext-link></element-citation></ref><ref id="bib19"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Nayfach</surname><given-names>S</given-names></name><name><surname>Roux</surname><given-names>S</given-names></name><name><surname>Seshadri</surname><given-names>R</given-names></name><name><surname>Udwary</surname><given-names>D</given-names></name><name><surname>Varghese</surname><given-names>N</given-names></name><name><surname>Schulz</surname><given-names>F</given-names></name><name><surname>Wu</surname><given-names>D</given-names></name><name><surname>Paez-Espino</surname><given-names>D</given-names></name><name><surname>Chen</surname><given-names>IM</given-names></name><name><surname>Huntemann</surname><given-names>M</given-names></name><name><surname>Palaniappan</surname><given-names>K</given-names></name><name><surname>Ladau</surname><given-names>J</given-names></name><name><surname>Mukherjee</surname><given-names>S</given-names></name><name><surname>Reddy</surname><given-names>TBK</given-names></name><name><surname>Nielsen</surname><given-names>T</given-names></name><name><surname>Kirton</surname><given-names>E</given-names></name><name><surname>Faria</surname><given-names>JP</given-names></name><name><surname>Edirisinghe</surname><given-names>JN</given-names></name><name><surname>Henry</surname><given-names>CS</given-names></name><name><surname>Jungbluth</surname><given-names>SP</given-names></name><name><surname>Chivian</surname><given-names>D</given-names></name><name><surname>Dehal</surname><given-names>P</given-names></name><name><surname>Wood-Charlson</surname><given-names>EM</given-names></name><name><surname>Arkin</surname><given-names>AP</given-names></name><name><surname>Tringe</surname><given-names>SG</given-names></name><name><surname>Visel</surname><given-names>A</given-names></name><name><surname>Woyke</surname><given-names>T</given-names></name><name><surname>Mouncey</surname><given-names>NJ</given-names></name><name><surname>Ivanova</surname><given-names>NN</given-names></name><name><surname>Kyrpides</surname><given-names>NC</given-names></name><name><surname>Eloe-Fadrosh</surname><given-names>EA</given-names></name></person-group><year iso-8601-date="2021">2021</year><article-title>A genomic catalog of earth’s microbiomes</article-title><source>Nature Biotechnology</source><volume>39</volume><fpage>499</fpage><lpage>509</lpage><pub-id pub-id-type="doi">10.1038/s41587-020-0718-6</pub-id><pub-id pub-id-type="pmid">33169036</pub-id></element-citation></ref><ref id="bib20"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>O’Leary</surname><given-names>NA</given-names></name><name><surname>Wright</surname><given-names>MW</given-names></name><name><surname>Brister</surname><given-names>JR</given-names></name><name><surname>Ciufo</surname><given-names>S</given-names></name><name><surname>Haddad</surname><given-names>D</given-names></name><name><surname>McVeigh</surname><given-names>R</given-names></name><name><surname>Rajput</surname><given-names>B</given-names></name><name><surname>Robbertse</surname><given-names>B</given-names></name><name><surname>Smith-White</surname><given-names>B</given-names></name><name><surname>Ako-Adjei</surname><given-names>D</given-names></name><name><surname>Astashyn</surname><given-names>A</given-names></name><name><surname>Badretdin</surname><given-names>A</given-names></name><name><surname>Bao</surname><given-names>Y</given-names></name><name><surname>Blinkova</surname><given-names>O</given-names></name><name><surname>Brover</surname><given-names>V</given-names></name><name><surname>Chetvernin</surname><given-names>V</given-names></name><name><surname>Choi</surname><given-names>J</given-names></name><name><surname>Cox</surname><given-names>E</given-names></name><name><surname>Ermolaeva</surname><given-names>O</given-names></name><name><surname>Farrell</surname><given-names>CM</given-names></name><name><surname>Goldfarb</surname><given-names>T</given-names></name><name><surname>Gupta</surname><given-names>T</given-names></name><name><surname>Haft</surname><given-names>D</given-names></name><name><surname>Hatcher</surname><given-names>E</given-names></name><name><surname>Hlavina</surname><given-names>W</given-names></name><name><surname>Joardar</surname><given-names>VS</given-names></name><name><surname>Kodali</surname><given-names>VK</given-names></name><name><surname>Li</surname><given-names>W</given-names></name><name><surname>Maglott</surname><given-names>D</given-names></name><name><surname>Masterson</surname><given-names>P</given-names></name><name><surname>McGarvey</surname><given-names>KM</given-names></name><name><surname>Murphy</surname><given-names>MR</given-names></name><name><surname>O’Neill</surname><given-names>K</given-names></name><name><surname>Pujar</surname><given-names>S</given-names></name><name><surname>Rangwala</surname><given-names>SH</given-names></name><name><surname>Rausch</surname><given-names>D</given-names></name><name><surname>Riddick</surname><given-names>LD</given-names></name><name><surname>Schoch</surname><given-names>C</given-names></name><name><surname>Shkeda</surname><given-names>A</given-names></name><name><surname>Storz</surname><given-names>SS</given-names></name><name><surname>Sun</surname><given-names>H</given-names></name><name><surname>Thibaud-Nissen</surname><given-names>F</given-names></name><name><surname>Tolstoy</surname><given-names>I</given-names></name><name><surname>Tully</surname><given-names>RE</given-names></name><name><surname>Vatsan</surname><given-names>AR</given-names></name><name><surname>Wallin</surname><given-names>C</given-names></name><name><surname>Webb</surname><given-names>D</given-names></name><name><surname>Wu</surname><given-names>W</given-names></name><name><surname>Landrum</surname><given-names>MJ</given-names></name><name><surname>Kimchi</surname><given-names>A</given-names></name><name><surname>Tatusova</surname><given-names>T</given-names></name><name><surname>DiCuccio</surname><given-names>M</given-names></name><name><surname>Kitts</surname><given-names>P</given-names></name><name><surname>Murphy</surname><given-names>TD</given-names></name><name><surname>Pruitt</surname><given-names>KD</given-names></name></person-group><year iso-8601-date="2016">2016</year><article-title>Reference sequence (RefSeq) database at NCBI: current status, taxonomic expansion, and functional annotation</article-title><source>Nucleic Acids Research</source><volume>44</volume><fpage>D733</fpage><lpage>D745</lpage><pub-id pub-id-type="doi">10.1093/nar/gkv1189</pub-id><pub-id pub-id-type="pmid">26553804</pub-id></element-citation></ref><ref id="bib21"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Palù</surname><given-names>M</given-names></name><name><surname>Basile</surname><given-names>A</given-names></name><name><surname>Zampieri</surname><given-names>G</given-names></name><name><surname>Treu</surname><given-names>L</given-names></name><name><surname>Rossi</surname><given-names>A</given-names></name><name><surname>Morlino</surname><given-names>MS</given-names></name><name><surname>Campanaro</surname><given-names>S</given-names></name></person-group><year iso-8601-date="2022">2022</year><article-title>Kemet - a python tool for kegg module evaluation and microbial genome annotation expansion</article-title><source>Computational and Structural Biotechnology Journal</source><volume>20</volume><fpage>1481</fpage><lpage>1486</lpage><pub-id pub-id-type="doi">10.1016/j.csbj.2022.03.015</pub-id><pub-id pub-id-type="pmid">35422973</pub-id></element-citation></ref><ref id="bib22"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Parks</surname><given-names>DH</given-names></name><name><surname>Chuvochina</surname><given-names>M</given-names></name><name><surname>Rinke</surname><given-names>C</given-names></name><name><surname>Mussig</surname><given-names>AJ</given-names></name><name><surname>Chaumeil</surname><given-names>P-A</given-names></name><name><surname>Hugenholtz</surname><given-names>P</given-names></name></person-group><year iso-8601-date="2022">2022</year><article-title>GTDB: an ongoing census of bacterial and archaeal diversity through a phylogenetically consistent, rank normalized and complete genome-based taxonomy</article-title><source>Nucleic Acids Research</source><volume>50</volume><fpage>D785</fpage><lpage>D794</lpage><pub-id pub-id-type="doi">10.1093/nar/gkab776</pub-id><pub-id pub-id-type="pmid">33290521</pub-id></element-citation></ref><ref id="bib23"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Pedregosa</surname><given-names>F</given-names></name></person-group><year iso-8601-date="2011">2011</year><article-title>Scikit-learn: machine learning in python</article-title><source>The Journal of Machine Learning Research</source><volume>12</volume><fpage>2825</fpage><lpage>2830</lpage></element-citation></ref><ref id="bib24"><element-citation publication-type="software"><person-group person-group-type="author"><collab>Phil Ewels</collab></person-group><year iso-8601-date="2024">2024</year><data-title>Sra-explorer</data-title><version designator="GSE30567">GSE30567</version><source>Github</source><ext-link ext-link-type="uri" xlink:href="https://sra-explorer.info/">https://sra-explorer.info/</ext-link></element-citation></ref><ref id="bib25"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Rowe</surname><given-names>E</given-names></name><name><surname>Palsson</surname><given-names>BO</given-names></name><name><surname>King</surname><given-names>ZA</given-names></name></person-group><year iso-8601-date="2018">2018</year><article-title>Escher-FBA: a web application for interactive flux balance analysis</article-title><source>BMC Systems Biology</source><volume>12</volume><elocation-id>84</elocation-id><pub-id pub-id-type="doi">10.1186/s12918-018-0607-5</pub-id><pub-id pub-id-type="pmid">30257674</pub-id></element-citation></ref><ref id="bib26"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Sattler</surname><given-names>V</given-names></name><name><surname>Acket</surname><given-names>B</given-names></name><name><surname>Raposo</surname><given-names>N</given-names></name><name><surname>Albucher</surname><given-names>JF</given-names></name><name><surname>Thalamas</surname><given-names>C</given-names></name><name><surname>Loubinoux</surname><given-names>I</given-names></name><name><surname>Chollet</surname><given-names>F</given-names></name><name><surname>Simonetta-Moreau</surname><given-names>M</given-names></name></person-group><year iso-8601-date="2015">2015</year><article-title>Anodal tdcs combined with radial nerve stimulation promotes hand motor recovery in the acute phase after ischemic stroke</article-title><source>Neurorehabilitation and Neural Repair</source><volume>29</volume><fpage>743</fpage><lpage>754</lpage><pub-id pub-id-type="doi">10.1177/1545968314565465</pub-id><pub-id pub-id-type="pmid">25567120</pub-id></element-citation></ref><ref id="bib27"><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Sechidis</surname><given-names>K</given-names></name><name><surname>Tsoumakas</surname><given-names>G</given-names></name><name><surname>Vlahavas</surname><given-names>I</given-names></name></person-group><year iso-8601-date="2011">2011</year><article-title>On the stratification of multi-label data</article-title><conf-name>Machine Learning and Knowledge Discovery in Databases: European Conference, ECML PKDD 2011</conf-name><fpage>5</fpage><lpage>9</lpage><pub-id pub-id-type="doi">10.1007/978-3-642-23808-6</pub-id></element-citation></ref><ref id="bib28"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Shaffer</surname><given-names>M</given-names></name><name><surname>Borton</surname><given-names>MA</given-names></name><name><surname>McGivern</surname><given-names>BB</given-names></name><name><surname>Zayed</surname><given-names>AA</given-names></name><name><surname>La Rosa</surname><given-names>SL</given-names></name><name><surname>Solden</surname><given-names>LM</given-names></name><name><surname>Liu</surname><given-names>P</given-names></name><name><surname>Narrowe</surname><given-names>AB</given-names></name><name><surname>Rodríguez-Ramos</surname><given-names>J</given-names></name><name><surname>Bolduc</surname><given-names>B</given-names></name><name><surname>Gazitúa</surname><given-names>MC</given-names></name><name><surname>Daly</surname><given-names>RA</given-names></name><name><surname>Smith</surname><given-names>GJ</given-names></name><name><surname>Vik</surname><given-names>DR</given-names></name><name><surname>Pope</surname><given-names>PB</given-names></name><name><surname>Sullivan</surname><given-names>MB</given-names></name><name><surname>Roux</surname><given-names>S</given-names></name><name><surname>Wrighton</surname><given-names>KC</given-names></name></person-group><year iso-8601-date="2020">2020</year><article-title>DRAM for distilling microbial metabolism to automate the curation of microbiome function</article-title><source>Nucleic Acids Research</source><volume>48</volume><fpage>8883</fpage><lpage>8900</lpage><pub-id pub-id-type="doi">10.1093/nar/gkaa621</pub-id><pub-id pub-id-type="pmid">32766782</pub-id></element-citation></ref><ref id="bib29"><element-citation publication-type="web"><person-group person-group-type="author"><collab>SRA</collab></person-group><year iso-8601-date="1988">1988</year><article-title>SRA Toolkit Development Team</article-title><ext-link ext-link-type="uri" xlink:href="https://trace.ncbi.nlm.nih.gov/Traces/sra/sra.cgi?view=software)">https://trace.ncbi.nlm.nih.gov/Traces/sra/sra.cgi?view=software)</ext-link><date-in-citation iso-8601-date="1988-11-04">November 4, 1988</date-in-citation></element-citation></ref><ref id="bib30"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Srivastava</surname><given-names>N</given-names></name></person-group><year iso-8601-date="2014">2014</year><article-title>Dropout: a simple way to prevent neural networks from overfitting</article-title><source>The Journal of Machine Learning Research</source><volume>15</volume><fpage>1929</fpage><lpage>1958</lpage></element-citation></ref><ref id="bib31"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Weimann</surname><given-names>A</given-names></name><name><surname>Mooren</surname><given-names>K</given-names></name><name><surname>Frank</surname><given-names>J</given-names></name><name><surname>Pope</surname><given-names>PB</given-names></name><name><surname>Bremges</surname><given-names>A</given-names></name><name><surname>McHardy</surname><given-names>AC</given-names></name></person-group><year iso-8601-date="2016">2016</year><article-title>From genomes to phenotypes: Traitar, the microbial trait analyzer</article-title><source>mSystems</source><volume>1</volume><elocation-id>e00101-16</elocation-id><pub-id pub-id-type="doi">10.1128/mSystems.00101-16</pub-id><pub-id pub-id-type="pmid">28066816</pub-id></element-citation></ref><ref id="bib32"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ye</surname><given-names>Y</given-names></name><name><surname>Doak</surname><given-names>TG</given-names></name></person-group><year iso-8601-date="2009">2009</year><article-title>A parsimony approach to biological pathway reconstruction/inference for genomes and metagenomes</article-title><source>PLOS Computational Biology</source><volume>5</volume><elocation-id>e1000465</elocation-id><pub-id pub-id-type="doi">10.1371/journal.pcbi.1000465</pub-id><pub-id pub-id-type="pmid">19680427</pub-id></element-citation></ref><ref id="bib33"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Zhou</surname><given-names>Z</given-names></name><name><surname>Tran</surname><given-names>PQ</given-names></name><name><surname>Breister</surname><given-names>AM</given-names></name><name><surname>Liu</surname><given-names>Y</given-names></name><name><surname>Kieft</surname><given-names>K</given-names></name><name><surname>Cowley</surname><given-names>ES</given-names></name><name><surname>Karaoz</surname><given-names>U</given-names></name><name><surname>Anantharaman</surname><given-names>K</given-names></name></person-group><year iso-8601-date="2022">2022</year><article-title>METABOLIC: high-throughput profiling of microbial genomes for functional traits, metabolism, biogeochemistry, and community-scale functional networks</article-title><source>Microbiome</source><volume>10</volume><elocation-id>33</elocation-id><pub-id pub-id-type="doi">10.1186/s40168-021-01213-8</pub-id><pub-id pub-id-type="pmid">35172890</pub-id></element-citation></ref><ref id="bib34"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Zimmermann</surname><given-names>J</given-names></name><name><surname>Kaleta</surname><given-names>C</given-names></name><name><surname>Waschina</surname><given-names>S</given-names></name></person-group><year iso-8601-date="2021">2021</year><article-title>gapseq: informed prediction of bacterial metabolic pathways and reconstruction of accurate metabolic models</article-title><source>Genome Biology</source><volume>22</volume><elocation-id>81</elocation-id><pub-id pub-id-type="doi">10.1186/s13059-021-02295-1</pub-id><pub-id pub-id-type="pmid">33691770</pub-id></element-citation></ref></ref-list><app-group><app id="appendix-1"><title>Appendix 1</title><fig id="app1fig1" position="float"><label>Appendix 1—figure 1.</label><caption><title>Distribution of phyla of bacterial genomes from the GEM repository used during model validation and associated environments they were recovered from.</title><p>(Panel <bold>a</bold>) Bar chart of the taxonomic distribution of genomes (n = 40) from the GEM repository used during model validation. (Panel <bold>b</bold>) Bar chart of the environmental sources of metagenomes the MAGs from this test set were recovered from.</p><p><supplementary-material id="app1fig1sdata1"><label>Appendix 1—figure 1—source data 1.</label><caption><title>The column “Genome ID” lists the names of genomes downloaded from the GEM database; columns “Phylum”, “Class”, “Order”, “Family”, “Genus”, and “Species” contain the associated taxonomic information for each genome; “Ecosystem category” lists the environment the genome was recovered from.</title></caption><media mimetype="application" mime-subtype="xlsx" xlink:href="elife-85749-app1-fig1-data1-v1.xlsx"/></supplementary-material></p></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-85749-app1-fig1-v1.tif"/></fig><fig id="app1fig2" position="float"><label>Appendix 1—figure 2.</label><caption><title>Distribution of phyla of bacterial genomes from which annotation data was used during model training and testing.</title><p>See <xref ref-type="supplementary-material" rid="supp1">Supplementary file 1C</xref> for the full metadata table.</p><p><supplementary-material id="app1fig2sdata1"><label>Appendix 1—figure 2—source data 1.</label><caption><title>The column “Genome ID” lists the names of genomes downloaded from the NCBI and GTDB databases; “Database” lists which database each genomewas downloaded from (NCBI or GTDB); columns “Phylum”, “Class”, “Order”, “Family”, “Genus”, and “Species” contain the associated taxonomic information for each genome.</title></caption><media mimetype="application" mime-subtype="xlsx" xlink:href="elife-85749-app1-fig2-data1-v1.xlsx"/></supplementary-material></p></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-85749-app1-fig2-v1.tif"/></fig><fig id="app1fig3" position="float"><label>Appendix 1—figure 3.</label><caption><title>Violin plots of the percent of positive “KEGG module present” classes for genomes from MetaPathPredict’s deep learning training and test datasets for both of its models (model #1 on the left-hand side; model #2 on the right-hand side).</title><p>Each train/test split contains the same distribution of positive and negative classes.</p><p><supplementary-material id="app1fig3sdata1"><label>Appendix 1—figure 3—source data 1.</label><caption><title>The column “Module name” contains the name of all KEGG Modules that MetaPathPredict is trained to predict; “Prevalence” lists the percent of training genomes the complete module was detected in; “Model” lists the model the prevalence data corresponds to (Model 1/Model 2).</title></caption><media mimetype="application" mime-subtype="xlsx" xlink:href="elife-85749-app1-fig3-data1-v1.xlsx"/></supplementary-material></p></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-85749-app1-fig3-v1.tif"/></fig><fig id="app1fig4" position="float"><label>Appendix 1—figure 4.</label><caption><title>Heatmap of held-out test data for the set of features (KEGG Ortholog presence/absence) used by MetaPathPredict’s deep learning models.</title><p>The annotation row on the left-hand side of the plot is annotated with classes and predictions for KEGG module M00122 (cobalamin biosynthesis), and is sorted by the percentage of protein annotations retained in each observation (increasing in protein annotations retained from top to bottom).</p><p><supplementary-material id="app1fig4sdata1"><label>Appendix 1—figure 4—source data 1.</label><caption><title>The column “Module M00122” contains the class labels for the presence or absence of KEGG Module M00122 in the training dataset; “Proportion of protein families retained” contains the proportion of protein family presence/absence annotations retained during protein family downsampling; the remain columns correspond to the presence or absence of protein families in the training genomes.</title></caption><media mimetype="application" mime-subtype="zip" xlink:href="elife-85749-app1-fig4-data1-v1.zip"/></supplementary-material></p></caption><graphic mimetype="image" mime-subtype="tiff" xlink:href="elife-85749-app1-fig4-v1.tif"/></fig></app></app-group></back><sub-article article-type="editor-report" id="sa0"><front-stub><article-id pub-id-type="doi">10.7554/eLife.85749.sa0</article-id><title-group><article-title>Editor's evaluation</article-title></title-group><contrib-group><contrib contrib-type="author"><name><surname>Nicolás</surname><given-names>Marisa</given-names></name><role specific-use="editor">Reviewing Editor</role><aff><institution-wrap><institution-id institution-id-type="ror">https://ror.org/0498ekt05</institution-id><institution>Laboratório Nacional de Computação Científica</institution></institution-wrap><country>Brazil</country></aff></contrib></contrib-group><related-object id="sa0ro1" object-id-type="id" object-id="10.1101/2022.12.21.521254" link-type="continued-by" xlink:href="https://sciety.org/articles/activity/10.1101/2022.12.21.521254"/></front-stub><body><p>This landmark study presents MetaPathPredict, a method that uses deep neural networks to predict the presence or absence of KEGG modules based on annotated features in the genome. The evidence supporting the conclusions is compelling, with a tool that allows for the prediction of KEGG modules in sparse gene sequence datasets.</p></body></sub-article><sub-article article-type="decision-letter" id="sa1"><front-stub><article-id pub-id-type="doi">10.7554/eLife.85749.sa1</article-id><title-group><article-title>Decision letter</article-title></title-group><contrib-group content-type="section"><contrib contrib-type="editor"><name><surname>Nicolás</surname><given-names>Marisa</given-names></name><role>Reviewing Editor</role><aff><institution-wrap><institution-id institution-id-type="ror">https://ror.org/0498ekt05</institution-id><institution>Laboratório Nacional de Computação Científica</institution></institution-wrap><country>Brazil</country></aff></contrib></contrib-group></front-stub><body><boxed-text id="sa2-box1"><p>Our editorial process produces two outputs: (i) <ext-link ext-link-type="uri" xlink:href="https://sciety.org/articles/activity/10.1101/2022.12.21.521254">public reviews</ext-link> designed to be posted alongside <ext-link ext-link-type="uri" xlink:href="https://www.biorxiv.org/content/10.1101/2022.12.21.521254v2">the preprint</ext-link> for the benefit of readers; (ii) feedback on the manuscript for the authors, including requests for revisions, shown below. We also include an acceptance summary that explains what the editors found interesting or important about the work.</p></boxed-text><p><bold>Decision letter after peer review:</bold></p><p>Thank you for submitting your article &quot;MetaPathPredict: A machine learning-based tool for predicting metabolic modules in incomplete bacterial genomes&quot; for consideration by <italic>eLife</italic>. Your article has been reviewed by 2 peer reviewers, and the evaluation has been overseen by a Reviewing Editor and Bavesh Kana as the Senior Editor.</p><p>The reviewers have discussed their reviews with one another, and the Reviewing Editor has drafted this to help you prepare a revised submission.</p><p>Essential revisions (for the authors):</p><p><italic>Reviewer #1 (Recommendations for the authors):</italic></p><p>I have only a few questions and comments about the paper:</p><p>1. It's possible the training set itself will have some incomplete modules dues to a mixture of novel gene families, poor gene calls, or annotation error. What steps were taken to address this possibility? Were &quot;nearly complete&quot; modules considered &quot;complete&quot;, and what was the threshold?</p><p>2. The &quot;KofamScan command line tool&quot; was used to annotate the training set for this method. Of course, other annotation methods (e.g. DRAM) may render significant differences in the resulting functional annotations. Did the authors test if the KofamScan-trained classifiers show similar accuracy/performance when applied to annotations from DRAM or some other competing tool?</p><p>3. Would it be possible to train the method on KEGG reaction IDs so other approaches that annotate reactions directly could be applied to the method? Not suggesting the authors do this work, but it might be worth mentioning in the discussion.</p><p>4. Did the authors look at the features chosen by the classifiers for various modules? It would be interesting to know how often the top-ranking features lie within the module or outside, and when outside, what kind of feature is used?</p><p>5. The link in the PDF to the git repo (https://github.com/d-mcgrath/MetaPathPredict) is corrupted somehow and doesn't work. I suspect the &quot;-&quot;. Manually entering the address does get me to the repo.</p><p><italic>Reviewer #2 (Recommendations for the authors):</italic></p><p>Observation 1: Figures 2-5 present compelling evidence of MetaPathPredict's predictive capabilities. However, the authors have not discussed the potential mechanisms that could be discovered using the stacked ensemble of neural networks. In lines 171-173, the authors mentioned that MetaPathPredict's models incorporate information from genes outside of KEGG modules, but they have not elaborated on how such information can be interpreted. While predictive power is a commendable goal, machine learning models usually trade off explanatory power for predictive power. Therefore, the authors should discuss whether the stacked ensemble of neural networks could provide biological insights (https://doi.org/10.1038/s42256-019-0048-x).</p><p>Observation 2: The authors have primarily focused on predicting the presence of complete KEGG modules, which may result in predictions that are overly conservative regarding gene essentiality. For example, some KEGG modules may have functionally redundant reactions, and an incomplete KEGG module could still lead to a viable set of metabolic reactions. To address this issue, the authors could predict gene essentiality, carbon source, or metabolic product. (For further information, see https://doi.org/10.1186/s13059-021-02295-1.)</p></body></sub-article><sub-article article-type="reply" id="sa2"><front-stub><article-id pub-id-type="doi">10.7554/eLife.85749.sa2</article-id><title-group><article-title>Author response</article-title></title-group></front-stub><body><disp-quote content-type="editor-comment"><p>Essential revisions (for the authors):</p><p>Reviewer #1 (Recommendations for the authors):</p><p>I have only a few questions and comments about the paper:</p><p>1. It's possible the training set itself will have some incomplete modules dues to a mixture of novel gene families, poor gene calls, or annotation error. What steps were taken to address this possibility? Were &quot;nearly complete&quot; modules considered &quot;complete&quot;, and what was the threshold?</p></disp-quote><p>Thank you for identifying issues that may have arisen in constructing our training data. In order to classify an organism as containing a module, all steps in the module must have been present. We did not classify organisms containing, for example, 9 out of 10 of the steps in a module as containing the entire module. It is non-trivial to determine how many organisms contain a certain percent of a module given the varying number of steps that comprise each KEGG module. There are likely instances in which organisms with unannotated portions of their genomes do contain the missing steps of modules and were incorrectly labelled in the “absent” class. Though it would be nice for training data to be perfectly labeled, it is common for some level of noise (mis-labeled data) to be admitted into the training set, and for machine learning models to work in spite of this. However, we accounted for this issue by using a large number of genomes in our overall dataset: with training and test data generated from over 30,000 high quality isolate genomes and metagenome-assembled genomes. We are confident that we are capturing the signal of module presence. We think this is a worthwhile topic for future exploration.</p><p>Additionally, in the first iteration of training data curation, we utilized an e-value cutoff of ≤1e-10 to retain all gene annotations at or below this threshold. We have since revised the training data, and now instead of using a consistent e-value cutoff of ≤1e-10 for our KofamScan-derived annotations, we updated our approach by utilizing the adaptive threshold HMM score cutoffs of the KofamScan HMM profiles. This approach provides resilience to using specific e-value cutoffs by preventing inflation of the training and assessment datasets with less-confident gene annotations. We now include a description of this revised process in our methods subsection “Filtering genome database metadata, downloading high-quality genomes, and gene annotations”.</p><disp-quote content-type="editor-comment"><p>2. The &quot;KofamScan command line tool&quot; was used to annotate the training set for this method. Of course, other annotation methods (e.g. DRAM) may render significant differences in the resulting functional annotations. Did the authors test if the KofamScan-trained classifiers show similar accuracy/performance when applied to annotations from DRAM or some other competing tool?</p></disp-quote><p>Without a KEGG license, DRAM internally runs KofamScan and reproduces the results that we generated using the KofamScan tool. As perhaps many of the potential users of this tool, we do not possess a KEGG license, and therefore could not compare DRAM’s alternative annotation method (that utilizes the KEGG GENES database) to KofamScan annotations.</p><p>To assess the quality of our KofamScan annotations, we re-annotated a subset of 25 training genomes using the BlastKoala (designed to annotate genomes) and GhostKoala (intended to annotate metagenomes) online annotation tools available from the KEGG database. The annotations from BlastKoala were ~85% identical, while KofamScan annotated ~4% of genes on average that were missed by BlastKoala, and BlastKoala labelled ~9% of genes that did not surpass any HMM adaptive thresholds from KofamScan. Approximately 2% of annotations differed between the two tools. The results were similar with GhostKoala: ~84% of annotations were identical, GhostKoala annotated 8% of genes that KofamScan missed; KofamScan labelled ~6% of genes that GhostKoala missed; ~2% of annotations were a mismatch. We are confident in using KofamScan for our annotations given the similarity of results yielded by GhostaKoala and BlastKoala on this subset of genomes.</p><disp-quote content-type="editor-comment"><p>3. Would it be possible to train the method on KEGG reaction IDs so other approaches that annotate reactions directly could be applied to the method? Not suggesting the authors do this work, but it might be worth mentioning in the discussion.</p></disp-quote><p>About 85% of reactions (n = 836) involved in the KEGG modules contained within MetaPathPredict are uniquely distributed in exactly one module. Roughly ~3.5% are contained within 3 or more modules (with a maximum number of 7 modules containing the same reaction). MetaPathPredict is essentially predicting the presence or absence of groups of KEGG reactions that have minimal overlap across KEGG modules, if at all. While there would be utility in training models to predict individual KEGG reactions, this is outside the scope of MetaPathPredict.</p><disp-quote content-type="editor-comment"><p>4. Did the authors look at the features chosen by the classifiers for various modules? It would be interesting to know how often the top-ranking features lie within the module or outside, and when outside, what kind of feature is used?</p></disp-quote><p>Thank you for your question. Please see our response to comment #1 from Reviewer #2.</p><disp-quote content-type="editor-comment"><p>5. The link in the PDF to the git repo (https://github.com/d-mcgrath/MetaPathPredict) is corrupted somehow and doesn't work. I suspect the &quot;-&quot;. Manually entering the address does get me to the repo.</p></disp-quote><p>Thank you for bringing this to our attention. We have fixed the dash in the manuscript and tested the link – it appears to be functioning as expected now.</p><disp-quote content-type="editor-comment"><p>Reviewer #2 (Recommendations for the authors):</p><p>Observation 1: Figures 2-5 present compelling evidence of MetaPathPredict's predictive capabilities. However, the authors have not discussed the potential mechanisms that could be discovered using the stacked ensemble of neural networks. In lines 171-173, the authors mentioned that MetaPathPredict's models incorporate information from genes outside of KEGG modules, but they have not elaborated on how such information can be interpreted. While predictive power is a commendable goal, machine learning models usually trade off explanatory power for predictive power. Therefore, the authors should discuss whether the stacked ensemble of neural networks could provide biological insights (https://doi.org/10.1038/s42256-019-0048-x).</p></disp-quote><p>Thank you for your comment. We have calculated the importance of both models’ features using the SHAP method (Lundberg and Lee, 2017), a mathematical method to explain the predictions of machine learning models. Features with large absolute SHAP values play an important role in calculating a model’s predictions. After deriving SHAP values for each feature from our models, we sorted the features by decreasing importance. SHAP scores in model #1 (trained to classify modules present in ≥10% and ≤90% of training genomes) indicate that 30 of the top 100 most important features (genes) influencing predictions were direct components of KEGG modules predicted by this model. In model #2 (classifies modules present in &lt;10% or &gt;90% of training genomes), 37 of the 100 most influential features were part of KEGG modules this model was trained to predict. Given the multilabel architecture of our models, it is difficult to draw direct conclusions from SHAP analysis. However, it is clear that MetaPathPredict’s predictions are at least in part influenced by select genes present in KEGG modules, and also to a larger extent by genes not directly participating in KEGG module reactions. We have now added a section that discusses this in our results subsection “Analysis of model feature importance using SHAP”, as well as our conclusion. We additionally provide a supplementary table 3 including all features, a description of their function, which modules they are directly involved in (if any), and their associated mean SHAP values. Interestingly, a number of these features were found to be transporters, sensing components, regulators, pathogenesis-related proteins, and transposases from mobile elements. We include a discussion of the potential biological implications of the important features in the Results and Conclusions section.</p><disp-quote content-type="editor-comment"><p>Observation 2: The authors have primarily focused on predicting the presence of complete KEGG modules, which may result in predictions that are overly conservative regarding gene essentiality. For example, some KEGG modules may have functionally redundant reactions, and an incomplete KEGG module could still lead to a viable set of metabolic reactions. To address this issue, the authors could predict gene essentiality, carbon source, or metabolic product. (For further information, see https://doi.org/10.1186/s13059-021-02295-1.)</p></disp-quote><p>Thank you for bringing this to our attention. To address the issue of reaction redundancy, we assessed the completeness KEGG modules using a list of all possible paths to completion for each one. This list was created by utilizing methods from the Anvi’o Python module (Eren et al. 2015), which calculates all possible non-redundant combinations of KEGG Orthologs (K numbers) required to complete a module. For a module to be considered “present” in the training data, only one set of K numbers needed for a non-redundant path to module completion had to be present in a genome, as opposed to all genes being required that could (in some cases redundantly) complete a module. We now include a revised description of the process in the methods subsection “Formatting gene annotation data, fitting KEGG module classification models.”</p><p>References</p><p>Lundberg, Scott M., and Su-In Lee. &quot;A unified approach to interpreting model predictions.&quot; <italic>Advances in neural information processing systems</italic> 30 (2017).</p><p>Eren, A. Murat, et al. &quot;Anvi’o: an advanced analysis and visualization platform for ‘omics data.&quot; <italic>PeerJ</italic> 3 (2015): e1319.</p></body></sub-article></article>