<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.1 20151215//EN"  "JATS-archivearticle1.dtd"><article article-type="research-article" dtd-version="1.1" xmlns:ali="http://www.niso.org/schemas/ali/1.0/" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink"><front><journal-meta><journal-id journal-id-type="nlm-ta">elife</journal-id><journal-id journal-id-type="publisher-id">eLife</journal-id><journal-title-group><journal-title>eLife</journal-title></journal-title-group><issn pub-type="epub" publication-format="electronic">2050-084X</issn><publisher><publisher-name>eLife Sciences Publications, Ltd</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="publisher-id">61834</article-id><article-id pub-id-type="doi">10.7554/eLife.61834</article-id><article-categories><subj-group subj-group-type="display-channel"><subject>Tools and Resources</subject></subj-group><subj-group subj-group-type="heading"><subject>Neuroscience</subject></subj-group></article-categories><title-group><article-title>SpikeInterface, a unified framework for spike sorting</article-title></title-group><contrib-group><contrib contrib-type="author" corresp="yes" equal-contrib="yes" id="author-201178"><name><surname>Buccino</surname><given-names>Alessio P</given-names></name><contrib-id authenticated="true" contrib-id-type="orcid">https://orcid.org/0000-0003-3661-527X</contrib-id><email>alessio.buccino@bsse.ethz.ch</email><xref ref-type="aff" rid="aff1">1</xref><xref ref-type="aff" rid="aff2">2</xref><xref ref-type="fn" rid="equal-contrib1">†</xref><xref ref-type="other" rid="fund2"/><xref ref-type="other" rid="fund3"/><xref ref-type="other" rid="fund4"/><xref ref-type="fn" rid="con1"/><xref ref-type="fn" rid="conf1"/></contrib><contrib contrib-type="author" equal-contrib="yes" id="author-159990"><name><surname>Hurwitz</surname><given-names>Cole L</given-names></name><contrib-id authenticated="true" contrib-id-type="orcid">https://orcid.org/0000-0002-2023-1653</contrib-id><xref ref-type="aff" rid="aff3">3</xref><xref ref-type="fn" rid="equal-contrib1">†</xref><xref ref-type="other" rid="fund5"/><xref ref-type="fn" rid="con2"/><xref ref-type="fn" rid="conf1"/></contrib><contrib contrib-type="author" id="author-161122"><name><surname>Garcia</surname><given-names>Samuel</given-names></name><contrib-id authenticated="true" contrib-id-type="orcid">https://orcid.org/0000-0001-6389-9779</contrib-id><xref ref-type="aff" rid="aff4">4</xref><xref ref-type="fn" rid="con3"/><xref ref-type="fn" rid="conf1"/></contrib><contrib contrib-type="author" id="author-161121"><name><surname>Magland</surname><given-names>Jeremy</given-names></name><contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-5286-4375</contrib-id><xref ref-type="aff" rid="aff5">5</xref><xref ref-type="fn" rid="con4"/><xref ref-type="fn" rid="conf1"/></contrib><contrib contrib-type="author" id="author-203447"><name><surname>Siegle</surname><given-names>Joshua H</given-names></name><contrib-id authenticated="true" contrib-id-type="orcid">https://orcid.org/0000-0002-7736-4844</contrib-id><xref ref-type="aff" rid="aff6">6</xref><xref ref-type="fn" rid="con5"/><xref ref-type="fn" rid="conf1"/></contrib><contrib contrib-type="author" id="author-161123"><name><surname>Hurwitz</surname><given-names>Roger</given-names></name><xref ref-type="aff" rid="aff7">7</xref><xref ref-type="fn" rid="con6"/><xref ref-type="fn" rid="conf1"/></contrib><contrib contrib-type="author" id="author-161120"><name><surname>Hennig</surname><given-names>Matthias H</given-names></name><contrib-id authenticated="true" contrib-id-type="orcid">https://orcid.org/0000-0001-7270-5817</contrib-id><xref ref-type="aff" rid="aff3">3</xref><xref ref-type="other" rid="fund1"/><xref ref-type="fn" rid="con7"/><xref ref-type="fn" rid="conf1"/></contrib><aff id="aff1"><label>1</label><institution>Department of Biosystems Science and Engineering, ETH Zurich</institution><addr-line><named-content content-type="city">Zürich</named-content></addr-line><country>Switzerland</country></aff><aff id="aff2"><label>2</label><institution>Centre for Integrative Neuroplasticity (CINPLA), University of Oslo</institution><addr-line><named-content content-type="city">Oslo</named-content></addr-line><country>Norway</country></aff><aff id="aff3"><label>3</label><institution>School of Informatics, University of Edinburgh</institution><addr-line><named-content content-type="city">Edinburgh</named-content></addr-line><country>United Kingdom</country></aff><aff id="aff4"><label>4</label><institution>Centre de Recherche en Neuroscience de Lyon, CNRS</institution><addr-line><named-content content-type="city">Lyon</named-content></addr-line><country>France</country></aff><aff id="aff5"><label>5</label><institution>Flatiron Institute</institution><addr-line><named-content content-type="city">New York</named-content></addr-line><country>United States</country></aff><aff id="aff6"><label>6</label><institution>Allen Institute for Brain Science</institution><addr-line><named-content content-type="city">Seattle</named-content></addr-line><country>United States</country></aff><aff id="aff7"><label>7</label><institution>Independent Researcher</institution><addr-line><named-content content-type="city">Portland</named-content></addr-line><country>United States</country></aff></contrib-group><contrib-group content-type="section"><contrib contrib-type="editor"><name><surname>Colgin</surname><given-names>Laura L</given-names></name><role>Reviewing Editor</role><aff><institution>University of Texas at Austin</institution><country>United States</country></aff></contrib><contrib contrib-type="senior_editor"><name><surname>Colgin</surname><given-names>Laura L</given-names></name><role>Senior Editor</role><aff><institution>University of Texas at Austin</institution><country>United States</country></aff></contrib></contrib-group><author-notes><fn fn-type="con" id="equal-contrib1"><label>†</label><p>These authors contributed equally to this work</p></fn></author-notes><pub-date date-type="publication" publication-format="electronic"><day>10</day><month>11</month><year>2020</year></pub-date><pub-date pub-type="collection"><year>2020</year></pub-date><volume>9</volume><elocation-id>e61834</elocation-id><history><date date-type="received" iso-8601-date="2020-08-06"><day>06</day><month>08</month><year>2020</year></date><date date-type="accepted" iso-8601-date="2020-11-09"><day>09</day><month>11</month><year>2020</year></date></history><permissions><copyright-statement>© 2020, Buccino et al</copyright-statement><copyright-year>2020</copyright-year><copyright-holder>Buccino et al</copyright-holder><ali:free_to_read/><license xlink:href="http://creativecommons.org/licenses/by/4.0/"><ali:license_ref>http://creativecommons.org/licenses/by/4.0/</ali:license_ref><license-p>This article is distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution License</ext-link>, which permits unrestricted use and redistribution provided that the original author and source are credited.</license-p></license></permissions><self-uri content-type="pdf" xlink:href="elife-61834-v2.pdf"/><abstract><p>Much development has been directed toward improving the performance and automation of spike sorting. This continuous development, while essential, has contributed to an over-saturation of new, incompatible tools that hinders rigorous benchmarking and complicates reproducible analysis. To address these limitations, we developed SpikeInterface, a Python framework designed to unify preexisting spike sorting technologies into a single codebase and to facilitate straightforward comparison and adoption of different approaches. With a few lines of code, researchers can reproducibly run, compare, and benchmark most modern spike sorting algorithms; pre-process, post-process, and visualize extracellular datasets; validate, curate, and export sorting outputs; and more. In this paper, we provide an overview of SpikeInterface and, with applications to real and simulated datasets, demonstrate how it can be utilized to reduce the burden of manual curation and to more comprehensively benchmark automated spike sorters.</p></abstract><kwd-group kwd-group-type="author-keywords"><kwd>spike sorting</kwd><kwd>extracellular recordings</kwd><kwd>open-source software</kwd><kwd>python</kwd><kwd>reproducibility</kwd></kwd-group><kwd-group kwd-group-type="research-organism"><title>Research organism</title><kwd>Mouse</kwd><kwd>Rat</kwd></kwd-group><funding-group><award-group id="fund1"><funding-source><institution-wrap><institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100004440</institution-id><institution>Wellcome Trust</institution></institution-wrap></funding-source><award-id>214431/Z/18/Z</award-id><principal-award-recipient><name><surname>Hennig</surname><given-names>Matthias H</given-names></name></principal-award-recipient></award-group><award-group id="fund2"><funding-source><institution-wrap><institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/501100003006</institution-id><institution>ETH Zürich</institution></institution-wrap></funding-source><award-id>19–2 FEL-17</award-id><principal-award-recipient><name><surname>Buccino</surname><given-names>Alessio P</given-names></name></principal-award-recipient></award-group><award-group id="fund3"><funding-source><institution-wrap><institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/501100005366</institution-id><institution>University of Oslo</institution></institution-wrap></funding-source><award-id>PhD training (SUURPh) program</award-id><principal-award-recipient><name><surname>Buccino</surname><given-names>Alessio P</given-names></name></principal-award-recipient></award-group><award-group id="fund4"><funding-source><institution-wrap><institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/501100008724</institution-id><institution>Norwegian Ministry of Education, Research and Church Affairs</institution></institution-wrap></funding-source><principal-award-recipient><name><surname>Buccino</surname><given-names>Alessio P</given-names></name></principal-award-recipient></award-group><award-group id="fund5"><funding-source><institution-wrap><institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/501100000848</institution-id><institution>University of Edinburgh</institution></institution-wrap></funding-source><award-id>Thouron Award</award-id><principal-award-recipient><name><surname>Hurwitz</surname><given-names>Cole L</given-names></name></principal-award-recipient></award-group><funding-statement>The funders had no role in study design, data collection and interpretation, or the decision to submit the work for publication.</funding-statement></funding-group><custom-meta-group><custom-meta specific-use="meta-only"><meta-name>Author impact statement</meta-name><meta-value>SpikeInterface is an open-source software framework designed to build full analysis pipelines for extracellular recordings in a seamless and reproducible way.</meta-value></custom-meta></custom-meta-group></article-meta></front><body><sec id="s1" sec-type="intro"><title>Introduction</title><p>Extracellular recording is an indispensable tool in neuroscience for probing how single neurons and populations of neurons encode and transmit information. When analyzing extracellular recordings, most researchers are interested in the spiking activity of individual neurons, which must be extracted from the raw voltage traces through a process called <italic>spike sorting</italic>. Many laboratories perform spike sorting using fully manual techniques (e.g. XClust [<xref ref-type="bibr" rid="bib56">Mucha, 1995</xref>], SimpleClust [<xref ref-type="bibr" rid="bib81">Voigts, 2012</xref>], Plexon Offline Sorter [<xref ref-type="bibr" rid="bib66">Plexon, 2020</xref>]), but such approaches are nearly impossible to standardize due to inherent operator bias (<xref ref-type="bibr" rid="bib82">Wood et al., 2004</xref>). To alleviate this issue, spike sorting has seen decades of algorithmic and software improvements to increase both the accuracy and automation of the process (<xref ref-type="bibr" rid="bib69">Rey et al., 2015</xref>). This progress has accelerated in the past few years as high-density devices (<xref ref-type="bibr" rid="bib26">Eversmann et al., 2003</xref>; <xref ref-type="bibr" rid="bib5">Berdondini et al., 2005</xref>; <xref ref-type="bibr" rid="bib27">Frey et al., 2010</xref>; <xref ref-type="bibr" rid="bib3">Ballini et al., 2014</xref>; <xref ref-type="bibr" rid="bib58">Müller et al., 2015</xref>; <xref ref-type="bibr" rid="bib86">Yuan et al., 2016</xref>; <xref ref-type="bibr" rid="bib46">Lopez et al., 2016</xref>; <xref ref-type="bibr" rid="bib39">Jun et al., 2017a</xref>; <xref ref-type="bibr" rid="bib23">Dimitriadis et al., 2018</xref>; <xref ref-type="bibr" rid="bib2">Angotzi et al., 2019</xref>), capable of recording from hundreds to thousands of neurons simultaneously have made manual intervention impractical, increasing the demand for both accurate and scalable spike sorting algorithms (<xref ref-type="bibr" rid="bib71">Rossant et al., 2016</xref>; <xref ref-type="bibr" rid="bib64">Pachitariu et al., 2016</xref>; <xref ref-type="bibr" rid="bib45">Lee et al., 2017</xref>; <xref ref-type="bibr" rid="bib19">Chung et al., 2017</xref>; <xref ref-type="bibr" rid="bib85">Yger et al., 2018</xref>; <xref ref-type="bibr" rid="bib35">Hilgen et al., 2017</xref>; <xref ref-type="bibr" rid="bib40">Jun et al., 2017b</xref>; <xref ref-type="bibr" rid="bib22">Diggelmann et al., 2018</xref>).</p><p>Despite the development and widespread use of automatic spike sorters, there still exist no clear standards for how spike sorting should be performed or evaluated (<xref ref-type="bibr" rid="bib69">Rey et al., 2015</xref>; <xref ref-type="bibr" rid="bib4">Barnett et al., 2016</xref>; <xref ref-type="bibr" rid="bib17">Carlson and Carin, 2019</xref>; <xref ref-type="bibr" rid="bib47">Magland et al., 2020</xref>). Research labs that are beginning to experiment with high-density extracellular recordings have to choose from a multitude of spike sorters, data processing algorithms, file formats, and curation tools just to analyze their first recording. As trying out multiple spike sorting pipelines is time-consuming and technically challenging, many labs choose one and stick to it as their de facto solution (<xref ref-type="bibr" rid="bib47">Magland et al., 2020</xref>). This has led to a fragmented software ecosystem which challenges reproducibility, benchmarking, and collaboration among different research labs.</p><p>Previous work to standardize the field has focused on developing open-source frameworks that make extracellular analysis and spike sorting more accessible (<xref ref-type="bibr" rid="bib25">Egert et al., 2002</xref>; <xref ref-type="bibr" rid="bib10">Bonomini et al., 2005</xref>; <xref ref-type="bibr" rid="bib34">Hazan et al., 2006</xref>; <xref ref-type="bibr" rid="bib29">Garcia and Fourcaud-Trocmé, 2009</xref>; <xref ref-type="bibr" rid="bib32">Goldberg et al., 2009</xref>; <xref ref-type="bibr" rid="bib7">Bokil et al., 2010</xref>; <xref ref-type="bibr" rid="bib84">Xq et al., 2011</xref>; <xref ref-type="bibr" rid="bib8">Bologna et al., 2010</xref>; <xref ref-type="bibr" rid="bib63">Oostenveld et al., 2011</xref>; <xref ref-type="bibr" rid="bib44">Kwon et al., 2012</xref>; <xref ref-type="bibr" rid="bib48">Mahmud et al., 2012</xref>; <xref ref-type="bibr" rid="bib9">Bongard et al., 2014</xref>; <xref ref-type="bibr" rid="bib68">Regalia et al., 2016</xref>; <xref ref-type="bibr" rid="bib87">Zhang et al., 2017</xref>; <xref ref-type="bibr" rid="bib59">Nasiotis et al., 2019a</xref>). While useful tools in their own right, these frameworks only implement a limited suite of spike sorting technologies since their main focus is to provide <italic>entire</italic> extracellular analysis pipelines (spike trains, LFPs, EEG, and more). Moreover, these tools do little to improve the evaluation and comparison of spike sorting performance which is still a relatively unsolved problem in electrophysiology. An exception to this is SpikeForest (<xref ref-type="bibr" rid="bib47">Magland et al., 2020</xref>), a recently developed open-source software suite that benchmarks 10 automated spike sorting algorithms against an extensive database of ground-truth recordings (SpikeForest makes use of SpikeInterface in many of its core capabilities [file IO, preprocessing, spike sorting]). Despite these developments, there exists a need for an up-to-date spike sorting framework that can standardize the usage and evaluation of modern algorithms.</p><p>In this paper, we introduce SpikeInterface, the first open-source, Python-based framework exclusively designed to encapsulate all steps in the spike sorting pipeline (we utilize Python as it is open-source, free, and increasingly popular in the neuroscience community; <xref ref-type="bibr" rid="bib57">Muller et al., 2015</xref>; <xref ref-type="bibr" rid="bib31">Gleeson et al., 2017</xref>). The goals of this software framework are five-fold.</p><list list-type="order"><list-item><p>To increase the accessibility and standardization of modern spike sorting technologies by providing users with a simple application programming interface (API) and graphical user interface (GUI) that exist within a continuously integrated code-base.</p></list-item><list-item><p>To make spike sorting pipelines fully reproducible by capturing the entire provenance of the data flow during run time.</p></list-item><list-item><p>To make data access and analysis both memory and computation-efficient by utilizing memory-mapping, parallelization, and high-performance computing platforms.</p></list-item><list-item><p>To encourage the sharing of datasets, results, and analysis pipelines by providing full compatibility with standardized file formats such as Neurodata Without Borders (NWB) (<xref ref-type="bibr" rid="bib80">Teeters et al., 2015</xref>; <xref ref-type="bibr" rid="bib74">Ruebel et al., 2019</xref>) and the Neuroscience Information Exchange (NIX) Format (<xref ref-type="bibr" rid="bib62">NIX, 2015</xref>).</p></list-item><list-item><p>To supply the most comprehensive suite of benchmarking capabilities available for spike sorting in order to guide future usage and development.</p></list-item></list><p>In the remainder of this article, we showcase the numerous capabilities of SpikeInterface by performing an in-depth meta-analysis of preexisting spike sorters. This analysis includes quantifying the agreement among six modern spike sorters for dense probe recordings, benchmarking each sorter on ground truth, and introducing a consensus-based technique to potentially improve performance and enable automated curation. Afterwards, we present an overview of the codebase and how its interconnected components can be utilized to build full spike sorting pipelines. Finally, we contrast SpikeInterface with preexisting analysis frameworks and outline future directions.</p></sec><sec id="s2" sec-type="results"><title>Results</title><p>In this section, we perform a meta-analysis of six modern spike sorters on real and simulated datasets. This meta-analysis includes quantifying agreement among the sorters, benchmarking each sorter on ground truth, and investigating whether it is possible to combine outputs from multiple spike sorters to improve overall performance and to reduce the burden of manual curation. All analyses are done with <monospace>spikeinterface</monospace> version 0.10.0 which is available on <monospace>PyPI</monospace> (<ext-link ext-link-type="uri" xlink:href="https://pypi.org/project/spikeinterface/">https://pypi.org/project/spikeinterface/</ext-link>). The code to perform this analysis and produce all figures can be found at <ext-link ext-link-type="uri" xlink:href="https://spikeinterface.github.io/">https://spikeinterface.github.io/</ext-link> which also showcases other experiments performed using SpikeInterface. The datasets are publicly available in NWB format on the DANDI archive (<ext-link ext-link-type="uri" xlink:href="https://gui.dandiarchive.org/#/dandiset/000034/draft">https://gui.dandiarchive.org/#/dandiset/000034/draft</ext-link>).</p><sec id="s2-1"><title>Spike sorters show low agreement for the same high-density dataset</title><p>The dataset we use in this analysis is a Neuropixels recording from a head-fixed mouse acquired at the Allen Institute for Brain Science (<xref ref-type="bibr" rid="bib78">Siegle et al., 2019a</xref>; <xref ref-type="bibr" rid="bib1">Allen Institute for Brain Science, 2019</xref> dataset ID: 766640955; probe ID: 77359232). The recording has 246 active recording channels (the remaining of the 384 Neuropixels channels were either not inserted in the brain tissue or had a firing rate below 0.1 Hz), and a sampling frequency of 30 kHz. The recording’s duration was trimmed to 15 min. The probe records from part of the cortex (V1), the hippocampus (CA1), the dentate gyrus, and the thalamus (LP). During the experiment, the mouse was presented with a variety of visual stimuli while freely running on a rotating disk (for more details see <xref ref-type="bibr" rid="bib78">Siegle et al., 2019a</xref>). An activity map of the probe and a 1 s snippet of the traces on 10 channels are shown in <xref ref-type="fig" rid="fig1">Figure 1A</xref>. The notebook for reproducing the results for this section and the last section of the Results can be viewed at <ext-link ext-link-type="uri" xlink:href="https://spikeinterface.github.io/blog/ensemble-sorting-of-a-neuropixels-recording">https://spikeinterface.github.io/blog/ensemble-sorting-of-a-neuropixels-recording</ext-link>.</p><fig-group><fig id="fig1" position="float"><label>Figure 1.</label><caption><title>Comparison of spike sorters on a real Neuropixels dataset.</title><p>(<bold>A</bold>) A visualization of the activity on the Neuropixels array (top, color indicates spike rate estimated on each channel evaluated with threshold detection) and of traces from the Neuropixels recording (below). (<bold>B</bold>) The number of detected units for each of the six spike sorters (HS = HerdingSpikes2, KS = Kilosort2, IC = IronClust, TDC = Tridesclous, SC = SpyKING Circus, HDS = HDSort). (<bold>C</bold>) The total number of units for which <italic>k</italic> sorters agree (unit agreement is defined as 50% spike match). (<bold>D</bold>) The number of units (per sorter) for which <italic>k</italic> sorters agree; most sorters find many units that other sorters do not.</p></caption><graphic mime-subtype="tiff" mimetype="image" xlink:href="elife-61834-fig1-v2.tif"/></fig><fig id="fig1s1" position="float" specific-use="child-fig"><label>Figure 1—figure supplement 1.</label><caption><title>Examples of matched units in a Neuropixels recording.</title><p>The illustration shows units from six spike sorters that were matched by spike train comparison. Panel (<bold>A</bold>) shows a unit with high agreement score (0.97), and panel (<bold>B</bold>) a lower agreement score (0.69). In both panels, the top plot shows the spike trains (the first 20 s of the recording) found by each sorter, and below unit templates (estimated from waveforms of 100 spikes randomly sampled from each unit) are shown.</p></caption><graphic mime-subtype="tiff" mimetype="image" xlink:href="elife-61834-fig1-figsupp1-v2.tif"/></fig><fig id="fig1s2" position="float" specific-use="child-fig"><label>Figure 1—figure supplement 2.</label><caption><title>Cumulative histogram of agreement scores (above threshold of .5 that defines a match) for the ensemble sorting of the simulated ground-truth dataset.</title><p>This analysis was performed with the six chosen sorters and highlights how over 80% of the matched units had an agreement score greater than 0.8.</p></caption><graphic mime-subtype="tiff" mimetype="image" xlink:href="elife-61834-fig1-figsupp2-v2.tif"/></fig><fig id="fig1s3" position="float" specific-use="child-fig"><label>Figure 1—figure supplement 3.</label><caption><title>Comparison of spike sorters on a Neuropixels recording.</title><p>This dataset contains spontaneous neural activity from the rat cortex (motor and somatosensory areas) by <xref ref-type="bibr" rid="bib50">Marques-Smith et al., 2018a</xref>; <xref ref-type="bibr" rid="bib51">Marques-Smith et al., 2018b</xref> (dataset spe-c1). The dataset is also available at <ext-link ext-link-type="uri" xlink:href="https://gui.dandiarchive.org/#/dandiset/000034/draft">https://gui.dandiarchive.org/#/dandiset/000034/draft</ext-link>. (<bold>A</bold>) A visualization of the activity on the Neuropixels array (top, color indicates spike rate estimated on each channel evaluated with threshold detection) and of traces from the Neuropixels recording (below). (<bold>B</bold>) The number of detected units for each of the six spike sorters (HS = HerdingSpikes2, KS = Kilosort2, IC = IronClust, TDC = Tridesclous, SC = SpyKING Circus, HDS = HDSort). (<bold>C</bold>) The total number of units for which <italic>k</italic> sorters agree (unit agreement is defined as 50% spike match). (<bold>D</bold>) The number of units (per sorter) for which <italic>k</italic> sorters agree; Most sorters find many units that other sorters do not. The analysis notebook for this analysis can be found at <ext-link ext-link-type="uri" xlink:href="https://spikeinterface.github.io/blog/ensemble-sorting-of-a-neuropixels-recording-2/">https://spikeinterface.github.io/blog/ensemble-sorting-of-a-neuropixels-recording-2/</ext-link>.</p></caption><graphic mime-subtype="tiff" mimetype="image" xlink:href="elife-61834-fig1-figsupp3-v2.tif"/></fig><fig id="fig1s4" position="float" specific-use="child-fig"><label>Figure 1—figure supplement 4.</label><caption><title>Comparison of spike sorters on a Biocam recording from a mouse retina.</title><p>This retina recording (<xref ref-type="bibr" rid="bib35">Hilgen et al., 2017</xref>) has 1’024 channels in a square configuration, and a sampling frequency of 23199 Hz. The dataset can be found at <ext-link ext-link-type="uri" xlink:href="https://gui.dandiarchive.org/#/dandiset/000034/draft">https://gui.dandiarchive.org/#/dandiset/000034/draft</ext-link>. Only four spike sorters were capable of processing this data set (HS = HerdingSpikes2, KS = Kilosort2, IC = IronClust, HDS = HDSort). (<bold>A</bold>) A visualization of the activity on the Biocam array (top, color indicates spike rate estimated on each channel evaluated with threshold detection) and of traces from the recording (below). (<bold>B</bold>) The number of detected units for each of the four spike sorters. (<bold>C</bold>) The total number of units for which <italic>k</italic> sorters agree (unit agreement is defined as 50% spike match). (<bold>D</bold>) The number of units (per sorter) for which <italic>k</italic> sorters agree; most sorters find many units that other sorters do not. The analysis notebook for this analysis can be found at <ext-link ext-link-type="uri" xlink:href="https://spikeinterface.github.io/blog/ensemble-sorting-of-a-3brain-biocam-recording-from-a-retina/">https://spikeinterface.github.io/blog/ensemble-sorting-of-a-3brain-biocam-recording-from-a-retina/</ext-link>.</p></caption><graphic mime-subtype="tiff" mimetype="image" xlink:href="elife-61834-fig1-figsupp4-v2.tif"/></fig></fig-group><p>For this analysis, we select six different spike sorters: HerdingSpikes2 (<xref ref-type="bibr" rid="bib35">Hilgen et al., 2017</xref>), Kilosort2 (<xref ref-type="bibr" rid="bib65">Pachitariu et al., 2018</xref>), IronClust (<xref ref-type="bibr" rid="bib40">Jun et al., 2017b</xref>), SpyKING Circus (<xref ref-type="bibr" rid="bib85">Yger et al., 2018</xref>), Tridesclous (<xref ref-type="bibr" rid="bib30">Garcia and Pouzat, 2015</xref>), and HDSort (<xref ref-type="bibr" rid="bib22">Diggelmann et al., 2018</xref>) (the versions for each spike sorter are as follows: SpyKING Circus==0.9.7, Tridesclous==1.6.0, HerdingSpikes2==0.3.7, IronClust==5.9.8, Kilosort2==GitHub commit 48bf2b81d8ad, HDSort==1.0.1). As most of these algorithms have been tuned rigorously on multiple ground-truth datasets (including the recent large-scale evaluation from <xref ref-type="bibr" rid="bib47">Magland et al., 2020</xref>), we fix their parameters to default values to allow for straightforward comparison. We do not include Klusta (<xref ref-type="bibr" rid="bib71">Rossant et al., 2016</xref>), WaveClus (<xref ref-type="bibr" rid="bib18">Chaure et al., 2018</xref>), Kilosort (<xref ref-type="bibr" rid="bib64">Pachitariu et al., 2016</xref>), or MountainSort4 (<xref ref-type="bibr" rid="bib19">Chung et al., 2017</xref>) in this analysis as Klusta can only handle up to 64 channels, WaveClus is designed for low channel count probes, Kilosort is superseded by Kilosort2, and MountainSort4’s latest verion is currently not optimized for high channel counts, scaling quadratically with the number of channels.</p><p>In <xref ref-type="fig" rid="fig1">Figure 1B</xref>, we show the number of units that each of the six sorters output. Immediately, we observe large variability among the sorters, with Tridesclous (TDC) finding the least units (187) and SpyKING Circus (SC) finding the most units (628). HerdingSpikes2 finds 210 units; Kilosort2 finds 446 units; IronClust finds 233 units; and HDSort finds 317 units. From this result, we can see that there is no clear consensus among the sorters on the number of neurons in the recording (without performing extensive manual curation).</p><p>Next, we compare the unit spike trains found by each sorter to determine the level of agreement among the different algorithms (see the SpikeComparison Section of the Methods for how this is done). In <xref ref-type="fig" rid="fig1">Figure 1C</xref>, we visualize the total number of units for which <italic>k</italic> sorters agree (unit agreement is defined as a 50% spike train match; the time window to consider spikes as matching is 0.4 ms). <xref ref-type="fig" rid="fig1s1">Figure 1—figure supplement 1</xref> shows spike trains and templates for two sample matched units (one with a higher - 0.97 - and one with a lower agreement - 0.69). Of the 2031 total detected units, all six sorters agree on <italic>just 33 of the units</italic>. This is surprisingly low given the relatively undemanding criteria of a 50% spike train match. We also find that two or more sorters agree on just 263 of the total units. To further break down the disagreement between spike sorters, <xref ref-type="fig" rid="fig1">Figure 1D</xref> shows the number of units per sorter for which <italic>k</italic> other sorters agree. For most sorters, over 50% of the units that they find do not match with any other sorter (with the exceptions of Ironclust and Tridesclous). For agreed-upon units, around 80% of the agreement scores are 0.8 or higher, indicating that matched units typically have high spike train agreement (<xref ref-type="fig" rid="fig1s2">Figure 1—figure supplement 2</xref>).</p><p>The analysis performed on this dataset suggests that agreement among spike sorters is startlingly low. To corroborate this finding, we repeat the same analysis using different datasets including a Neuropixels recordings from another lab and an in vitro retinal recording from a planar, high-density array. In both cases, we find similar disagreement among the sorters (<xref ref-type="fig" rid="fig1s3">Figure 1—figure supplements 3</xref> and <xref ref-type="fig" rid="fig1s4">4</xref>). The notebooks for these analyses can be viewed at <ext-link ext-link-type="uri" xlink:href="https://spikeinterface.github.io/blog/ensemble-sorting-of-a-neuropixels-recording-2/">https://spikeinterface.github.io/blog/ensemble-sorting-of-a-neuropixels-recording-2/</ext-link> and <ext-link ext-link-type="uri" xlink:href="https://spikeinterface.github.io/blog/ensemble-sorting-of-a-3brain-biocam-recording-from-a-retina/">https://spikeinterface.github.io/blog/ensemble-sorting-of-a-3brain-biocam-recording-from-a-retina/</ext-link>.</p><p>This low agreement raises the following question: how many of the total outputted units actually correspond to real neurons? To explore this question, we turn to simulation where the ground-truth spiking activity is known a priori.</p></sec><sec id="s2-2"><title>Evaluating spike sorters on a simulated dataset</title><p>In this analysis, we simulate a 10 min Neuropixels recording using the MEArec Python package (<xref ref-type="bibr" rid="bib16">Buccino and Einevoll, 2020</xref>). The recording contains the spiking activity of 250 biophysically detailed neurons (200 excitatory and 50 inhibitory cells from the Neocortical Micro Circuit Portal; <xref ref-type="bibr" rid="bib67">Ramaswamy et al., 2015</xref>; <xref ref-type="bibr" rid="bib49">Markram et al., 2015</xref>) that exhibit independent Poisson firing patterns. The recording also has an additive Gaussian noise with 10 μV standard deviation. A visualization of the simulated activity map and extracellular traces from the Neuropixels probe is shown in <xref ref-type="fig" rid="fig2">Figure 2A</xref>. A histogram of the signal-to-noise ratios (SNR) for the ground-truth units is shown in <xref ref-type="fig" rid="fig2">Figure 2B</xref>. The notebook for reproducing the results for this and the next section can be viewed at <ext-link ext-link-type="uri" xlink:href="https://spikeinterface.github.io/blog/ground-truth-comparison-and-ensemble-sorting-of-a-synthetic-neuropixels-recording/">https://spikeinterface.github.io/blog/ground-truth-comparison-and-ensemble-sorting-of-a-synthetic-neuropixels-recording/</ext-link>.</p><fig-group><fig id="fig2" position="float"><label>Figure 2.</label><caption><title>Evaluation of spike sorters on a simulated Neuropixels dataset.</title><p>(<bold>A</bold>) A visualization of the activity on and traces from the simulated Neuropixels recording. (<bold>B</bold>) The signal-to-noise ratios (SNR) for the ground-truth units. (<bold>C</bold>) The number of detected units for each of the six spike sorters (HS = HerdingSpikes2, KS = Kilosort2, IC = IronClust, TDC = Tridesclous, SC = SpyKING Circus, HDS = HDSort). (<bold>D</bold>) The accuracy, precision, and recall of each sorter on the ground-truth units. (<bold>E</bold>) A breakdown of the detected units for each sorter (precise definitions of each unit type can be found in the SpikeComparison Section of the Methods). The horizontal dashed line indicates the number of ground-truth units (250).</p></caption><graphic mime-subtype="tiff" mimetype="image" xlink:href="elife-61834-fig2-v2.tif"/></fig><fig id="fig2s1" position="float" specific-use="child-fig"><label>Figure 2—figure supplement 1.</label><caption><title>Evaluation of spike sorters performance metrics.</title><p>(<bold>A</bold>) Precision versus recall for the ground-truth comparison the simulated dataset. Some sorters seem to favor precision (HerdingSpikes, SpyKING Circus, HDSort), others instead have higher recall (Ironclust) or score well on both measures (Kilosort2). Tridesclous does not show a bias towards precision or recall. (<bold>B</bold>) Accuracy versus SNR. All the spike sorters (except Kilosort2) show a strong dependence of performance with respect to the SNR of the ground-truth units. Kilosort2, remarkably, is capable of achieving a high accuracy also for low-SNR units.</p></caption><graphic mime-subtype="tiff" mimetype="image" xlink:href="elife-61834-fig2-figsupp1-v2.tif"/></fig></fig-group><p>We run the same six spike sorters on the simulated dataset, keeping the parameters the same as those used on the real Neuropixels dataset. We then utilize SpikeInterface to evaluate each spike sorter on the ground-truth dataset. Afterwards, we repeat the agreement analysis from the previous section to diagnose the low agreement among sorters.</p><p>The main result of the ground-truth evaluation is summarized in <xref ref-type="fig" rid="fig2">Figure 2</xref>. As can be seen in <xref ref-type="fig" rid="fig2">Figure 2C</xref>, the sorters, again, have a large discrepancy in the number of detected units. The number of detected units range from the 189 units found by Tridesclous to the 458 units found by HDSort. HerdingSpikes2 finds 233 units; Kilosort2 finds 415 units; IronClust finds 283 units; and SpyKING Circus finds 343 units. We again see that there is no clear consensus among the sorters on the number of neurons in the simulated recording.</p><p>In <xref ref-type="fig" rid="fig2">Figure 2D</xref>, the accuracy, precision, and recall of all the ground-truth units are plotted for each spike sorter. Some sorters tend to favor precision over recall while others do the opposite (<xref ref-type="fig" rid="fig2s1">Figure 2—figure supplement 1A</xref>). Moreover, the accuracy is modulated by the SNR of the ground-truth units for all spike sorters except Kilosort2 which achieves an almost perfect performance on the low-SNR units (<xref ref-type="fig" rid="fig2s1">Figure 2—figure supplement 1B</xref>). While most spike sorters have a wide range of scores for each metric, Kilosort2 attains significantly higher scores than the rest of the spike sorters for most ground-truth units.</p><p><xref ref-type="fig" rid="fig2">Figure 2E</xref> shows the breakdown of detected units for each spike sorter. Each unit is classified as <italic>well-detected</italic>, <italic>false positive</italic>, <italic>redundant</italic>, and/or <italic>overmerged</italic> by SpikeInterface (the definitions of each unit type can be found in the SpikeComparison Section of the Materials and methods). This plot, interestingly, may shed some light on the remarkable accuracy of Kilosort2. While Kilosort2 has the most well-detected units (245), this comes at the cost of a high percentage of false positive (147) and redundant (21) units (The high-rate of false positive/redundant units persists, but is alleviated, even when using Kilosort2’s automated curation step which removes units that have &gt;20% estimated contamination rate [computed from the refractory period violations﻿]. In that case the number of well-detected units is 241, false positives are 93, and redundant units are 18. In both cases two overmerged units are found). Notably, Tridesclous detects very few false positive/redundant units while still finding many well-detected units. HDSort, on the flip side, finds many more false positive units than any other spike sorter. For a comprehensive comparison of spike sorter performance on both real and simulated datasets, we refer the reader to the related SpikeForest project (<ext-link ext-link-type="uri" xlink:href="https://spikeforest.flatironinstitute.org/">https://spikeforest.flatironinstitute.org/</ext-link>) (<xref ref-type="bibr" rid="bib47">Magland et al., 2020</xref>).</p></sec><sec id="s2-3"><title>Low-agreement units are mainly false positives</title><p>Similarly to the real Neuropixels dataset, we compare the agreement among the different spike sorters on the simulated dataset. Again, we observe a large disagreement among the spike sorting outputs with only 139 units of the 1921 total units (7.24%) being in agreement among all sorters (<xref ref-type="fig" rid="fig3">Figure 3A</xref>). We can break down the overall agreement by sorter (<xref ref-type="fig" rid="fig3">Figure 3B</xref>), highlighting that some sorters are more prone to finding low agreement units (HDSort, SpyKING Circus, Kilosort2) than other sorters (HerdingSpikes2, Ironclust, Tridesclous).</p><fig-group><fig id="fig3" position="float"><label>Figure 3.</label><caption><title>Comparison of spike sorters on a simulated Neuropixels dataset.</title><p>(<bold>A</bold>) The total number of units for which <italic>k</italic> sorters agree (unit agreement is defined as 50% spike match). (<bold>B</bold>) The number of units (per sorter) for which <italic>k</italic> sorters agree; Most sorters find many units that other sorters do not. (HS = HerdingSpikes2, KS = Kilosort2, IC = IronClust, TDC = Tridesclous, SC = SpyKING Circus, HDS = HDSort) (<bold>C</bold>) Number of matched ground-truth units (blue) and false positive units (red) found by each sorter on which <italic>k</italic> sorters agree upon. Most of the false positive units are only found by a single sorter. Number of false positive units found by <inline-formula><mml:math id="inf1"><mml:mrow><mml:mi>k</mml:mi><mml:mo>≥</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:math></inline-formula> sorters: HS = 4, KS = 4, IC = 4, SC = 2, TDC = 1, HDS = 2. (<bold>D</bold>) Signal-to-noise ratio (SNR) of ground-truth unit with respect to the number of <italic>k</italic> sorters agreement. Results are split by sorter.</p></caption><graphic mime-subtype="tiff" mimetype="image" xlink:href="elife-61834-fig3-v2.tif"/></fig><fig id="fig3s1" position="float" specific-use="child-fig"><label>Figure 3—figure supplement 1.</label><caption><title>The fractions of predicted false and true positive units from ensembles using different numbers of sorters.</title><p>All possible subsets of two to five of the six sorters were tested by removing corresponding units from the full sorting comparison. Each dot corresponds to one unique combination of sorters. This analysis shows that false positive units are well-identified using pairs of sorters (almost all false positive units are only found by one sorter), indicating that the sorters are biased in different ways. However, the fraction of true positives in the ensemble (at least two sorters agree) can be significantly lower when only pairs of sorters are used. This is explained by the fact that, for this dataset, a fraction of true positive units are only found by one sorter (as expected since the quality of detection and isolation of the units varies among sorters). In contrast, using four or more sorters reliably identifies most true positive units. For two sorters, the most reliable identification of true positives was achieved by combining two of Kilosort2, Ironclust, and HDSort.</p></caption><graphic mime-subtype="tiff" mimetype="image" xlink:href="elife-61834-fig3-figsupp1-v2.tif"/></fig><fig id="fig3s2" position="float" specific-use="child-fig"><label>Figure 3—figure supplement 2.</label><caption><title>The SNR of all units found by Kilosort2 in the ground-truth data separated into those with and without matches in the ground-truth spike trains.</title><p>Many detected false positive units have an SNR above the mode of the ground-truth SNR, indicating that SNR is not a good measure to separate false and true positives in this case.</p></caption><graphic mime-subtype="tiff" mimetype="image" xlink:href="elife-61834-fig3-figsupp2-v2.tif"/></fig></fig-group><p>Given that we know the ground-truth spiking activity of the simulated recording, we can now investigate whether low-agreement units actually correspond to ground-truth units or if they are falsely detected (false positive) units. In <xref ref-type="fig" rid="fig3">Figure 3C</xref>, bar plots for each sorter show the number of matched ground-truth units (blue) and false positive units (red) in relation to the ensemble agreement (1 - no agreement, 6 - full agreement). The plots show that (almost) all false positive units are ones that are found by only a single sorter (not matched with any other sorters), while most real units are matched by more than one sorter. We also assessed how well false positive units can be identified using fewer sorters (<xref ref-type="fig" rid="fig3s1">Figure 3—figure supplement 1</xref>). This analysis showed that using a pair of sorters is sufficient to isolate almost all false positive units in each sorter, yet when fewer than four sorter outputs are compared, a significant fraction of true positive units found by only one sorter can be wrongly classified as false positives with this approach. For two sorters, the most reliable identification of true positives for this dataset was achieved by combining Kilosort2 and Ironclust (96% and 95% false positive and true positive detection rate, respectively). In <xref ref-type="fig" rid="fig3">Figure 3D</xref>, we display the signal-to-noise ratio (SNR) as a function of the ensemble agreement. This shows, as expected, that higher SNR units have higher agreement among sorters. In other words, units with a large amplitude (high SNR) are easier to detect and more consistently found by many sorters. Additionally, we tested if SNR can be used to distinguish between false and true positive units, as noise may be wrongly detected as events with low SNR. We found that for Kilosort2’s output, which is best matched with ground-truth spike trains, SNR is not a good predictor of false positives (<xref ref-type="fig" rid="fig3s2">Figure 3—figure supplement 2</xref>) - many false positives had a high estimated SNR. Taken together, these results suggest that the ensemble agreement among multiple sorters can be used to remove false positive units from each of the sorter outputs or to inform their subsequent manual curation.</p></sec><sec id="s2-4"><title>Consensus units highly overlap with manually curated ones</title><p>We next investigate the ensemble agreement among the sorters on the real Neuropixels recording presented in <xref ref-type="fig" rid="fig1">Figure 1</xref>. As there is no ground-truth information in this setting to identify false positives, we turn to manually curated sorting outputs. Two experts (which we will refer to as C1 and C2) manually curate the spike sorting output of Kilosort2 using the Phy software. During this curation step, the two experts label the sorted units as false positives or real units by rejecting, splitting, merging, or accepting units according to spike features (<xref ref-type="bibr" rid="bib72">Rossant and Harris, 2013</xref>).</p><p><xref ref-type="fig" rid="fig4">Figure 4A</xref> shows the agreement between expert 1 (C1) and expert 2 (C2). While there are some discrepancies (as expected when manually curating spike sorting results; <xref ref-type="bibr" rid="bib82">Wood et al., 2004</xref>), most of the curated units (226 out of 351–64.2%) are agreed upon by both experts. Notably, 174 units found by Kilosort2 are discarded by both experts, indicating a large number of false positive units.</p><fig id="fig4" position="float"><label>Figure 4.</label><caption><title>Comparison between consensus and manually curated outputs.</title><p>(<bold>A</bold>) Venn diagram showing the agreement between Curator 1 and 2. 174 units are discarded by both curators from the Kilsort2 output. (<bold>B</bold>) Percent of matched units between the output of each sorter and C1 (red) and C2 (blue). Ironclust has the highest match with both curated datasets. (<bold>C</bold>) Similar to C, but using the consensus units (units agreed upon by at least two sorters - <inline-formula><mml:math id="inf2"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mi>k</mml:mi><mml:mo>≥</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:mstyle></mml:math></inline-formula>). The percent of matching with curated datasets is now above 70% for all sorters, with Kilosort2 having the highest match (KS<sub><italic>c</italic></sub> ∩C1 = 84.55%, KS<sub><italic>c</italic></sub>∩C2 = 89.55%), slightly higher than Ironclust (IC<sub><italic>c</italic></sub> ∩ C1 = 82.63%, IC<sub><italic>c</italic></sub> ∩ C2 = 83.83%). (<bold>D</bold>) Percent of non-consensus units (<inline-formula><mml:math id="inf3"><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:math></inline-formula>) matched to curated datasets. The only significant overlap is between Curator one and Kilosort2, with a percent around 18% (KS<sub>nc</sub> ∩ C1 = 18.58%, KS<sub>nc</sub> ∩ C2 = 24.34%).</p></caption><graphic mime-subtype="tiff" mimetype="image" xlink:href="elife-61834-fig4-v2.tif"/></fig><p>We then compare the output of each of the spike sorters to C1 and C2 and find that, in general, only a small percentage of units outputted by any single sorter is matched to the curated results (<xref ref-type="fig" rid="fig4">Figure 4</xref>). The highest percentage match is actually IronClust which is surprising given that the initial sorting output was curated from Kilosort2’s output (IC ∩ C1 = 59.83%, IC ∩ C2 = 61.1%, KS ∩ C1 = 50.67%, KS ∩ C2 = 56.25%).</p><p>Next, for each sorter, we take all the units that are matched by at least one other sorter (<italic>consensus units</italic>, <inline-formula><mml:math id="inf4"><mml:mrow><mml:mi>k</mml:mi><mml:mo>≥</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:math></inline-formula>) and all units that are found by only that sorter (<italic>non-consensus units</italic>, <inline-formula><mml:math id="inf5"><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:math></inline-formula>). We refer to the consensus units of a sorter as Sorter<sub><italic>c</italic></sub> and the non-consensus units of a sorter as Sorter<sub>nc</sub>. In <xref ref-type="fig" rid="fig4">Figure 4C</xref>, we show the match percentage between consensus units and curated units. The average match percentage is above 70% for all sorters showing that there is a large agreement between the manually curated outputs and the consensus-based output. Kilosort2 has the highest match (KS<sub><italic>c</italic> </sub>∩ C1 = 84.55%, KS<sub><italic>c</italic></sub> ∩ C2 = 89.55%), slightly higher than Ironclust (IC<sub><italic>c</italic></sub> ∩ C1 = 82.63%, IC<sub><italic>c</italic></sub> ∩ C2 = 83.83%). Conversely, the percentage of non-consensus units matched to curated units is very small (<xref ref-type="fig" rid="fig4">Figure 4D</xref>) for all sorters.</p><p>Overall, this analysis suggests that a consensus-based approach to curation could allow for identification of real neurons from spike sorted data. Despite differences among the sorters with respect to the number of detected neurons and the quality of their isolation (as demonstrated by the ground-truth analysis), the consensus-based approach has good agreement with hand-curated data and appears to be less variable as illustrated by the small but significant disagreement between the two curators.</p></sec></sec><sec id="s3" sec-type="materials|methods"><title>Materials and methods</title><sec id="s3-1"><title>Overview of SpikeInterface</title><p>SpikeInterface consists of five main Python packages designed to handle different steps in the spike sorting pipeline: (i) <monospace>spikeextractors</monospace>, for extracellular recording, sorting output, and probe file I/O; (ii) <monospace>spiketoolkit</monospace> for low level processing such as pre-processing, post-processing, validation, curation; (iii) <monospace>spiketoolkit</monospace> for spike sorting algorithms and job launching functionality; (iv) <monospace>spikecomparison</monospace> for sorter comparison, ground-truth comparison, and ground-truth studies; and (v) <monospace>spikewidgets</monospace>, for data visualization.</p><p>These five packages can be installed and used through the <monospace>spikeinterface</monospace> metapackage, which contains stable versions of all five packages as internal modules (see <xref ref-type="fig" rid="fig5">Figure 5</xref>). With these five packages (or our meta-package), users can build, run, and evaluate full spike sorting pipelines in a reproducible and standardized way. In the following subsections, we present an overview of, and a code snippet for, each package.</p><fig id="fig5" position="float"><label>Figure 5.</label><caption><title>Overview of SpikeInterface’s Python packages, their different functionalities, and how they can be accessed by our meta-package, spikeinterface.</title></caption><graphic mime-subtype="tiff" mimetype="image" xlink:href="elife-61834-fig5-v2.tif"/></fig><sec id="s3-1-1"><title>SpikeExtractors</title><p>The <monospace>spikeextractors</monospace> package (<ext-link ext-link-type="uri" xlink:href="https://github.com/SpikeInterface/spikeextractors">https://github.com/SpikeInterface/spikeextractors</ext-link>; <xref ref-type="bibr" rid="bib11">Buccino et al., 2020a</xref>) is designed to alleviate issues of any file format incompatibility within spike sorting without creating additional file formats. To this end, <monospace>spikeextractors</monospace> contains two core Python objects that can directly and uniformly access all spike sorting related files: the <monospace>RecordingExtractor</monospace> and the <monospace>SortingExtractor</monospace>.</p><p>The <monospace>RecordingExtractor</monospace> directly interfaces with an extracellular recording and can query it for four primary pieces of information: (i) the extracellular recorded traces; (ii) the sampling frequency; (iii) the number of samples, or frames, in the recording; and (iv) the channel indices of the recording electrodes. These data are shared across all extracellular recordings allowing for standardized retrieval functions. In addition, a <monospace>RecordingExtractor</monospace> may store extra information about the recording device as 'channel properties’ which are key–value pairs. This includes properties such as 'location’, 'group’, and 'gain’ which are either provided by certain extracellular file formats, loaded manually by the user, or loaded automatically with our built-in probe file (.prb or .csv) reader. Taken together, the <monospace>RecordingExtractor</monospace> is an object representation of an extracellular recording and the associated probe configuration.</p><p>The <monospace>SortingExtractor</monospace> directly interfaces with a sorting output and can query it for two primary pieces of information: (i) the unit indices and (ii) the spike train of each unit. Again, these data are shared across all sorting outputs. A <monospace>SortingExtractor</monospace> may also store extra information about the sorting output as either 'unit properties' or 'unit spike features', key–value pairs which store information about the individual units or the individual spikes of each unit, respectively. This extra information is either loaded from the sorting output, loaded manually by the user, or loaded automatically with built-in post-processing tools (discussed in the SpikeToolkit Section). Taken together, the <monospace>SortingExtractor</monospace> is an object representation of a sorting output along with any associated post-processing.</p><p>Critically, both <monospace>Extractor</monospace> types can lazily query the underlying datasets for information as it is required, reducing their memory footprint and allowing their use for long, large-scale recordings. While this is the default operation mode, <monospace>Extractors</monospace> can also cache parts of the dataset in temporary binary files to enable faster downstream computations at the cost of higher memory usage. All extracted data is converted into either native Python data structures or into <monospace>numpy</monospace> arrays for immediate use in Python. Additionally, each <monospace>Extractor</monospace> can be dumped to and loaded from a <monospace>json</monospace> file, a <monospace>pickle</monospace> file, or a dictionary, ensuring full provenance and allowing for parallel processing.</p><p>The following code snippet illustrates how <monospace>Extractors</monospace> can be used to retrieve raw traces from an extracellular recording and spike trains from a sorting output:<code xml:space="preserve">import spikeinterface.extractors as se
recording = se.MyFormatRecordingExtractor(file_path='myrecording')
sorting = se.MyFormatSortingExtractor(file_path=’mysorting’)
traces = recording.get_traces() # 2D numpy array (channels x time)
spike_train = sorting.get_unit_spike_train(unit_id=1) # 1D numpy array</code></p><p>Along with using <monospace>Extractors</monospace> for single files, it is possible to access data from multiple files or portions of files with the <monospace>MultiExtractors</monospace> and <monospace>SubExtractors</monospace>, respectively. Both have identical functionality to normal <monospace>Extractors</monospace> and can be used and treated in the same ways, simplifying, for instance, the combined analysis of a recording split into multiple files.</p><p>As of this moment, SpikeInterface supports 19 extracellular recording formats and 18 sorting output formats. The available file formats can be found in <xref ref-type="table" rid="table1">Table 1</xref>. Although this covers many popular formats in extracellular analysis (including Neurodata Without Borders, <xref ref-type="bibr" rid="bib80">Teeters et al., 2015</xref>, and <xref ref-type="bibr" rid="bib62">NIX, 2015</xref>), we expect the number of formats to grow with future versions as adding a new format is as simple as making a new <monospace>Extractor</monospace> subclass for it. We also have started to integrate NEO’s (<xref ref-type="bibr" rid="bib28">Garcia et al., 2014</xref>) I/O system into <monospace>spikeextractors</monospace> which allow SpikeInterface to support many more open-source and proprietary file formats without changing any functionality. Already, two recording formats have been added through our NEO integration (<xref ref-type="bibr" rid="bib61">Neuralynx, 2020</xref> and <xref ref-type="bibr" rid="bib66">Plexon, 2020</xref>).</p><table-wrap id="table1" position="float"><label>Table 1.</label><caption><title>Currently available file formats in SpikeInterface and if they are writable.</title><p>*The Phy writing method is implemented in spiketoolkit as the export_to_phy function (all other writing methods are implemented in spikeextractors).</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Raw formats</th><th>Writable</th><th>Reference</th><th>Sorted formats</th><th>Writable</th><th>Reference</th></tr></thead><tbody><tr><td>Klusta</td><td>Yes</td><td><xref ref-type="bibr" rid="bib71">Rossant et al., 2016</xref></td><td>Klusta</td><td>Yes</td><td><xref ref-type="bibr" rid="bib71">Rossant et al., 2016</xref></td></tr><tr><td>Mountainsort</td><td>Yes</td><td><xref ref-type="bibr" rid="bib39">Jun et al., 2017a</xref></td><td>Mountainsort</td><td>Yes</td><td><xref ref-type="bibr" rid="bib39">Jun et al., 2017a</xref></td></tr><tr><td>Phy*</td><td>Yes</td><td><xref ref-type="bibr" rid="bib72">Rossant and Harris, 2013</xref></td><td>Phy*</td><td>Yes</td><td><xref ref-type="bibr" rid="bib72">Rossant and Harris, 2013</xref></td></tr><tr><td>Kilosort/Kilosort2</td><td>No</td><td><xref ref-type="bibr" rid="bib64">Pachitariu et al., 2016</xref>; <xref ref-type="bibr" rid="bib70">Rossant et al., 2014</xref></td><td>Kilosort/Kilosort2</td><td>No</td><td><xref ref-type="bibr" rid="bib64">Pachitariu et al., 2016</xref>; <xref ref-type="bibr" rid="bib70">Rossant et al., 2014</xref></td></tr><tr><td>SpyKING Circus</td><td>No</td><td><xref ref-type="bibr" rid="bib85">Yger et al., 2018</xref></td><td>SpyKING Circus</td><td>Yes</td><td><xref ref-type="bibr" rid="bib85">Yger et al., 2018</xref></td></tr><tr><td>Exdir</td><td>Yes</td><td><xref ref-type="bibr" rid="bib24">Dragly et al., 2018</xref></td><td>Exdir</td><td>Yes</td><td><xref ref-type="bibr" rid="bib24">Dragly et al., 2018</xref></td></tr><tr><td>MEArec</td><td>Yes</td><td><xref ref-type="bibr" rid="bib16">Buccino and Einevoll, 2020</xref></td><td>MEArec</td><td>Yes</td><td><xref ref-type="bibr" rid="bib16">Buccino and Einevoll, 2020</xref></td></tr><tr><td>Open Ephys</td><td>No</td><td><xref ref-type="bibr" rid="bib77">Siegle et al., 2017</xref></td><td>Open Ephys</td><td>No</td><td><xref ref-type="bibr" rid="bib77">Siegle et al., 2017</xref></td></tr><tr><td>Neurodata Without Borders</td><td>Yes</td><td><xref ref-type="bibr" rid="bib80">Teeters et al., 2015</xref></td><td>Neurodata Without Borders</td><td>Yes</td><td><xref ref-type="bibr" rid="bib80">Teeters et al., 2015</xref></td></tr><tr><td>NIX</td><td>Yes</td><td><xref ref-type="bibr" rid="bib62">NIX, 2015</xref></td><td>NIX</td><td>Yes</td><td><xref ref-type="bibr" rid="bib62">NIX, 2015</xref></td></tr><tr><td>Plexon</td><td>No</td><td><xref ref-type="bibr" rid="bib66">Plexon, 2020</xref></td><td>Plexon</td><td>No</td><td><xref ref-type="bibr" rid="bib66">Plexon, 2020</xref></td></tr><tr><td>Neuralynx</td><td>No</td><td><xref ref-type="bibr" rid="bib61">Neuralynx, 2020</xref></td><td>Neuralynx</td><td>No</td><td><xref ref-type="bibr" rid="bib61">Neuralynx, 2020</xref></td></tr><tr><td>SHYBRID</td><td>Yes</td><td><xref ref-type="bibr" rid="bib83">Wouters et al., 2020</xref></td><td>SHYBRID</td><td>Yes</td><td><xref ref-type="bibr" rid="bib83">Wouters et al., 2020</xref></td></tr><tr><td>Neuroscope</td><td>Yes</td><td><xref ref-type="bibr" rid="bib34">Hazan et al., 2006</xref></td><td>Neuroscope</td><td>Yes</td><td><xref ref-type="bibr" rid="bib34">Hazan et al., 2006</xref></td></tr><tr><td>SpikeGLX</td><td>No</td><td><xref ref-type="bibr" rid="bib42">Karsh, 2016</xref></td><td>HerdingSpikes2</td><td>Yes</td><td><xref ref-type="bibr" rid="bib35">Hilgen et al., 2017</xref></td></tr><tr><td>Intan</td><td>No</td><td><xref ref-type="bibr" rid="bib38">Intan, 2010</xref></td><td>JRCLUST</td><td>No</td><td><xref ref-type="bibr" rid="bib40">Jun et al., 2017b</xref></td></tr><tr><td>MCS H5</td><td>No</td><td><xref ref-type="bibr" rid="bib54">MCS, 2020</xref></td><td>Wave clus</td><td>No</td><td><xref ref-type="bibr" rid="bib18">Chaure et al., 2018</xref></td></tr><tr><td>Biocam HDF5</td><td>Yes</td><td><xref ref-type="bibr" rid="bib6">Biocam, 2018</xref></td><td>Tridesclous</td><td>No</td><td><xref ref-type="bibr" rid="bib30">Garcia and Pouzat, 2015</xref></td></tr><tr><td>MEA1k</td><td>Yes</td><td><xref ref-type="bibr" rid="bib55">MEA1k, 2020</xref></td><td>NPZ (numpy zip)</td><td>Yes</td><td>N/A</td></tr><tr><td>MaxOne</td><td>No</td><td><xref ref-type="bibr" rid="bib52">MaxWell, 2020</xref></td><td/><td/><td/></tr><tr><td>Binary</td><td>Yes</td><td>N/A</td><td/><td/><td/></tr></tbody></table></table-wrap></sec><sec id="s3-1-2"><title>SpikeToolkit</title><p>The <monospace>spiketoolkit</monospace> package (<ext-link ext-link-type="uri" xlink:href="https://github.com/SpikeInterface/spiketoolkit">https://github.com/SpikeInterface/spiketoolkit</ext-link>; <xref ref-type="bibr" rid="bib12">Buccino et al., 2020b</xref>) is designed for efficient pre-processing, post-processing, validation, and curation of extracellular datasets and sorting outputs. It contains four modules that encapsulate each of these functionalities: <monospace>preprocessing, postprocessing, validation</monospace>, and <monospace>curation</monospace>.</p><sec id="s3-1-2-1"><title>Pre-processing</title><p>The <monospace>preprocessing</monospace> module provides functions to process raw extracellular recordings before spike sorting. To pre-process an extracellular recording, the user passes a <monospace>RecordingExtractor</monospace> to a pre-processing function which returns a new 'preprocessed' RecordingExtractor. This new <monospace>RecordingExtractor</monospace>, which can be used in exactly the same way as the original extractor, implements the preprocessing in a <italic>lazy</italic> fashion so that the actual computation is performed only when data is requested. As all pre-processing functions take in and return a <monospace>RecordingExtractor</monospace>, they can be naturally chained together to perform multiple pre-processing steps on the same recording.</p><p>Pre-processing functions range from commonly used operations, such as bandpass filtering, notch filtering, re-referencing signals, and removing channels, to more advanced procedures such as clipping traces depending on the amplitude, or removing artifacts arising, for example, from electrical stimulation. The following code snippet illustrates how to chain together a few common pre-processing functions to process a raw extracellular recording:<code xml:space="preserve">import spikeinterface.spiketoolkit as st
recording = st.preprocessing.bandpass_filter(recording, freq_min=300, freq_max=6000)
recording_1 = st.preprocessing.remove_bad_channels(recording, bad_channels=[5])
recording_2 = st.preprocessing.common_reference(recording_1, reference=’median’)</code></p></sec><sec id="s3-1-2-2"><title>Post-processing</title><p>The <monospace>postprocessing</monospace> module provides functions to compute and store information about an extracellular recording given an associated sorting output. As such, post-processing functions are designed to take in both a <monospace>RecordingExtractor</monospace> and a <monospace>SortingExtractor</monospace>, using them in conjunction to compute the desired information. These functions include, but are not limited to: extracting unit waveforms and templates, computing principle component analysis projections, as well as calculating features from templates (e.g. peak to valley duration, full-width half maximum).</p><p>One essential feature of the <monospace>postprocessing</monospace> module is that it provides the functionality to export a <monospace>RecordingExtractor/SortingExtractor</monospace> pair into the <monospace>Phy</monospace> format for manual curation later. <monospace>Phy</monospace> (<xref ref-type="bibr" rid="bib72">Rossant and Harris, 2013</xref>; <xref ref-type="bibr" rid="bib71">Rossant et al., 2016</xref>) is a popular manual curation GUI that allows users to visualize a sorting output with several views and to curate the results by manually merging or splitting clusters. <monospace>Phy</monospace> is already supported by several spike sorters (including <monospace>klusta, Kilosort, Kilosort2</monospace>, and <monospace>SpyKING Circus</monospace>) so our exporter function extends <monospace>Phy</monospace>’s functionality to all SpikeInterface-supported spike sorters. After manual curation is performed in <monospace>Phy</monospace>, the curated data can be re-imported into SpikeInterface using the <monospace>PhySortingExtractor</monospace> for further analysis. The following code snippet illustrates how to retrieve waveforms for each sorted unit, compute principal component analysis (PCA) features for each spike, and export to <monospace>Phy</monospace> using SpikeInterface:<code xml:space="preserve">import spikeinterface.toolkit as st
waveforms = st.postprocessing.get_unit_waveforms(recording, sorting)
pca_scores = st.postprocessing.compute_unit_pca_scores(recording, sorting, n_comp=3)
st.postprocessing.export_to_phy(recording, sorting, output_folder=’phy_folder’)</code></p></sec><sec id="s3-1-2-3"><title>Validation</title><p>The <monospace>validation</monospace> module allows users to automatically evaluate spike sorting results in the absence of ground truth with a variety of quality metrics. The quality metrics currently available are a compilation of historical and modern approaches that were re-implemented by researchers at Allen Institute for Brain Science (<ext-link ext-link-type="uri" xlink:href="https://github.com/AllenInstitute/ecephys_spike_sorting">https://github.com/AllenInstitute/ecephys_spike_sorting</ext-link>; <xref ref-type="bibr" rid="bib79">Siegle et al., 2019b</xref>) and by the SpikeInterface team (see <xref ref-type="table" rid="table2">Table 2</xref>).</p><table-wrap id="table2" position="float"><label>Table 2.</label><caption><title>Currently available quality metrics in Spikeinterface.</title><p>Re-implemented by researchers at Allen Institute for Brain and by the SpikeInterface team.</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Metric</th><th>Description</th><th>Reference</th></tr></thead><tbody><tr><td>Signal-to-noise ratio</td><td>The signal-to-noise ratio computed on unit templates.</td><td>N/A</td></tr><tr><td>Firing rate</td><td>The average firing rate over a time period.</td><td>N/A</td></tr><tr><td>Presence ratio</td><td>The fraction of a time period in which spikes are present.</td><td>N/A</td></tr><tr><td>Amplitude Cutoff</td><td>An estimate of the miss rate based on an amplitude histogram.</td><td>N/A</td></tr><tr><td>Maximum drift</td><td>The maximum change in spike position (computed as the center of mass of the energy of the first principal component score) throughout a recording.</td><td>N/A</td></tr><tr><td>Cumulative drift</td><td>The cumulative change in spike position throughout a recording.</td><td>N/A</td></tr><tr><td>ISI violations</td><td>The rate of inter-spike-interval (ISI) refractory period violations.</td><td><xref ref-type="bibr" rid="bib36">Hill et al., 2011</xref></td></tr><tr><td>Isolation Distance</td><td>Radius of the smallest ellipsoid that contains <italic>all</italic> the spikes from a cluster and an equal number of spikes from other clusters (centered on the specified cluster).</td><td><xref ref-type="bibr" rid="bib33">Harris et al., 2001</xref></td></tr><tr><td>L-ratio</td><td>Assuming that the distribution of spike distances from a cluster center is multivariate normal, L-ratio is the average value of the tail distribution for non-member spikes of that cluster.</td><td><xref ref-type="bibr" rid="bib76">Schmitzer-Torbert and Redish, 2004</xref></td></tr><tr><td>D-Prime</td><td>The classification accuracy between two units based on linear discriminant analysis (LDA)</td><td><xref ref-type="bibr" rid="bib36">Hill et al., 2011</xref></td></tr><tr><td>Nearest-neighbors</td><td>A non-parametric estimate of unit contamination using nearest-neighbor classification.</td><td><xref ref-type="bibr" rid="bib19">Chung et al., 2017</xref></td></tr><tr><td>Silhouette score</td><td>The ratio between cohesiveness of a cluster (distance between member spikes) and its separation from other clusters (distance to non-member spikes).</td><td><xref ref-type="bibr" rid="bib73">Rousseeuw, 1987</xref></td></tr></tbody></table></table-wrap><p>Each of SpikeInterface’s quality metric functions internally utilize the <monospace>postprocessing</monospace> module to generate all data needed to compute the specified metric (amplitudes, principal components, etc.). The following code snippet demonstrates how to compute both a single quality metric (isolation distance) and also <italic>all</italic> the quality metrics with just two function calls:<code xml:space="preserve">import spikeinterface.toolkit as st
iso_metric = st.validation.compute_isolation_distances(sorting, recording)
all_metrics = st.validation.compute_quality_metrics(sorting, recording)</code></p></sec><sec id="s3-1-2-4"><title>Curation</title><p>The <monospace>curation</monospace> module allows users to quickly remove units from a <monospace>SortingExtractor</monospace> based on computed quality metrics. To curate a sorted dataset, the user passes a <monospace>SortingExtractor</monospace> to a curation function which returns a new 'curated’ <monospace>SortingExtractor</monospace> (similar to how pre-processing works). This new <monospace>SortingExtractor</monospace> can be used in exactly the same way as the original extractor. As all curation functions take in and return a <monospace>SortingExtractor</monospace>, they can be naturally chained together to perform multiple curation steps on the same sorting output.</p><p>Currently, all implemented curation functions are based on excluding units with respect to a user-defined threshold on a specified quality metric. These curation functions will compute the associated quality metric and then threshold the dataset accordingly. The following code snippet demonstrates how to chain together two curation functions that are based on different quality metrics and apply a 'less’ threshold to the underlying units (exclude all units below the given threshold):<code xml:space="preserve">import spikeinterface.toolkit as st
sorting_1 = st.curation.threshold_firing_rates(sorting, threshold=2.3, threshold_sign=’less’)
sorting_2 = st.curation.threshold_snrs(sorting_1, recording, threshold=10, threshold_sign=’less’)</code></p></sec></sec><sec id="s3-1-3"><title>SpikeSorters</title><p>The <monospace>spikesorters</monospace> (<ext-link ext-link-type="uri" xlink:href="https://github.com/SpikeInterface/spikesorters">https://github.com/SpikeInterface/spikesorters</ext-link>; <xref ref-type="bibr" rid="bib13">Buccino et al., 2020c</xref>) package provides a straightforward interface for running spike sorting algorithms supported by SpikeInterface. Modern spike sorting algorithms are built and deployed in a variety of programming languages including C, C++, MATLAB, and Python. Along with variability in the underlying program languages, each sorting algorithm may depend on external technologies like CUDA or command line interfaces (CLIs), complicating standardization. To unify these disparate algorithms into a single codebase, <monospace>spikesorters</monospace> provides Python-wrappers for each supported spike sorting algorithm. These spike sorting wrappers use a standard API for running the corresponding algorithms, internally handling intrinsic complexities such as automatic code generation for MATLAB- and CLI-based algorithms. Each spike sorting wrapper is implemented as a subclass of a <monospace>BaseSorter</monospace> class that contains all shared code for running the spike sorters.</p><p>To run a specific spike sorting algorithm, users can pass a <monospace>RecordingExtractor</monospace> object to the associated function in <monospace>spikesorters</monospace> and overwrite any default parameters with new values (only essential parameters are exposed to the user for modification). Internally, each function initializes a spike sorting wrapper with the user-defined parameters. This wrapper then creates and modifies a new spike sorter configuration and runs the sorter on the dataset encapsulated by the <monospace>RecordingExtractor</monospace>. Once the spike sorting algorithm is finished, the sorting output is saved and a corresponding <monospace>SortingExtractor</monospace> is returned to the user. For each sorter, all available parameters and their descriptions can be retrieved using the <monospace>get_default_params()</monospace> and <monospace>get_params_description()</monospace> functions, respectively.</p><p>In the following code snippet, Mountainsort4 and Kilosort2 are used to sort an extracellular recording. Running each algorithm (and changing the default parameters) can be done as follows:<code xml:space="preserve">import spikeinterface.sorters as ss
sorting_MS4 = ss.run_mountainsort4(recording, adjacency_radius=50)
sorting_KS2 = ss.run_kilosort2(recording, detect_threshold=5)</code></p><p>Our spike sorting functions also allow for users to sort specific 'groups’ of channels in the recording separately (and in parallel, if specified). This can be very useful for multiple tetrode recordings where the data are all stored in one file, but the user wants to sort each tetrode separately. For large-scale analyses where the user wants to run many different spike sorters on many different datasets, <monospace>spikesorters</monospace> provides a launcher function which handles any internal complications associated with running multiple sorters and returns a nested dictionary of <monospace>SortingExtractor</monospace> objects corresponding to each sorting output. The launcher can be deployed on HPC platforms through the <monospace>multiprocessing</monospace> or <monospace>dask</monospace> engine (<xref ref-type="bibr" rid="bib20">Dask, 2016</xref>). Finally, and importantly, when running a spike sorting job the recording information and all the spike sorting parameters are saved in a log file, including the console output of the spike sorting run (which can be used to inspect errors). This provenance mechanism ensures full reproducibility of the spike sorting pipeline.</p><p>Currently, SpikeInterface supports 10 semi-automated spike sorters which are listed in <xref ref-type="table" rid="table3">Table 3</xref>. We encourage developers to contribute to this expanding list in future versions and we provide comprehensive documentation on how to do so (<ext-link ext-link-type="uri" xlink:href="https://spikeinterface.readthedocs.io/en/latest/contribute.html">https://spikeinterface.readthedocs.io/en/latest/contribute.html</ext-link>).</p><table-wrap id="table3" position="float"><label>Table 3.</label><caption><title>Currently available spike sorters in Spikeinterface.</title><p>TM = Template Matching; SL = Spike Localization; DB = Density-based clustering.</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Name</th><th>Method</th><th>Notes</th><th>Reference</th></tr></thead><tbody><tr><td> Klusta</td><td>DB</td><td>Python-based, semi-automatic, designed for low channel count, dense probes.</td><td><xref ref-type="bibr" rid="bib71">Rossant et al., 2016</xref></td></tr><tr><td>Mountainsort4</td><td>DB</td><td>Python-based, fully automatic, unique clustering method (isosplit), designed for low channel count, dense probes and tetrodes.</td><td><xref ref-type="bibr" rid="bib19">Chung et al., 2017</xref></td></tr><tr><td>Kilosort</td><td>TM</td><td>MATLAB-based, GPU support, semi-automated final curation.</td><td><xref ref-type="bibr" rid="bib64">Pachitariu et al., 2016</xref></td></tr><tr><td>Kilosort2</td><td>TM</td><td>MATLAB-based, GPU support, semi-automated final curation, designed to correct for drift.</td><td><xref ref-type="bibr" rid="bib65">Pachitariu et al., 2018</xref></td></tr><tr><td>SpyKING Circus</td><td>TM</td><td>Python-based, fast and scalable with CPUs, designed to correct for drift.</td><td><xref ref-type="bibr" rid="bib85">Yger et al., 2018</xref></td></tr><tr><td>HerdingSpikes2</td><td>DB + SL</td><td>Python-based, fast and scalable with CPUs, scales up to thousands of channels.</td><td><xref ref-type="bibr" rid="bib35">Hilgen et al., 2017</xref></td></tr><tr><td>Tridesclous</td><td>TM</td><td>Python-based, graphical user interface, GPU support, multi-platform</td><td><xref ref-type="bibr" rid="bib30">Garcia and Pouzat, 2015</xref></td></tr><tr><td>IronClust</td><td>DB + SL</td><td>MATLAB-based, GPU support, designed to correct for drift.</td><td><xref ref-type="bibr" rid="bib41">Jun et al., 2020</xref></td></tr><tr><td>Wave clus</td><td>TM</td><td>Matlab-based, fully automatic, designed for single electrodes and tetrodes, multi-platform.</td><td><xref ref-type="bibr" rid="bib18">Chaure et al., 2018</xref></td></tr><tr><td> HDsort</td><td>TM</td><td>Matlab-based, fast and scalable, designed for large-scale, dense arrays.</td><td><xref ref-type="bibr" rid="bib22">Diggelmann et al., 2018</xref></td></tr></tbody></table></table-wrap></sec><sec id="s3-1-4"><title>SpikeComparison</title><p>The <monospace>spikecomparison</monospace> package (<ext-link ext-link-type="uri" xlink:href="https://github.com/SpikeInterface/spikecomparison">https://github.com/SpikeInterface/spikecomparison</ext-link>; <xref ref-type="bibr" rid="bib14">Buccino et al., 2020d</xref>) provides a variety of tools that allow users to compare and benchmark sorting outputs. Along with these comparison tools, <monospace>spikecomparison</monospace> also provides the functionality to run systematic performance comparisons of multiple spike sorters on multiple ground-truth recordings.</p><p>Within spikecomparison, there exist three core comparison functions:</p><list list-type="order"><list-item><p><monospace>compare_two_sorters</monospace> - Compares two spike sorting outputs.</p></list-item><list-item><p><monospace>compare_multiple_sorters</monospace> - Compares multiple spike sorting outputs.</p></list-item><list-item><p><monospace>compare_sorter_with_ground_truth</monospace> - Compares a spike sorting output to ground truth.</p></list-item></list><p>Each of these comparison functions takes in multiple <monospace>SortingExtractor</monospace> objects and uses them to compute agreement scores among the underlying spike trains. The agreement score between two spike trains is defined as:<disp-formula id="equ1"><label>(1)</label><mml:math id="m1"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mi>s</mml:mi><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>r</mml:mi><mml:mi>e</mml:mi><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mi mathvariant="normal">#</mml:mi><mml:msub><mml:mi>n</mml:mi><mml:mrow><mml:mi>m</mml:mi><mml:mi>a</mml:mi><mml:mi>t</mml:mi><mml:mi>c</mml:mi><mml:mi>h</mml:mi><mml:mi>e</mml:mi><mml:mi>s</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:mi mathvariant="normal">#</mml:mi><mml:msub><mml:mi>n</mml:mi><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:mi mathvariant="normal">#</mml:mi><mml:msub><mml:mi>n</mml:mi><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>−</mml:mo><mml:mi mathvariant="normal">#</mml:mi><mml:msub><mml:mi>n</mml:mi><mml:mrow><mml:mi>m</mml:mi><mml:mi>a</mml:mi><mml:mi>t</mml:mi><mml:mi>c</mml:mi><mml:mi>h</mml:mi><mml:mi>e</mml:mi><mml:mi>s</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mfrac></mml:mrow></mml:mstyle></mml:math></disp-formula>where <inline-formula><mml:math id="inf6"><mml:mrow><mml:mi mathvariant="normal">#</mml:mi><mml:mo>⁢</mml:mo><mml:msub><mml:mi>n</mml:mi><mml:mrow><mml:mi>m</mml:mi><mml:mo>⁢</mml:mo><mml:mi>a</mml:mi><mml:mo>⁢</mml:mo><mml:mi>t</mml:mi><mml:mo>⁢</mml:mo><mml:mi>c</mml:mi><mml:mo>⁢</mml:mo><mml:mi>h</mml:mi><mml:mo>⁢</mml:mo><mml:mi>e</mml:mi><mml:mo>⁢</mml:mo><mml:mi>s</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula> is the number of 'matched' spikes between the two spike trains and <inline-formula><mml:math id="inf7"><mml:mrow><mml:mi mathvariant="normal">#</mml:mi><mml:mo>⁢</mml:mo><mml:msub><mml:mi>n</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> and <inline-formula><mml:math id="inf8"><mml:mrow><mml:mi mathvariant="normal">#</mml:mi><mml:mo>⁢</mml:mo><mml:msub><mml:mi>n</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> are the number of spikes in the first and second spike train, respectively. Two spikes from two different spike trains are 'matched' when they occur within a certain time window of each other (this window length can be adjusted by the user and is 0.4 ms by default).</p><p>When comparing two sorting outputs (<monospace>compare_two_sorters</monospace>), a linear assignment based on the Hungarian method (<xref ref-type="bibr" rid="bib43">Kuhn, 1955</xref>) is used. With this assignment method, each unit from the first sorting output can be matched to at most one other unit in the second sorting output. The final result of this comparison is then the list of matching units (given by the Hungarian method) and the agreement scores of the spike trains.</p><p>The multi-sorting comparison function (<monospace>compare_multiple_sorters</monospace>) can be used to compute the agreement among the units of many sorting outputs at once. Internally, pair-wise sorter comparisons are run for all of the sorting output pairs. A graph is then built with the sorted units as nodes and the agreement scores among the sorted units as edges. With this graph implementation, it is straightforward to query for units that are in agreement among multiple sorters. For example, if three sorting outputs are being compared, any units that are in agreement among all three sorters will be part of a subgraph with large weights.</p><p>For a ground-truth comparison (<monospace>compare_sorter_with_ground_truth</monospace>), either the Hungarian or the best-match method can be used. With the Hungarian method, each tested unit from the sorting output is matched to at most a single ground-truth unit. With the best-match method, a tested unit from the sorting output can be matched to multiple ground-truth units (above an adjustable agreement threshold) allowing for more in-depth characterizations of sorting failures. Note that in the SpikeForest benchmarking software suite (<xref ref-type="bibr" rid="bib47">Magland et al., 2020</xref>), the best-match strategy is used.</p><p>Additionally, when comparing a sorting output to a ground-truth sorted result, each spike can be optionally labeled as:</p><list list-type="bullet"><list-item><p>True positive (<inline-formula><mml:math id="inf9"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mi>t</mml:mi><mml:mi>p</mml:mi></mml:mrow></mml:mstyle></mml:math></inline-formula>): Found both in the ground-truth spike train and tested spike train.</p></list-item><list-item><p>False negative (<inline-formula><mml:math id="inf10"><mml:mrow><mml:mi>f</mml:mi><mml:mo>⁢</mml:mo><mml:mi>n</mml:mi></mml:mrow></mml:math></inline-formula>): Found in the ground-truth spike train, but not in the tested spike train.</p></list-item><list-item><p>False positive (<inline-formula><mml:math id="inf11"><mml:mrow><mml:mi>f</mml:mi><mml:mo>⁢</mml:mo><mml:mi>p</mml:mi></mml:mrow></mml:math></inline-formula>): Found in the tested spike train, but not in the ground-truth spike train.</p></list-item></list><p>Using these labels, the following performance measures can be computed:</p><list list-type="bullet"><list-item><p>Accuracy: <inline-formula><mml:math id="inf12"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mfrac><mml:mrow><mml:mi mathvariant="normal">#</mml:mi><mml:mi>t</mml:mi><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="normal">#</mml:mi><mml:mi>t</mml:mi><mml:mi>p</mml:mi><mml:mo>+</mml:mo><mml:mi mathvariant="normal">#</mml:mi><mml:mi>f</mml:mi><mml:mi>n</mml:mi><mml:mo>+</mml:mo><mml:mi mathvariant="normal">#</mml:mi><mml:mi>f</mml:mi><mml:mi>p</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mfrac></mml:mrow></mml:mstyle></mml:math></inline-formula></p></list-item><list-item><p>Recall: <inline-formula><mml:math id="inf13"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mfrac><mml:mrow><mml:mi mathvariant="normal">#</mml:mi><mml:mi>t</mml:mi><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="normal">#</mml:mi><mml:mi>t</mml:mi><mml:mi>p</mml:mi><mml:mo>+</mml:mo><mml:mi mathvariant="normal">#</mml:mi><mml:mi>f</mml:mi><mml:mi>n</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mfrac></mml:mrow></mml:mstyle></mml:math></inline-formula></p></list-item><list-item><p>Precision: <inline-formula><mml:math id="inf14"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mfrac><mml:mrow><mml:mi mathvariant="normal">#</mml:mi><mml:mi>t</mml:mi><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="normal">#</mml:mi><mml:mi>t</mml:mi><mml:mi>p</mml:mi><mml:mo>+</mml:mo><mml:mi mathvariant="normal">#</mml:mi><mml:mi>f</mml:mi><mml:mi>p</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mfrac></mml:mrow></mml:mstyle></mml:math></inline-formula></p></list-item><list-item><p>Miss rate: <inline-formula><mml:math id="inf15"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mfrac><mml:mrow><mml:mi mathvariant="normal">#</mml:mi><mml:mi>f</mml:mi><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="normal">#</mml:mi><mml:mi>t</mml:mi><mml:mi>p</mml:mi><mml:mo>+</mml:mo><mml:mi mathvariant="normal">#</mml:mi><mml:mi>f</mml:mi><mml:mi>n</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mfrac></mml:mrow></mml:mstyle></mml:math></inline-formula></p></list-item><list-item><p>False discovery rate: <inline-formula><mml:math id="inf16"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mfrac><mml:mrow><mml:mi mathvariant="normal">#</mml:mi><mml:mi>f</mml:mi><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="normal">#</mml:mi><mml:mi>t</mml:mi><mml:mi>p</mml:mi><mml:mo>+</mml:mo><mml:mi mathvariant="normal">#</mml:mi><mml:mi>f</mml:mi><mml:mi>p</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mfrac></mml:mrow></mml:mstyle></mml:math></inline-formula></p></list-item></list><p>While previous metrics give a measure of individual spike train quality, we also propose metrics at a unit population level. Based on the matching results and the scores, the units of the sorting output are classified as <italic>well-detected</italic>, <italic>false positive</italic>, <italic>redundant</italic>, and <italic>overmerged</italic>. Well-detected units are matched units with an agreement score above 0.8. False positive units are unmatched units or units which are matched with an agreement score below 0.2. Redundant units have agreement scores above 0.2 with only one ground-truth unit, but are not the best matched tested units (redundant units can either be oversplit or duplicate units). Overmerged units have an agreement score above 0.2 with two or more ground-truth units. All these agreement score thresholds are adjustable by the user. We highlight to the reader that the unit classification proposed here is currently only based on agreement score (i.e. accuracy). More sophisticated classification rules could involve a combination of accuracy, precision, and recall values, which can be easily computed for each unit with the <monospace>spikecomparison</monospace> module.</p><p>The following code snippet shows how to perform all three types of spike sorter comparisons:<code xml:space="preserve">import spikeinterface.comparison as sc
comp_type_1 = sc.compare_two_sorters(sorting1, sorting2)
comp_type_2 = sc.compare_multiple_sorters([sorting1, sorting2, sorting3])
comp_type_3 = sc.compare_sorter_with_ground_truth(gt_sorting, tested_sorting)</code></p><p>Along with the three comparison functions, <monospace>spikecomparison</monospace> also includes a <monospace>GroundTruthStudy</monospace> class that allows for the systematic comparison of multiple spike sorters on multiple ground-truth datasets. With this class, users can set up a study folder (in which the recordings to be tested are saved), run several spike sorters and store their results in a compact way, perform systematic ground-truth comparisons, and aggregate the results in pandas dataframes (<xref ref-type="bibr" rid="bib53">McKinney, 2010</xref>).</p></sec><sec id="s3-1-5"><title>SpikeWidgets</title><p>The <monospace>spikewidgets</monospace> package (<ext-link ext-link-type="uri" xlink:href="https://github.com/SpikeInterface/spikewidgets">https://github.com/SpikeInterface/spikewidgets</ext-link>; <xref ref-type="bibr" rid="bib15">Buccino et al., 2020e</xref>) implements a variety of widgets that allow for efficient visualization of different elements in a spike sorting pipeline.</p><p>There exist four categories of widgets in <monospace>spikewidgets</monospace>. The first category utilizes a <monospace>RecordingExtractor</monospace> for its visualization. This category includes widgets for visualizing time series data, electrode geometries, signal spectra, and spectrograms. The second category utilizes a <monospace>SortingExtractor</monospace> for its visualization. These widgets include displays for raster plots, auto-correlograms, cross-correlograms, and inter-spike-interval distributions. The third category utilizes both a <monospace>RecordingExtractor</monospace> and a <monospace>SortingExtractor</monospace> for its visualization. These widgets include visualizations of unit waveforms, amplitude distributions for each unit, amplitudes of each unit over time, and PCA features. The fourth category utlizes comparison objects from the <monospace>spikecomparison</monospace> package for its visualization. These widgets allow the user to visualize confusion matrices, agreement scores, spike sorting performance metrics (e.g. accuracy, precision, recall) with respect to a unit property (e.g. SNR), and the agreement between multiple sorting algorithms on the same dataset.</p><p>The following code snippet demonstrates how SpikeInterface can be used to visualize ten seconds of both the extracellular traces and the corresponding raster plot:<code xml:space="preserve">import spikeinterface.widgets as sw
sw.plot_timeseries(recording, channel_ids=[0,1,2,3], trange=[0,10])
sw.plot_rasters(sorting, unit_ids=[0,1,3], trange=[0,10]).</code></p></sec></sec><sec id="s3-2"><title>Building a spike sorting pipeline</title><p>So far, we have given an overview of each of the main packages in isolation. In this section, we illustrate how these packages can be combined, using both the Python API and the <monospace>Spikely</monospace> GUI, to build a robust spike sorting pipeline. The spike sorting pipeline that we construct using SpikeInterface is depicted in <xref ref-type="fig" rid="fig6">Figure 6A</xref> and consists of the following analysis steps:</p><fig id="fig6" position="float"><label>Figure 6.</label><caption><title>Sample spike sorting pipeline using SpikeInterface.</title><p>(<bold>A</bold>) A diagram of a sample spike sorting pipeline. Each processing step is colored to represent the SpikeInterface package in which it is implemented and the dashed, colored arrows demonstrate how the Extractors are used in each processing step. (<bold>B</bold>) How to use the Python API to build the pipeline shown in (<bold>A</bold>). (<bold>C</bold>) How to use the GUI to build the pipeline shown in (<bold>A</bold>).</p></caption><graphic mime-subtype="tiff" mimetype="image" xlink:href="elife-61834-fig6-v2.tif"/></fig><list list-type="order"><list-item><p>Loading an Open Ephys recording (<xref ref-type="bibr" rid="bib77">Siegle et al., 2017</xref>).</p></list-item><list-item><p>Loading a probe file.</p></list-item><list-item><p>Applying a bandpass filter.</p></list-item><list-item><p>Applying common median referencing to reduce the common mode noise.</p></list-item><list-item><p>Spike sorting with <monospace>Mountainsort4</monospace>.</p></list-item><list-item><p>Removing clusters with less than 100 events.</p></list-item><list-item><p>Exporting the results to Phy for manual curation.</p></list-item></list><p>Traditionally, implementing this pipeline is challenging as the user has to load data from multiple file formats, interface with a probe file, memory-map all the processing functions, prepare the correct inputs for Mountainsort4, and understand how to export the results into Phy. Even if the user manages to implement all of the analysis steps on their own, it is difficult to verify their correctness or reuse them without proper unit testing and code reviewing.</p><sec id="s3-2-1"><title>Using the Python API</title><p>Using SpikeInterface’s Python API to build the pipeline shown in <xref ref-type="fig" rid="fig6">Figure 6A</xref> is straightforward. Each of the seven steps is implemented with a single line of code (as shown in <xref ref-type="fig" rid="fig6">Figure 6B</xref>). Additionally, data visualizations can be added for each step of the pipeline using the appropriate widgets (as described in the SpikeWidgets Section). Unlike handmade scripts, SpikeInterface has a wide range of unit tests, employs continuous integration, and has been carefully developed by a team of researchers. Users, therefore, can have increased confidence that the pipelines they create are correct and reusable. Additionally, SpikeInterface tracks the entire provenance of the performed analysis, allowing other users (or the same user) to reproduce the analysis at a later date.</p></sec><sec id="s3-2-2"><title>Using the spikely GUI</title><p>Along with our Python API, we also developed <monospace>spikely</monospace> (<ext-link ext-link-type="uri" xlink:href="https://github.com/SpikeInterface/spikely">https://github.com/SpikeInterface/spikely</ext-link>; <xref ref-type="bibr" rid="bib37">Hurwitz et al., 2020</xref>), a PyQt-based GUI that allows for simple construction of complex spike sorting pipelines. With <monospace>spikely</monospace>, users can build workflows that include: (i) loading a recording and a probe file; (ii) performing pre-processing on the underlying recording with multiple processing steps; (iii) running any spike sorter supported by SpikeInterface on the processed recording; (iv) automatically curating the sorter’s output; and (v) exporting the final result to a variety of file formats, including Phy. At its core, <monospace>spikely</monospace> utilizes SpikeInterface’s Python API to run any constructed spike sorting workflow. This ensures that the functionality of spikely grows organically with that of SpikeInterface.</p><p><xref ref-type="fig" rid="fig6">Figure 6C</xref> shows a screenshot from <monospace>spikely</monospace> where the pipeline in <xref ref-type="fig" rid="fig6">Figure 6A</xref> is constructed. Each stage of the pipeline is added using drop-down lists, and all the parameters (which were not left at their default values) are set in the right-hand panel. Once a pipeline is constructed in <monospace>spikely</monospace>, the user can save it using the built-in save functionality and then load it back into spikely at a later date. Since <monospace>spikely</monospace> is cross-platform and user-friendly, we believe it can be utilized to increase the accessibility and reproducibility of spike sorting.</p></sec></sec></sec><sec id="s4" sec-type="discussion"><title>Discussion</title><p>In this paper, we introduced SpikeInterface, a Python framework designed to enhance the accessibility, reliability, efficiency, and reproducibility of spike sorting. To illustrate the use-cases and advantages of SpikeInterface, we performed a detailed meta-analysis that included: quantifying the agreement among six modern sorters on a real dataset, benchmarking each sorter on a simulated ground-truth recording, and investigating the performance of a consensus-based spike sorting and how it compares with manually curated results. To highlight the modular design of SpikeInterface, we then provided descriptions and code samples for each of the five main packages and showed how they could be chained together to construct flexible spike sorting workflows.</p><sec id="s4-1"><title>Ensemble spike sorting</title><p>Our analysis demonstrated that spike sorters not only differ in unit isolation quality, but can also return a significant number of false positive units. To identify true neurons and remove poorly sorted and noisy units, we combined the output of several spike sorters and found that although agreement between sorters is generally poor, units that are found by more than one sorter are likely true positives. This strategy, which we term consensus-based or ensemble spike sorting (a terminology borrowed from machine learning; <xref ref-type="bibr" rid="bib21">Dietterich, 2000</xref>) appears to be a viable alternative to manual curation which suffers from high-variability among different operators (<xref ref-type="bibr" rid="bib82">Wood et al., 2004</xref>; <xref ref-type="bibr" rid="bib71">Rossant et al., 2016</xref>). Alternatives to manual curation are especially enticing as the density and number of simultaneously recording channels continue to increase rapidly.</p><p>We propose that consensus-based spike sorting (or curation) can be utilized in a number of different ways. A first possibility is to choose a suitable spike sorter (for instance, based on the extensive ground-truth comparison performed by SpikeForest; <xref ref-type="bibr" rid="bib47">Magland et al., 2020</xref>) and then to curate its output by retaining the units that are in agreement with other sorters. Alternatively, a more conservative approach is to simply record the agreement scores for all sorted units and then <italic>hand-curate</italic> only those units that have low agreement. A third method, already implemented in SpikeInterface, is to generate a consensus spike sorting by using, for each unit, the union of the two closest matching units from different sorters (matching spikes are only considered once). Although more work is needed to quantitatively assess the advantages and disadvantages of each approach, our analysis indicates that agreement among sorters can be a useful tool for curating sorting results.</p><p>Although ensemble spike sorting is an exciting new direction to explore, there are other methods for curation that must be considered. One popular curation method is to accept or reject sorted units based on a variety of quality metrics (this is supported by SpikeInterface). Another method that is gaining more popularity is to use the large amount of available curated datasets to train classifiers that can automatically flag a unit as ‘good’ or ‘noise’ depending on some features, such as waveform shape. Finally, while manual curation is subjective and time consuming, it is the only method that allows for merging and splitting of units and, through powerful software tools such as Phy (<xref ref-type="bibr" rid="bib70">Rossant et al., 2014</xref>; <xref ref-type="bibr" rid="bib71">Rossant et al., 2016</xref>), it allows for full control over the curation process. Future research into these different curation methods is required to determine which are appropriate for the new influx of high-density extracellular recording devices.</p></sec><sec id="s4-2"><title>Comparison to other frameworks</title><p>As mentioned in the introduction, many software tools have attempted to improve the accessibility and reproducibility of spike sorting. Here, we review the four most recent tools that are in use (to our knowledge) and compare them to SpikeInterface.</p><p><monospace>Nev2lkit</monospace> (<xref ref-type="bibr" rid="bib9">Bongard et al., 2014</xref>) is a cross-platform, C++-based GUI designed for the analysis of recordings from multi-shank multi-electrode arrays (Utah arrays). In this GUI, the spike sorting step consists of PCA for dimensionality reduction and then <monospace>klustakwik</monospace> for automatic clustering (<xref ref-type="bibr" rid="bib71">Rossant et al., 2016</xref>). As <monospace>Nev2lkit</monospace> targets low-density probes where each channel is spike sorted separately, it is not suitable for the analysis of high-density recordings. Also, since it implements only one spike sorter, users cannot utilize any consensus-based curation or exploration of the data. The software is available online (<ext-link ext-link-type="uri" xlink:href="http://nev2lkit.sourceforge.net/">http://nev2lkit.sourceforge.net/</ext-link>), but it lacks version-control and automated testing with continuous integration platforms.</p><p><monospace>SigMate</monospace> (<xref ref-type="bibr" rid="bib48">Mahmud et al., 2012</xref>) is a MATLAB-based toolkit built for the analysis of electrophysiological data. SigMate has a large scope of usage including the analysis of electroencephalograpy (EEG) signals, local field potentials (LFP), and spike trains. Despite its broad scope, or because of it, the spike sorting step in <monospace>SigMate</monospace> is limited to <monospace>Wave</monospace> clus <xref ref-type="bibr" rid="bib18">Chaure et al., 2018</xref>, which is mainly designed for spike sorting recordings from a few channels. This means that both major limitations of <monospace>Nev2lkit</monospace> (as discussed above) also apply to <monospace>SigMate</monospace>. The software is available online (<ext-link ext-link-type="uri" xlink:href="https://sites.google.com/site/muftimahmud/codes">https://sites.google.com/site/muftimahmud/codes</ext-link>), but again, it lacks version-control and automated testing with continuous integration platforms.</p><p><xref ref-type="bibr" rid="bib68">Regalia et al., 2016</xref> developed a spike sorting framework with an intuitive MATLAB-based GUI. The spike sorting functionality implemented in this framework includes four feature extraction methods, three clustering methods, and one template matching classifier (<monospace>O-Sort;</monospace> <xref ref-type="bibr" rid="bib75">Rutishauser et al., 2006</xref>). These 'building blocks' can be combined to construct new spike sorting pipelines. As this framework targets low-density probes where signals from separate electrodes are spike sorted separately, its usefulness for newly developed high-density recording technology is limited. Moreover, this framework only runs with a specific file format (MCD format from Multi Channel Systems; <xref ref-type="bibr" rid="bib54">MCS, 2020</xref>). The software is distributed upon request.</p><p>Most recently, <xref ref-type="bibr" rid="bib59">Nasiotis et al., 2019a</xref> implemented <monospace>IN-Brainstorm</monospace>, a MATLAB-based GUI designed for the analysis of invasive neurophysiology data. <monospace>IN-Brainstorm</monospace> allows users to run three spike sorting packages (<monospace>Wave clus</monospace> [<xref ref-type="bibr" rid="bib18">Chaure et al., 2018</xref>], <monospace>UltraMegaSort2000</monospace> [<xref ref-type="bibr" rid="bib36">Hill et al., 2011</xref>], and <monospace>Kilosort</monospace> [<xref ref-type="bibr" rid="bib64">Pachitariu et al., 2016</xref>]). Recordings can be loaded and analyzed from six different file formats: Blackrock, Ripple, Plexon, Intan, NWB, and Tucker Davis Technologies. <monospace>IN-Brainstorm</monospace> is available on GitHub (<ext-link ext-link-type="uri" xlink:href="https://github.com/brainstorm-tools/brainstorm3">https://github.com/brainstorm-tools/brainstorm3</ext-link>; <xref ref-type="bibr" rid="bib60">Nasiotis et al., 2019b</xref>) and its functionality is documented (<ext-link ext-link-type="uri" xlink:href="https://neuroimage.usc.edu/brainstorm/e-phys/Introduction">https://neuroimage.usc.edu/brainstorm/e-phys/Introduction</ext-link>). <monospace>IN-Brainstorm</monospace> does not include the latest spike sorting software (<xref ref-type="bibr" rid="bib71">Rossant et al., 2016</xref>; <xref ref-type="bibr" rid="bib85">Yger et al., 2018</xref>; <xref ref-type="bibr" rid="bib19">Chung et al., 2017</xref>; <xref ref-type="bibr" rid="bib40">Jun et al., 2017b</xref>; <xref ref-type="bibr" rid="bib65">Pachitariu et al., 2018</xref>; <xref ref-type="bibr" rid="bib35">Hilgen et al., 2017</xref>) (<monospace>IN-Brainstorm</monospace> does include instructions on how to import data that has been spike sorted by a non-supported spike sorter), and it does not support any post-sorting analysis such as quality metric calculation, automated curation, or sorting output comparison.</p></sec><sec id="s4-3"><title>Outlook</title><p>As it stands, spike sorting is still an open problem. No step in the spike sorting pipeline is completely solved and no spike sorter can be used for all applications. With SpikeInterface, researchers can quickly build, run, and evaluate many different spike sorting workflows on their specific datasets and applications, allowing them to determine which will work best for them. Once a researcher determines an ideal workflow for their specific problem, it is straightforward to share and re-use that workflow in other laboratories as the full provenance is automatically stored by SpikeInterface. We envision that many laboratories will use SpikeInterface to satisfy their spike sorting needs.</p><p>Along with its applications to extracellular analysis, SpikeInterface is also a powerful tool for developers looking to create new spike sorting algorithms and analysis tools. Developers can test their methods using our efficient and comprehensive comparison functions. Once satisfied with their performance, developers can integrate their work into SpikeInterface, allowing them access to a large-community of new users and providing them with automatic file I/O for many popular extracellular dataset formats. For developers who work on projects that utilize spike sorting, SpikeInterface is useful out-of-the-box, providing more reliability and functionality than lab-specific scripts. We envision that many developers will be excited to use and integrate with SpikeInterface.</p><p>Already, SpikeInterface is being used in a variety of applications. The file IO, preprocessing, and spike sorting capabilities of SpikeInterface are an integral part of SpikeForest (<xref ref-type="bibr" rid="bib47">Magland et al., 2020</xref>), which is an interactive website for benchmarking and tracking the accuracy of publicly available spike sorting algorithms. At present, this project includes ten spike sorting algorithms and more than 300 extracellular recordings with ground-truth firing information. SpikeInterface’s ability to read and write to a multitude of extracellular file formats is also being utilized by Neurodata Without Borders (<xref ref-type="bibr" rid="bib80">Teeters et al., 2015</xref>) in their <monospace>nwb-conversion-tools</monospace> package. We hope to continue integrating SpikeInterface into cutting-edge extracellular analysis frameworks.</p></sec></sec></body><back><ack id="ack"><title>Acknowledgements</title><p>This work was supported by the Wellcome Trust grant 214431/Z/18/Z (MHH). APB is supported by an ETH Zurich Postdoctoral Fellowship 19–2 FEL-17, and by the Simula-UCSD-University of Oslo Research and PhD training (SUURPh) program, funded by the Norwegian Ministry of Education and Research. CLH is supported by the Thouron Award and by the Institute for Adaptive and Neural Computation, University of Edinburgh. JHS wishes to thank the Allen Institute founder, Paul G Allen, for his vision, encouragement and support. We thank Shangmin Guo for his recent contributions to debugging and improving the codebase.</p></ack><sec id="s5" sec-type="additional-information"><title>Additional information</title><fn-group content-type="competing-interest"><title>Competing interests</title><fn fn-type="COI-statement" id="conf1"><p>No competing interests declared</p></fn></fn-group><fn-group content-type="author-contribution"><title>Author contributions</title><fn fn-type="con" id="con1"><p>Conceptualization, Resources, Data curation, Software, Visualization, Methodology, Writing - original draft, Writing - review and editing</p></fn><fn fn-type="con" id="con2"><p>Conceptualization, Resources, Software, Visualization, Methodology, Writing - original draft, Writing - review and editing</p></fn><fn fn-type="con" id="con3"><p>Software, Visualization, Methodology, Writing - review and editing</p></fn><fn fn-type="con" id="con4"><p>Conceptualization, Software, Methodology, Writing - review and editing</p></fn><fn fn-type="con" id="con5"><p>Data curation, Software, Methodology, Writing - review and editing</p></fn><fn fn-type="con" id="con6"><p>Software</p></fn><fn fn-type="con" id="con7"><p>Conceptualization, Resources, Software, Supervision, Visualization, Writing - original draft, Writing - review and editing</p></fn></fn-group></sec><sec id="s6" sec-type="supplementary-material"><title>Additional files</title><supplementary-material id="transrepform"><label>Transparent reporting form</label><media mime-subtype="pdf" mimetype="application" xlink:href="elife-61834-transrepform-v2.pdf"/></supplementary-material></sec><sec id="s7" sec-type="data-availability"><title>Data availability</title><p>All data generated or analysed during this study are included in the manuscript and supporting files. The datasets are uploaded to the DANDI archive, dataset 000034 (<ext-link ext-link-type="uri" xlink:href="https://gui.dandiarchive.org/#/dandiset/000034">https://gui.dandiarchive.org/#/dandiset/000034</ext-link>). The source code for generating all figures is also publicly available at: <ext-link ext-link-type="uri" xlink:href="https://spikeinterface.github.io/">https://spikeinterface.github.io/</ext-link>.</p><p>The following dataset was generated:</p><p><element-citation id="dataset1" publication-type="data" specific-use="isSupplementedBy"><person-group person-group-type="author"><name><surname>Buccino</surname><given-names>AP</given-names></name><name><surname>Hurwitz</surname><given-names>CL</given-names></name><name><surname>Garcia</surname><given-names>S</given-names></name><name><surname>Magland</surname><given-names>J</given-names></name><name><surname>Siegle</surname><given-names>JH</given-names></name><name><surname>Hurwitz</surname><given-names>R</given-names></name><name><surname>Hennig</surname><given-names>MH</given-names></name></person-group><year iso-8601-date="2020">2020</year><data-title>SpikeInterface, a unified framework for spike sorting</data-title><source>DANDI</source><pub-id assigning-authority="other" pub-id-type="accession" xlink:href="https://gui.dandiarchive.org/#/dandiset/000034">000034</pub-id></element-citation></p></sec><ref-list><title>References</title><ref id="bib1"><element-citation publication-type="data"><person-group person-group-type="author"><collab>Allen Institute for Brain Science</collab></person-group><year iso-8601-date="2019">2019</year><data-title>Allen Brain Observatory Neuropixels</data-title><source>Allen Brain Map</source><pub-id pub-id-type="accession" xlink:href="https://portal.brain-map.org/explore/circuits/visual-coding-neuropixels">766640955</pub-id></element-citation></ref><ref id="bib2"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Angotzi</surname> <given-names>GN</given-names></name><name><surname>Boi</surname> <given-names>F</given-names></name><name><surname>Lecomte</surname> <given-names>A</given-names></name><name><surname>Miele</surname> <given-names>E</given-names></name><name><surname>Malerba</surname> <given-names>M</given-names></name><name><surname>Zucca</surname> <given-names>S</given-names></name><name><surname>Casile</surname> <given-names>A</given-names></name><name><surname>Berdondini</surname> <given-names>L</given-names></name></person-group><year iso-8601-date="2019">2019</year><article-title>SiNAPS: an implantable active pixel sensor CMOS-probe for simultaneous large-scale neural recordings</article-title><source>Biosensors and Bioelectronics</source><volume>126</volume><fpage>355</fpage><lpage>364</lpage><pub-id pub-id-type="doi">10.1016/j.bios.2018.10.032</pub-id><pub-id pub-id-type="pmid">30466053</pub-id></element-citation></ref><ref id="bib3"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ballini</surname> <given-names>M</given-names></name><name><surname>Müller</surname> <given-names>J</given-names></name><name><surname>Livi</surname> <given-names>P</given-names></name><name><surname>Chen</surname> <given-names>Y</given-names></name><name><surname>Frey</surname> <given-names>U</given-names></name><name><surname>Stettler</surname> <given-names>A</given-names></name><name><surname>Shadmani</surname> <given-names>A</given-names></name><name><surname>Viswam</surname> <given-names>V</given-names></name><name><surname>Jones</surname> <given-names>IL</given-names></name><name><surname>Jäckel</surname> <given-names>D</given-names></name><name><surname>Radivojevic</surname> <given-names>M</given-names></name><name><surname>Lewandowska</surname> <given-names>MK</given-names></name><name><surname>Gong</surname> <given-names>W</given-names></name><name><surname>Fiscella</surname> <given-names>M</given-names></name><name><surname>Bakkum</surname> <given-names>DJ</given-names></name><name><surname>Heer</surname> <given-names>F</given-names></name><name><surname>Hierlemann</surname> <given-names>A</given-names></name></person-group><year iso-8601-date="2014">2014</year><article-title>A 1024-Channel CMOS microelectrode array with 26,400 electrodes for recording and stimulation of electrogenic cells in vitro</article-title><source>IEEE Journal of Solid-State Circuits</source><volume>49</volume><fpage>2705</fpage><lpage>2719</lpage><pub-id pub-id-type="doi">10.1109/JSSC.2014.2359219</pub-id><pub-id pub-id-type="pmid">28502989</pub-id></element-citation></ref><ref id="bib4"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Barnett</surname> <given-names>AH</given-names></name><name><surname>Magland</surname> <given-names>JF</given-names></name><name><surname>Greengard</surname> <given-names>LF</given-names></name></person-group><year iso-8601-date="2016">2016</year><article-title>Validation of neural spike sorting algorithms without ground-truth information</article-title><source>Journal of Neuroscience Methods</source><volume>264</volume><fpage>65</fpage><lpage>77</lpage><pub-id pub-id-type="doi">10.1016/j.jneumeth.2016.02.022</pub-id><pub-id pub-id-type="pmid">26930629</pub-id></element-citation></ref><ref id="bib5"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Berdondini</surname> <given-names>L</given-names></name><name><surname>van der Wal</surname> <given-names>PD</given-names></name><name><surname>Guenat</surname> <given-names>O</given-names></name><name><surname>de Rooij</surname> <given-names>NF</given-names></name><name><surname>Koudelka-Hep</surname> <given-names>M</given-names></name><name><surname>Seitz</surname> <given-names>P</given-names></name><name><surname>Kaufmann</surname> <given-names>R</given-names></name><name><surname>Metzler</surname> <given-names>P</given-names></name><name><surname>Blanc</surname> <given-names>N</given-names></name><name><surname>Rohr</surname> <given-names>S</given-names></name></person-group><year iso-8601-date="2005">2005</year><article-title>High-density electrode array for imaging in vitro electrophysiological activity</article-title><source>Biosensors and Bioelectronics</source><volume>21</volume><fpage>167</fpage><lpage>174</lpage><pub-id pub-id-type="doi">10.1016/j.bios.2004.08.011</pub-id><pub-id pub-id-type="pmid">15967365</pub-id></element-citation></ref><ref id="bib6"><element-citation publication-type="software"><person-group person-group-type="author"><collab>Biocam</collab></person-group><year iso-8601-date="2018">2018</year><source>Biocam</source><ext-link ext-link-type="uri" xlink:href="https://www.3brain.com/biocamx.html">https://www.3brain.com/biocamx.html</ext-link></element-citation></ref><ref id="bib7"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bokil</surname> <given-names>H</given-names></name><name><surname>Andrews</surname> <given-names>P</given-names></name><name><surname>Kulkarni</surname> <given-names>JE</given-names></name><name><surname>Mehta</surname> <given-names>S</given-names></name><name><surname>Mitra</surname> <given-names>PP</given-names></name></person-group><year iso-8601-date="2010">2010</year><article-title>Chronux: a platform for analyzing neural signals</article-title><source>Journal of Neuroscience Methods</source><volume>192</volume><fpage>146</fpage><lpage>151</lpage><pub-id pub-id-type="doi">10.1016/j.jneumeth.2010.06.020</pub-id><pub-id pub-id-type="pmid">20637804</pub-id></element-citation></ref><ref id="bib8"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bologna</surname> <given-names>LL</given-names></name><name><surname>Pasquale</surname> <given-names>V</given-names></name><name><surname>Garofalo</surname> <given-names>M</given-names></name><name><surname>Gandolfo</surname> <given-names>M</given-names></name><name><surname>Baljon</surname> <given-names>PL</given-names></name><name><surname>Maccione</surname> <given-names>A</given-names></name><name><surname>Martinoia</surname> <given-names>S</given-names></name><name><surname>Chiappalone</surname> <given-names>M</given-names></name></person-group><year iso-8601-date="2010">2010</year><article-title>Investigating neuronal activity by SPYCODE multi-channel data analyzer</article-title><source>Neural Networks</source><volume>23</volume><fpage>685</fpage><lpage>697</lpage><pub-id pub-id-type="doi">10.1016/j.neunet.2010.05.002</pub-id><pub-id pub-id-type="pmid">20554151</pub-id></element-citation></ref><ref id="bib9"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bongard</surname> <given-names>M</given-names></name><name><surname>Micol</surname> <given-names>D</given-names></name><name><surname>Fernández</surname> <given-names>E</given-names></name></person-group><year iso-8601-date="2014">2014</year><article-title>NEV2lkit: a new open source tool for handling neuronal event files from multi-electrode recordings</article-title><source>International Journal of Neural Systems</source><volume>24</volume><elocation-id>1450009</elocation-id><pub-id pub-id-type="doi">10.1142/S0129065714500099</pub-id><pub-id pub-id-type="pmid">24694167</pub-id></element-citation></ref><ref id="bib10"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bonomini</surname> <given-names>MP</given-names></name><name><surname>Ferrandez</surname> <given-names>JM</given-names></name><name><surname>Bolea</surname> <given-names>JA</given-names></name><name><surname>Fernandez</surname> <given-names>E</given-names></name></person-group><year iso-8601-date="2005">2005</year><article-title>DATA-MEAns: an open source tool for the classification and management of neural ensemble recordings</article-title><source>Journal of Neuroscience Methods</source><volume>148</volume><fpage>137</fpage><lpage>146</lpage><pub-id pub-id-type="doi">10.1016/j.jneumeth.2005.04.008</pub-id><pub-id pub-id-type="pmid">15970333</pub-id></element-citation></ref><ref id="bib11"><element-citation publication-type="software"><person-group person-group-type="author"><name><surname>Buccino</surname> <given-names>AP</given-names></name><name><surname>Hurwitz</surname> <given-names>CL</given-names></name><name><surname>Garcia</surname> <given-names>S</given-names></name><name><surname>Magland</surname> <given-names>J</given-names></name><name><surname>Siegle</surname> <given-names>JH</given-names></name><name><surname>Hennig</surname> <given-names>MH</given-names></name><collab>SpikeInterface</collab></person-group><year iso-8601-date="2020">2020a</year><source>Spikeextractors</source><ext-link ext-link-type="uri" xlink:href="https://github.com/SpikeInterface/spikeextractors">https://github.com/SpikeInterface/spikeextractors</ext-link></element-citation></ref><ref id="bib12"><element-citation publication-type="software"><person-group person-group-type="author"><name><surname>Buccino</surname> <given-names>AP</given-names></name><name><surname>Hurwitz</surname> <given-names>CL</given-names></name><name><surname>Garcia</surname> <given-names>S</given-names></name><name><surname>Magland</surname> <given-names>J</given-names></name><name><surname>Siegle</surname> <given-names>JH</given-names></name><name><surname>Hennig</surname> <given-names>MH</given-names></name><collab>SpikeInterface</collab></person-group><year iso-8601-date="2020">2020b</year><source>Spiketoolkit</source><ext-link ext-link-type="uri" xlink:href="https://github.com/SpikeInterface/spiketoolkit">https://github.com/SpikeInterface/spiketoolkit</ext-link></element-citation></ref><ref id="bib13"><element-citation publication-type="software"><person-group person-group-type="author"><name><surname>Buccino</surname> <given-names>AP</given-names></name><name><surname>Hurwitz</surname> <given-names>CL</given-names></name><name><surname>Garcia</surname> <given-names>S</given-names></name><name><surname>Magland</surname> <given-names>J</given-names></name><name><surname>Siegle</surname> <given-names>JH</given-names></name><name><surname>Hennig</surname> <given-names>MH</given-names></name><collab>SpikeInterface</collab></person-group><year iso-8601-date="2020">2020c</year><source>Spikesorters</source><ext-link ext-link-type="uri" xlink:href="https://github.com/SpikeInterface/spikesorters">https://github.com/SpikeInterface/spikesorters</ext-link></element-citation></ref><ref id="bib14"><element-citation publication-type="software"><person-group person-group-type="author"><name><surname>Buccino</surname> <given-names>AP</given-names></name><name><surname>Hurwitz</surname> <given-names>CL</given-names></name><name><surname>Garcia</surname> <given-names>S</given-names></name><name><surname>Magland</surname> <given-names>J</given-names></name><name><surname>Siegle</surname> <given-names>JH</given-names></name><name><surname>Hennig</surname> <given-names>MH</given-names></name><collab>SpikeInterface</collab></person-group><year iso-8601-date="2020">2020d</year><source>Spikecomparison</source><ext-link ext-link-type="uri" xlink:href="https://github.com/SpikeInterface/spikecomparison">https://github.com/SpikeInterface/spikecomparison</ext-link></element-citation></ref><ref id="bib15"><element-citation publication-type="software"><person-group person-group-type="author"><name><surname>Buccino</surname> <given-names>AP</given-names></name><name><surname>Hurwitz</surname> <given-names>CL</given-names></name><name><surname>Garcia</surname> <given-names>S</given-names></name><name><surname>Magland</surname> <given-names>J</given-names></name><name><surname>Siegle</surname> <given-names>JH</given-names></name><name><surname>Hennig</surname> <given-names>MH</given-names></name><collab>SpikeInterface</collab></person-group><year iso-8601-date="2020">2020e</year><source>Spikewidgets</source><ext-link ext-link-type="uri" xlink:href="https://github.com/SpikeInterface/spikewidgets">https://github.com/SpikeInterface/spikewidgets</ext-link></element-citation></ref><ref id="bib16"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Buccino</surname> <given-names>AP</given-names></name><name><surname>Einevoll</surname> <given-names>GT</given-names></name></person-group><year iso-8601-date="2020">2020</year><article-title>MEArec: a fast and customizable testbench simulator for Ground-truth extracellular spiking activity</article-title><source>Neuroinformatics</source><volume>493</volume><fpage>1</fpage><lpage>20</lpage><pub-id pub-id-type="doi">10.1007/s12021-020-09467-7</pub-id></element-citation></ref><ref id="bib17"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Carlson</surname> <given-names>D</given-names></name><name><surname>Carin</surname> <given-names>L</given-names></name></person-group><year iso-8601-date="2019">2019</year><article-title>Continuing progress of spike sorting in the era of big data</article-title><source>Current Opinion in Neurobiology</source><volume>55</volume><fpage>90</fpage><lpage>96</lpage><pub-id pub-id-type="doi">10.1016/j.conb.2019.02.007</pub-id><pub-id pub-id-type="pmid">30856552</pub-id></element-citation></ref><ref id="bib18"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Chaure</surname> <given-names>FJ</given-names></name><name><surname>Rey</surname> <given-names>HG</given-names></name><name><surname>Quian Quiroga</surname> <given-names>R</given-names></name></person-group><year iso-8601-date="2018">2018</year><article-title>A novel and fully automatic spike-sorting implementation with variable number of features</article-title><source>Journal of Neurophysiology</source><volume>120</volume><fpage>1859</fpage><lpage>1871</lpage><pub-id pub-id-type="doi">10.1152/jn.00339.2018</pub-id><pub-id pub-id-type="pmid">29995603</pub-id></element-citation></ref><ref id="bib19"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Chung</surname> <given-names>JE</given-names></name><name><surname>Magland</surname> <given-names>JF</given-names></name><name><surname>Barnett</surname> <given-names>AH</given-names></name><name><surname>Tolosa</surname> <given-names>VM</given-names></name><name><surname>Tooker</surname> <given-names>AC</given-names></name><name><surname>Lee</surname> <given-names>KY</given-names></name><name><surname>Shah</surname> <given-names>KG</given-names></name><name><surname>Felix</surname> <given-names>SH</given-names></name><name><surname>Frank</surname> <given-names>LM</given-names></name><name><surname>Greengard</surname> <given-names>LF</given-names></name></person-group><year iso-8601-date="2017">2017</year><article-title>A fully automated approach to spike sorting</article-title><source>Neuron</source><volume>95</volume><fpage>1381</fpage><lpage>1394</lpage><pub-id pub-id-type="doi">10.1016/j.neuron.2017.08.030</pub-id><pub-id pub-id-type="pmid">28910621</pub-id></element-citation></ref><ref id="bib20"><element-citation publication-type="software"><person-group person-group-type="author"><collab>Dask</collab></person-group><year iso-8601-date="2016">2016</year><source>Dask: Library for Dynamic Task Scheduling</source><ext-link ext-link-type="uri" xlink:href="https://dask.org">https://dask.org</ext-link></element-citation></ref><ref id="bib21"><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Dietterich</surname> <given-names>TG</given-names></name></person-group><year iso-8601-date="2000">2000</year><article-title>Ensemble methods in machine learning</article-title><conf-name>International Workshop Multiple Classifier Systems</conf-name><fpage>1</fpage><lpage>15</lpage></element-citation></ref><ref id="bib22"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Diggelmann</surname> <given-names>R</given-names></name><name><surname>Fiscella</surname> <given-names>M</given-names></name><name><surname>Hierlemann</surname> <given-names>A</given-names></name><name><surname>Franke</surname> <given-names>F</given-names></name></person-group><year iso-8601-date="2018">2018</year><article-title>Automatic spike sorting for high-density microelectrode arrays</article-title><source>Journal of Neurophysiology</source><volume>120</volume><fpage>3155</fpage><lpage>3171</lpage><pub-id pub-id-type="doi">10.1152/jn.00803.2017</pub-id><pub-id pub-id-type="pmid">30207864</pub-id></element-citation></ref><ref id="bib23"><element-citation publication-type="preprint"><person-group person-group-type="author"><name><surname>Dimitriadis</surname> <given-names>G</given-names></name><name><surname>Neto</surname> <given-names>JP</given-names></name><name><surname>Aarts</surname> <given-names>A</given-names></name><name><surname>Alexandru</surname> <given-names>A</given-names></name><name><surname>Ballini</surname> <given-names>M</given-names></name><name><surname>Battaglia</surname> <given-names>F</given-names></name><name><surname>Calcaterra</surname> <given-names>L</given-names></name><name><surname>David</surname> <given-names>F</given-names></name><name><surname>Fiath</surname> <given-names>R</given-names></name><name><surname>Frazao</surname> <given-names>J</given-names></name></person-group><year iso-8601-date="2018">2018</year><article-title>Why not record from every channel with a cmos scanning probe?</article-title><source>bioRxiv</source><pub-id pub-id-type="doi">10.1101/275818</pub-id></element-citation></ref><ref id="bib24"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Dragly</surname> <given-names>SA</given-names></name><name><surname>Hobbi Mobarhan</surname> <given-names>M</given-names></name><name><surname>Lepperød</surname> <given-names>ME</given-names></name><name><surname>Tennøe</surname> <given-names>S</given-names></name><name><surname>Fyhn</surname> <given-names>M</given-names></name><name><surname>Hafting</surname> <given-names>T</given-names></name><name><surname>Malthe-Sørenssen</surname> <given-names>A</given-names></name></person-group><year iso-8601-date="2018">2018</year><article-title>Experimental directory structure (Exdir): An alternative to HDF5 without introducing a new file format</article-title><source>Frontiers in Neuroinformatics</source><volume>12</volume><elocation-id>16</elocation-id><pub-id pub-id-type="doi">10.3389/fninf.2018.00016</pub-id><pub-id pub-id-type="pmid">29706879</pub-id></element-citation></ref><ref id="bib25"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Egert</surname> <given-names>U</given-names></name><name><surname>Knott</surname> <given-names>T</given-names></name><name><surname>Schwarz</surname> <given-names>C</given-names></name><name><surname>Nawrot</surname> <given-names>M</given-names></name><name><surname>Brandt</surname> <given-names>A</given-names></name><name><surname>Rotter</surname> <given-names>S</given-names></name><name><surname>Diesmann</surname> <given-names>M</given-names></name></person-group><year iso-8601-date="2002">2002</year><article-title>MEA-Tools: an open source toolbox for the analysis of multi-electrode data with MATLAB</article-title><source>Journal of Neuroscience Methods</source><volume>117</volume><fpage>33</fpage><lpage>42</lpage><pub-id pub-id-type="doi">10.1016/S0165-0270(02)00045-6</pub-id><pub-id pub-id-type="pmid">12084562</pub-id></element-citation></ref><ref id="bib26"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Eversmann</surname> <given-names>B</given-names></name><name><surname>Jenkner</surname> <given-names>M</given-names></name><name><surname>Hofmann</surname> <given-names>F</given-names></name><name><surname>Paulus</surname> <given-names>C</given-names></name><name><surname>Brederlow</surname> <given-names>R</given-names></name><name><surname>Holzapfl</surname> <given-names>B</given-names></name><name><surname>Fromherz</surname> <given-names>P</given-names></name><name><surname>Merz</surname> <given-names>M</given-names></name><name><surname>Brenner</surname> <given-names>M</given-names></name><name><surname>Schreiter</surname> <given-names>M</given-names></name><name><surname>Gabl</surname> <given-names>R</given-names></name><name><surname>Plehnert</surname> <given-names>K</given-names></name><name><surname>Steinhauser</surname> <given-names>M</given-names></name><name><surname>Eckstein</surname> <given-names>G</given-names></name><name><surname>Schmitt-Landsiedel</surname> <given-names>D</given-names></name><name><surname>Thewes</surname> <given-names>R</given-names></name></person-group><year iso-8601-date="2003">2003</year><article-title>A 128 x 128 cmos biosensor array for extracellular recording of neural activity</article-title><source>IEEE Journal of Solid-State Circuits</source><volume>38</volume><fpage>2306</fpage><lpage>2317</lpage><pub-id pub-id-type="doi">10.1109/JSSC.2003.819174</pub-id></element-citation></ref><ref id="bib27"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Frey</surname> <given-names>U</given-names></name><name><surname>Sedivy</surname> <given-names>J</given-names></name><name><surname>Heer</surname> <given-names>F</given-names></name><name><surname>Pedron</surname> <given-names>R</given-names></name><name><surname>Ballini</surname> <given-names>M</given-names></name><name><surname>Mueller</surname> <given-names>J</given-names></name><name><surname>Bakkum</surname> <given-names>D</given-names></name><name><surname>Hafizovic</surname> <given-names>S</given-names></name><name><surname>Faraci</surname> <given-names>FD</given-names></name><name><surname>Greve</surname> <given-names>F</given-names></name><name><surname>Kirstein</surname> <given-names>K-U</given-names></name><name><surname>Hierlemann</surname> <given-names>A</given-names></name></person-group><year iso-8601-date="2010">2010</year><article-title>Switch-Matrix-Based High-Density microelectrode array in CMOS technology</article-title><source>IEEE Journal of Solid-State Circuits</source><volume>45</volume><fpage>467</fpage><lpage>482</lpage><pub-id pub-id-type="doi">10.1109/JSSC.2009.2035196</pub-id></element-citation></ref><ref id="bib28"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Garcia</surname> <given-names>S</given-names></name><name><surname>Guarino</surname> <given-names>D</given-names></name><name><surname>Jaillet</surname> <given-names>F</given-names></name><name><surname>Jennings</surname> <given-names>T</given-names></name><name><surname>Pröpper</surname> <given-names>R</given-names></name><name><surname>Rautenberg</surname> <given-names>PL</given-names></name><name><surname>Rodgers</surname> <given-names>CC</given-names></name><name><surname>Sobolev</surname> <given-names>A</given-names></name><name><surname>Wachtler</surname> <given-names>T</given-names></name><name><surname>Yger</surname> <given-names>P</given-names></name><name><surname>Davison</surname> <given-names>AP</given-names></name></person-group><year iso-8601-date="2014">2014</year><article-title>Neo: an object model for handling electrophysiology data in multiple formats</article-title><source>Frontiers in Neuroinformatics</source><volume>8</volume><elocation-id>10</elocation-id><pub-id pub-id-type="doi">10.3389/fninf.2014.00010</pub-id><pub-id pub-id-type="pmid">24600386</pub-id></element-citation></ref><ref id="bib29"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Garcia</surname> <given-names>S</given-names></name><name><surname>Fourcaud-Trocmé</surname> <given-names>N</given-names></name></person-group><year iso-8601-date="2009">2009</year><article-title>OpenElectrophy: an electrophysiological data- and Analysis-Sharing framework</article-title><source>Frontiers in Neuroinformatics</source><volume>3</volume><elocation-id>14</elocation-id><pub-id pub-id-type="doi">10.3389/neuro.11.014.2009</pub-id><pub-id pub-id-type="pmid">19521545</pub-id></element-citation></ref><ref id="bib30"><element-citation publication-type="software"><person-group person-group-type="author"><name><surname>Garcia</surname> <given-names>S</given-names></name><name><surname>Pouzat</surname> <given-names>C</given-names></name></person-group><year iso-8601-date="2015">2015</year><source>Tridesclous</source><ext-link ext-link-type="uri" xlink:href="https://github.com/tridesclous/tridesclous">https://github.com/tridesclous/tridesclous</ext-link></element-citation></ref><ref id="bib31"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gleeson</surname> <given-names>P</given-names></name><name><surname>Davison</surname> <given-names>AP</given-names></name><name><surname>Silver</surname> <given-names>RA</given-names></name><name><surname>Ascoli</surname> <given-names>GA</given-names></name></person-group><year iso-8601-date="2017">2017</year><article-title>A commitment to open source in neuroscience</article-title><source>Neuron</source><volume>96</volume><fpage>964</fpage><lpage>965</lpage><pub-id pub-id-type="doi">10.1016/j.neuron.2017.10.013</pub-id><pub-id pub-id-type="pmid">29216458</pub-id></element-citation></ref><ref id="bib32"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Goldberg</surname> <given-names>DH</given-names></name><name><surname>Victor</surname> <given-names>JD</given-names></name><name><surname>Gardner</surname> <given-names>EP</given-names></name><name><surname>Gardner</surname> <given-names>D</given-names></name></person-group><year iso-8601-date="2009">2009</year><article-title>Spike train analysis toolkit: enabling wider application of information-theoretic techniques to neurophysiology</article-title><source>Neuroinformatics</source><volume>7</volume><fpage>165</fpage><lpage>178</lpage><pub-id pub-id-type="doi">10.1007/s12021-009-9049-y</pub-id><pub-id pub-id-type="pmid">19475519</pub-id></element-citation></ref><ref id="bib33"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Harris</surname> <given-names>KD</given-names></name><name><surname>Hirase</surname> <given-names>H</given-names></name><name><surname>Leinekugel</surname> <given-names>X</given-names></name><name><surname>Henze</surname> <given-names>DA</given-names></name><name><surname>Buzsáki</surname> <given-names>G</given-names></name></person-group><year iso-8601-date="2001">2001</year><article-title>Temporal interaction between single spikes and complex spike bursts in hippocampal pyramidal cells</article-title><source>Neuron</source><volume>32</volume><fpage>141</fpage><lpage>149</lpage><pub-id pub-id-type="doi">10.1016/S0896-6273(01)00447-0</pub-id><pub-id pub-id-type="pmid">11604145</pub-id></element-citation></ref><ref id="bib34"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hazan</surname> <given-names>L</given-names></name><name><surname>Zugaro</surname> <given-names>M</given-names></name><name><surname>Buzsáki</surname> <given-names>G</given-names></name></person-group><year iso-8601-date="2006">2006</year><article-title>Klusters, NeuroScope, NDManager: a free software suite for neurophysiological data processing and visualization</article-title><source>Journal of Neuroscience Methods</source><volume>155</volume><fpage>207</fpage><lpage>216</lpage><pub-id pub-id-type="doi">10.1016/j.jneumeth.2006.01.017</pub-id><pub-id pub-id-type="pmid">16580733</pub-id></element-citation></ref><ref id="bib35"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hilgen</surname> <given-names>G</given-names></name><name><surname>Sorbaro</surname> <given-names>M</given-names></name><name><surname>Pirmoradian</surname> <given-names>S</given-names></name><name><surname>Muthmann</surname> <given-names>JO</given-names></name><name><surname>Kepiro</surname> <given-names>IE</given-names></name><name><surname>Ullo</surname> <given-names>S</given-names></name><name><surname>Ramirez</surname> <given-names>CJ</given-names></name><name><surname>Puente Encinas</surname> <given-names>A</given-names></name><name><surname>Maccione</surname> <given-names>A</given-names></name><name><surname>Berdondini</surname> <given-names>L</given-names></name><name><surname>Murino</surname> <given-names>V</given-names></name><name><surname>Sona</surname> <given-names>D</given-names></name><name><surname>Cella Zanacchi</surname> <given-names>F</given-names></name><name><surname>Sernagor</surname> <given-names>E</given-names></name><name><surname>Hennig</surname> <given-names>MH</given-names></name></person-group><year iso-8601-date="2017">2017</year><article-title>Unsupervised spike sorting for Large-Scale, High-Density multielectrode arrays</article-title><source>Cell Reports</source><volume>18</volume><fpage>2521</fpage><lpage>2532</lpage><pub-id pub-id-type="doi">10.1016/j.celrep.2017.02.038</pub-id><pub-id pub-id-type="pmid">28273464</pub-id></element-citation></ref><ref id="bib36"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hill</surname> <given-names>DN</given-names></name><name><surname>Mehta</surname> <given-names>SB</given-names></name><name><surname>Kleinfeld</surname> <given-names>D</given-names></name></person-group><year iso-8601-date="2011">2011</year><article-title>Quality metrics to accompany spike sorting of extracellular signals</article-title><source>Journal of Neuroscience</source><volume>31</volume><fpage>8699</fpage><lpage>8705</lpage><pub-id pub-id-type="doi">10.1523/JNEUROSCI.0971-11.2011</pub-id><pub-id pub-id-type="pmid">21677152</pub-id></element-citation></ref><ref id="bib37"><element-citation publication-type="software"><person-group person-group-type="author"><name><surname>Hurwitz</surname> <given-names>CL</given-names></name><name><surname>Hurwitz</surname> <given-names>R</given-names></name><collab>SpikeInterface</collab></person-group><year iso-8601-date="2020">2020</year><source>Spikely</source><ext-link ext-link-type="uri" xlink:href="https://github.com/SpikeInterface/spikely">https://github.com/SpikeInterface/spikely</ext-link></element-citation></ref><ref id="bib38"><element-citation publication-type="software"><person-group person-group-type="author"><collab>Intan</collab></person-group><year iso-8601-date="2010">2010</year><source>Intan technologies</source><ext-link ext-link-type="uri" xlink:href="http://intantech.com/">http://intantech.com/</ext-link></element-citation></ref><ref id="bib39"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Jun</surname> <given-names>JJ</given-names></name><name><surname>Steinmetz</surname> <given-names>NA</given-names></name><name><surname>Siegle</surname> <given-names>JH</given-names></name><name><surname>Denman</surname> <given-names>DJ</given-names></name><name><surname>Bauza</surname> <given-names>M</given-names></name><name><surname>Barbarits</surname> <given-names>B</given-names></name><name><surname>Lee</surname> <given-names>AK</given-names></name><name><surname>Anastassiou</surname> <given-names>CA</given-names></name><name><surname>Andrei</surname> <given-names>A</given-names></name><name><surname>Aydın</surname> <given-names>Ç</given-names></name><name><surname>Barbic</surname> <given-names>M</given-names></name><name><surname>Blanche</surname> <given-names>TJ</given-names></name><name><surname>Bonin</surname> <given-names>V</given-names></name><name><surname>Couto</surname> <given-names>J</given-names></name><name><surname>Dutta</surname> <given-names>B</given-names></name><name><surname>Gratiy</surname> <given-names>SL</given-names></name><name><surname>Gutnisky</surname> <given-names>DA</given-names></name><name><surname>Häusser</surname> <given-names>M</given-names></name><name><surname>Karsh</surname> <given-names>B</given-names></name><name><surname>Ledochowitsch</surname> <given-names>P</given-names></name><name><surname>Lopez</surname> <given-names>CM</given-names></name><name><surname>Mitelut</surname> <given-names>C</given-names></name><name><surname>Musa</surname> <given-names>S</given-names></name><name><surname>Okun</surname> <given-names>M</given-names></name><name><surname>Pachitariu</surname> <given-names>M</given-names></name><name><surname>Putzeys</surname> <given-names>J</given-names></name><name><surname>Rich</surname> <given-names>PD</given-names></name><name><surname>Rossant</surname> <given-names>C</given-names></name><name><surname>Sun</surname> <given-names>WL</given-names></name><name><surname>Svoboda</surname> <given-names>K</given-names></name><name><surname>Carandini</surname> <given-names>M</given-names></name><name><surname>Harris</surname> <given-names>KD</given-names></name><name><surname>Koch</surname> <given-names>C</given-names></name><name><surname>O'Keefe</surname> <given-names>J</given-names></name><name><surname>Harris</surname> <given-names>TD</given-names></name></person-group><year iso-8601-date="2017">2017a</year><article-title>Fully integrated silicon probes for high-density recording of neural activity</article-title><source>Nature</source><volume>551</volume><fpage>232</fpage><lpage>236</lpage><pub-id pub-id-type="doi">10.1038/nature24636</pub-id><pub-id pub-id-type="pmid">29120427</pub-id></element-citation></ref><ref id="bib40"><element-citation publication-type="preprint"><person-group person-group-type="author"><name><surname>Jun</surname> <given-names>JJ</given-names></name><name><surname>Mitelut</surname> <given-names>C</given-names></name><name><surname>Lai</surname> <given-names>C</given-names></name><name><surname>Gratiy</surname> <given-names>S</given-names></name><name><surname>Anastassiou</surname> <given-names>C</given-names></name><name><surname>Harris</surname> <given-names>TD</given-names></name></person-group><year iso-8601-date="2017">2017b</year><article-title>Real-time spike sorting platform for high-density extracellular probes with ground-truth validation and drift correction</article-title><source>bioRxiv</source><pub-id pub-id-type="doi">10.1101/101030</pub-id></element-citation></ref><ref id="bib41"><element-citation publication-type="software"><person-group person-group-type="author"><name><surname>Jun</surname> <given-names>JJ</given-names></name><name><surname>Magland</surname> <given-names>JF</given-names></name><name><surname>Mitelut</surname> <given-names>C</given-names></name><name><surname>Barnett</surname> <given-names>AH</given-names></name></person-group><year iso-8601-date="2020">2020</year><source>IronClust: Scalable and Drift-Resistant Spike Sorting for Long-Duration, High-Channel Count Recordings</source></element-citation></ref><ref id="bib42"><element-citation publication-type="software"><person-group person-group-type="author"><name><surname>Karsh</surname> <given-names>B</given-names></name></person-group><year iso-8601-date="2016">2016</year><source>SpikeGLX</source><ext-link ext-link-type="uri" xlink:href="https://billkarsh.github.io/SpikeGLX/">https://billkarsh.github.io/SpikeGLX/</ext-link></element-citation></ref><ref id="bib43"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kuhn</surname> <given-names>HW</given-names></name></person-group><year iso-8601-date="1955">1955</year><article-title>The hungarian method for the assignment problem</article-title><source>Naval Research Logistics Quarterly</source><volume>2</volume><fpage>83</fpage><lpage>97</lpage><pub-id pub-id-type="doi">10.1002/nav.3800020109</pub-id></element-citation></ref><ref id="bib44"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kwon</surname> <given-names>KY</given-names></name><name><surname>Eldawlatly</surname> <given-names>S</given-names></name><name><surname>Oweiss</surname> <given-names>K</given-names></name></person-group><year iso-8601-date="2012">2012</year><article-title>NeuroQuest: a comprehensive analysis tool for extracellular neural ensemble recordings</article-title><source>Journal of Neuroscience Methods</source><volume>204</volume><fpage>189</fpage><lpage>201</lpage><pub-id pub-id-type="doi">10.1016/j.jneumeth.2011.10.027</pub-id><pub-id pub-id-type="pmid">22101141</pub-id></element-citation></ref><ref id="bib45"><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Lee</surname> <given-names>JH</given-names></name><name><surname>Carlson</surname> <given-names>DE</given-names></name><name><surname>Razaghi</surname> <given-names>HS</given-names></name><name><surname>Yao</surname> <given-names>W</given-names></name><name><surname>Goetz</surname> <given-names>GA</given-names></name><name><surname>Hagen</surname> <given-names>E</given-names></name><name><surname>Batty</surname> <given-names>E</given-names></name><name><surname>Chichilnisky</surname> <given-names>E</given-names></name><name><surname>Einevoll</surname> <given-names>GT</given-names></name><name><surname>Paninski</surname> <given-names>L</given-names></name></person-group><year iso-8601-date="2017">2017</year><chapter-title>YASS: yet another spike sorter</chapter-title><person-group person-group-type="editor"><name><surname>Becker</surname> <given-names>S</given-names></name></person-group><source>Advances in Neural Information Processing Systems</source><publisher-name>MIT Press</publisher-name><fpage>4002</fpage><lpage>4012</lpage></element-citation></ref><ref id="bib46"><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Lopez</surname> <given-names>CM</given-names></name><name><surname>Mitra</surname> <given-names>S</given-names></name><name><surname>Putzeys</surname> <given-names>J</given-names></name><name><surname>Raducanu</surname> <given-names>B</given-names></name><name><surname>Ballini</surname> <given-names>M</given-names></name><name><surname>Andrei</surname> <given-names>A</given-names></name><name><surname>Severi</surname> <given-names>S</given-names></name><name><surname>Welkenhuysen</surname> <given-names>M</given-names></name><name><surname>Van Hoof</surname> <given-names>C</given-names></name><name><surname>Musa</surname> <given-names>S</given-names></name></person-group><year iso-8601-date="2016">2016</year><article-title>22.7 a 966-electrode neural probe with 384 configurable channels in 0.13 μm soi cmos</article-title><conf-name>Solid-State Circuits Conference (ISSCC), 2016 IEEE International</conf-name><fpage>392</fpage><lpage>393</lpage><pub-id pub-id-type="doi">10.1109/ISSCC.2016.7418072</pub-id></element-citation></ref><ref id="bib47"><element-citation publication-type="preprint"><person-group person-group-type="author"><name><surname>Magland</surname> <given-names>JF</given-names></name><name><surname>Jun</surname> <given-names>JJ</given-names></name><name><surname>Lovero</surname> <given-names>E</given-names></name><name><surname>Morley</surname> <given-names>AJ</given-names></name><name><surname>Hurwitz</surname> <given-names>CL</given-names></name><name><surname>Buccino</surname> <given-names>AP</given-names></name><name><surname>Garcia</surname> <given-names>S</given-names></name><name><surname>Barnett</surname> <given-names>AH</given-names></name></person-group><year iso-8601-date="2020">2020</year><article-title>SpikeForest: reproducible web-facing ground-truth validation of automated neural spike sorters</article-title><source>bioRxiv</source><pub-id pub-id-type="doi">10.1101/2020.01.14.900688</pub-id></element-citation></ref><ref id="bib48"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Mahmud</surname> <given-names>M</given-names></name><name><surname>Bertoldo</surname> <given-names>A</given-names></name><name><surname>Girardi</surname> <given-names>S</given-names></name><name><surname>Maschietto</surname> <given-names>M</given-names></name><name><surname>Vassanelli</surname> <given-names>S</given-names></name></person-group><year iso-8601-date="2012">2012</year><article-title>SigMate: a Matlab-based automated tool for extracellular neuronal signal processing and analysis</article-title><source>Journal of Neuroscience Methods</source><volume>207</volume><fpage>97</fpage><lpage>112</lpage><pub-id pub-id-type="doi">10.1016/j.jneumeth.2012.03.009</pub-id><pub-id pub-id-type="pmid">22513383</pub-id></element-citation></ref><ref id="bib49"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Markram</surname> <given-names>H</given-names></name><name><surname>Muller</surname> <given-names>E</given-names></name><name><surname>Ramaswamy</surname> <given-names>S</given-names></name><name><surname>Reimann</surname> <given-names>MW</given-names></name><name><surname>Abdellah</surname> <given-names>M</given-names></name><name><surname>Sanchez</surname> <given-names>CA</given-names></name><name><surname>Ailamaki</surname> <given-names>A</given-names></name><name><surname>Alonso-Nanclares</surname> <given-names>L</given-names></name><name><surname>Antille</surname> <given-names>N</given-names></name><name><surname>Arsever</surname> <given-names>S</given-names></name><name><surname>Kahou</surname> <given-names>GA</given-names></name><name><surname>Berger</surname> <given-names>TK</given-names></name><name><surname>Bilgili</surname> <given-names>A</given-names></name><name><surname>Buncic</surname> <given-names>N</given-names></name><name><surname>Chalimourda</surname> <given-names>A</given-names></name><name><surname>Chindemi</surname> <given-names>G</given-names></name><name><surname>Courcol</surname> <given-names>JD</given-names></name><name><surname>Delalondre</surname> <given-names>F</given-names></name><name><surname>Delattre</surname> <given-names>V</given-names></name><name><surname>Druckmann</surname> <given-names>S</given-names></name><name><surname>Dumusc</surname> <given-names>R</given-names></name><name><surname>Dynes</surname> <given-names>J</given-names></name><name><surname>Eilemann</surname> <given-names>S</given-names></name><name><surname>Gal</surname> <given-names>E</given-names></name><name><surname>Gevaert</surname> <given-names>ME</given-names></name><name><surname>Ghobril</surname> <given-names>JP</given-names></name><name><surname>Gidon</surname> <given-names>A</given-names></name><name><surname>Graham</surname> <given-names>JW</given-names></name><name><surname>Gupta</surname> <given-names>A</given-names></name><name><surname>Haenel</surname> <given-names>V</given-names></name><name><surname>Hay</surname> <given-names>E</given-names></name><name><surname>Heinis</surname> <given-names>T</given-names></name><name><surname>Hernando</surname> <given-names>JB</given-names></name><name><surname>Hines</surname> <given-names>M</given-names></name><name><surname>Kanari</surname> <given-names>L</given-names></name><name><surname>Keller</surname> <given-names>D</given-names></name><name><surname>Kenyon</surname> <given-names>J</given-names></name><name><surname>Khazen</surname> <given-names>G</given-names></name><name><surname>Kim</surname> <given-names>Y</given-names></name><name><surname>King</surname> <given-names>JG</given-names></name><name><surname>Kisvarday</surname> <given-names>Z</given-names></name><name><surname>Kumbhar</surname> <given-names>P</given-names></name><name><surname>Lasserre</surname> <given-names>S</given-names></name><name><surname>Le Bé</surname> <given-names>JV</given-names></name><name><surname>Magalhães</surname> <given-names>BR</given-names></name><name><surname>Merchán-Pérez</surname> <given-names>A</given-names></name><name><surname>Meystre</surname> <given-names>J</given-names></name><name><surname>Morrice</surname> <given-names>BR</given-names></name><name><surname>Muller</surname> <given-names>J</given-names></name><name><surname>Muñoz-Céspedes</surname> <given-names>A</given-names></name><name><surname>Muralidhar</surname> <given-names>S</given-names></name><name><surname>Muthurasa</surname> <given-names>K</given-names></name><name><surname>Nachbaur</surname> <given-names>D</given-names></name><name><surname>Newton</surname> <given-names>TH</given-names></name><name><surname>Nolte</surname> <given-names>M</given-names></name><name><surname>Ovcharenko</surname> <given-names>A</given-names></name><name><surname>Palacios</surname> <given-names>J</given-names></name><name><surname>Pastor</surname> <given-names>L</given-names></name><name><surname>Perin</surname> <given-names>R</given-names></name><name><surname>Ranjan</surname> <given-names>R</given-names></name><name><surname>Riachi</surname> <given-names>I</given-names></name><name><surname>Rodríguez</surname> <given-names>JR</given-names></name><name><surname>Riquelme</surname> <given-names>JL</given-names></name><name><surname>Rössert</surname> <given-names>C</given-names></name><name><surname>Sfyrakis</surname> <given-names>K</given-names></name><name><surname>Shi</surname> <given-names>Y</given-names></name><name><surname>Shillcock</surname> <given-names>JC</given-names></name><name><surname>Silberberg</surname> <given-names>G</given-names></name><name><surname>Silva</surname> <given-names>R</given-names></name><name><surname>Tauheed</surname> <given-names>F</given-names></name><name><surname>Telefont</surname> <given-names>M</given-names></name><name><surname>Toledo-Rodriguez</surname> <given-names>M</given-names></name><name><surname>Tränkler</surname> <given-names>T</given-names></name><name><surname>Van Geit</surname> <given-names>W</given-names></name><name><surname>Díaz</surname> <given-names>JV</given-names></name><name><surname>Walker</surname> <given-names>R</given-names></name><name><surname>Wang</surname> <given-names>Y</given-names></name><name><surname>Zaninetta</surname> <given-names>SM</given-names></name><name><surname>DeFelipe</surname> <given-names>J</given-names></name><name><surname>Hill</surname> <given-names>SL</given-names></name><name><surname>Segev</surname> <given-names>I</given-names></name><name><surname>Schürmann</surname> <given-names>F</given-names></name></person-group><year iso-8601-date="2015">2015</year><article-title>Reconstruction and simulation of neocortical microcircuitry</article-title><source>Cell</source><volume>163</volume><fpage>456</fpage><lpage>492</lpage><pub-id pub-id-type="doi">10.1016/j.cell.2015.09.029</pub-id><pub-id pub-id-type="pmid">26451489</pub-id></element-citation></ref><ref id="bib50"><element-citation publication-type="preprint"><person-group person-group-type="author"><name><surname>Marques-Smith</surname> <given-names>A</given-names></name><name><surname>Neto</surname> <given-names>JP</given-names></name><name><surname>Lopes</surname> <given-names>G</given-names></name><name><surname>Nogueira</surname> <given-names>J</given-names></name><name><surname>Calcaterra</surname> <given-names>L</given-names></name><name><surname>Frazão</surname> <given-names>J</given-names></name><name><surname>Kim</surname> <given-names>D</given-names></name><name><surname>Phillips</surname> <given-names>MG</given-names></name><name><surname>Dimitriadis</surname> <given-names>G</given-names></name><name><surname>Kampff</surname> <given-names>A</given-names></name></person-group><year iso-8601-date="2018">2018a</year><article-title>Recording from the same neuron with high-density cmos probes and patch-clamp: a ground-truth dataset and an experiment in collaboration</article-title><source>bioRxiv</source><pub-id pub-id-type="doi">10.1101/370080</pub-id></element-citation></ref><ref id="bib51"><element-citation publication-type="software"><person-group person-group-type="author"><name><surname>Marques-Smith</surname> <given-names>A</given-names></name><name><surname>Neto</surname> <given-names>JP</given-names></name><name><surname>Lopes</surname> <given-names>G</given-names></name><name><surname>Nogueira</surname> <given-names>J</given-names></name><name><surname>Calcaterra</surname> <given-names>L</given-names></name><name><surname>Frazão</surname> <given-names>J</given-names></name><name><surname>Kim</surname> <given-names>D</given-names></name><name><surname>Phillips</surname> <given-names>MG</given-names></name><name><surname>Dimitriadis</surname> <given-names>G</given-names></name><name><surname>Kampff</surname> <given-names>A</given-names></name></person-group><year iso-8601-date="2018">2018b</year><source>Simultaneous Patch-Clamp and Dense Cmos Probe Extracellular Recordings From the Same Cortical Neuron in Anaesthetized Rats, CRCNS</source></element-citation></ref><ref id="bib52"><element-citation publication-type="software"><person-group person-group-type="author"><collab>MaxWell</collab></person-group><year iso-8601-date="2020">2020</year><source>MaxWell biosystems</source><ext-link ext-link-type="uri" xlink:href="https://www.mxwbio.com/">https://www.mxwbio.com/</ext-link></element-citation></ref><ref id="bib53"><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>McKinney</surname> <given-names>W</given-names></name></person-group><year iso-8601-date="2010">2010</year><article-title>Data structures for statistical computing in Python</article-title><conf-name>Proceedings of the 9th Python in Science Conference</conf-name><fpage>51</fpage><lpage>56</lpage></element-citation></ref><ref id="bib54"><element-citation publication-type="software"><person-group person-group-type="author"><collab>MCS</collab></person-group><year iso-8601-date="2020">2020</year><source>Multi channel systems</source><ext-link ext-link-type="uri" xlink:href="https://www.multichannelsystems.com/">https://www.multichannelsystems.com/</ext-link></element-citation></ref><ref id="bib55"><element-citation publication-type="software"><person-group person-group-type="author"><collab>MEA1k</collab></person-group><year iso-8601-date="2020">2020</year><source>MEA1k</source><ext-link ext-link-type="uri" xlink:href="https://bsse.ethz.ch/bel/research/cmos-microsystems/microelectrode-systems.html">https://bsse.ethz.ch/bel/research/cmos-microsystems/microelectrode-systems.html</ext-link></element-citation></ref><ref id="bib56"><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Mucha</surname> <given-names>HJ</given-names></name></person-group><year iso-8601-date="1995">1995</year><chapter-title>XClust: clustering in an interactive way</chapter-title><person-group person-group-type="editor"><name><surname>Berwin</surname> <given-names>T</given-names></name></person-group><source>XploRe: An Interactive Statistical Computing Environment</source><publisher-name>Springer</publisher-name><fpage>141</fpage><lpage>168</lpage><pub-id pub-id-type="doi">10.1007/978-1-4612-4214-7</pub-id></element-citation></ref><ref id="bib57"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Muller</surname> <given-names>E</given-names></name><name><surname>Bednar</surname> <given-names>JA</given-names></name><name><surname>Diesmann</surname> <given-names>M</given-names></name><name><surname>Gewaltig</surname> <given-names>MO</given-names></name><name><surname>Hines</surname> <given-names>M</given-names></name><name><surname>Davison</surname> <given-names>AP</given-names></name></person-group><year iso-8601-date="2015">2015</year><article-title>Python in neuroscience</article-title><source>Frontiers in Neuroinformatics</source><volume>9</volume><elocation-id>11</elocation-id><pub-id pub-id-type="doi">10.3389/fninf.2015.00011</pub-id><pub-id pub-id-type="pmid">25926788</pub-id></element-citation></ref><ref id="bib58"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Müller</surname> <given-names>J</given-names></name><name><surname>Ballini</surname> <given-names>M</given-names></name><name><surname>Livi</surname> <given-names>P</given-names></name><name><surname>Chen</surname> <given-names>Y</given-names></name><name><surname>Radivojevic</surname> <given-names>M</given-names></name><name><surname>Shadmani</surname> <given-names>A</given-names></name><name><surname>Viswam</surname> <given-names>V</given-names></name><name><surname>Jones</surname> <given-names>IL</given-names></name><name><surname>Fiscella</surname> <given-names>M</given-names></name><name><surname>Diggelmann</surname> <given-names>R</given-names></name><name><surname>Stettler</surname> <given-names>A</given-names></name><name><surname>Frey</surname> <given-names>U</given-names></name><name><surname>Bakkum</surname> <given-names>DJ</given-names></name><name><surname>Hierlemann</surname> <given-names>A</given-names></name></person-group><year iso-8601-date="2015">2015</year><article-title>High-resolution CMOS MEA platform to study neurons at Subcellular, cellular, and network levels</article-title><source>Lab on a Chip</source><volume>15</volume><fpage>2767</fpage><lpage>2780</lpage><pub-id pub-id-type="doi">10.1039/C5LC00133A</pub-id><pub-id pub-id-type="pmid">25973786</pub-id></element-citation></ref><ref id="bib59"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Nasiotis</surname> <given-names>K</given-names></name><name><surname>Cousineau</surname> <given-names>M</given-names></name><name><surname>Tadel</surname> <given-names>F</given-names></name><name><surname>Peyrache</surname> <given-names>A</given-names></name><name><surname>Leahy</surname> <given-names>RM</given-names></name><name><surname>Pack</surname> <given-names>CC</given-names></name><name><surname>Baillet</surname> <given-names>S</given-names></name></person-group><year iso-8601-date="2019">2019a</year><article-title>Integrated open-source software for multiscale electrophysiology</article-title><source>Scientific Data</source><volume>6</volume><pub-id pub-id-type="doi">10.1038/s41597-019-0242-z</pub-id><pub-id pub-id-type="pmid">31653867</pub-id></element-citation></ref><ref id="bib60"><element-citation publication-type="software"><person-group person-group-type="author"><name><surname>Nasiotis</surname> <given-names>K</given-names></name><name><surname>Cousineau</surname> <given-names>M</given-names></name><name><surname>Tadel</surname> <given-names>F</given-names></name><name><surname>Peyrache</surname> <given-names>A</given-names></name><name><surname>Leahy</surname> <given-names>RM</given-names></name><name><surname>Pack</surname> <given-names>CC</given-names></name><name><surname>Baillet</surname> <given-names>S</given-names></name><collab>Brainstorm</collab></person-group><year iso-8601-date="2019">2019b</year><source>Brainstorm3</source><ext-link ext-link-type="uri" xlink:href="https://github.com/brainstorm-tools/brainstorm3">https://github.com/brainstorm-tools/brainstorm3</ext-link></element-citation></ref><ref id="bib61"><element-citation publication-type="software"><person-group person-group-type="author"><collab>Neuralynx</collab></person-group><year iso-8601-date="2020">2020</year><source>Neuralynx</source><ext-link ext-link-type="uri" xlink:href="https://neuralynx.com/">https://neuralynx.com/</ext-link></element-citation></ref><ref id="bib62"><element-citation publication-type="software"><person-group person-group-type="author"><collab>NIX</collab></person-group><year iso-8601-date="2015">2015</year><source>Neuroscience Information Exchange Format - Nix</source><ext-link ext-link-type="uri" xlink:href="http://g-node.github.io/nix/">http://g-node.github.io/nix/</ext-link></element-citation></ref><ref id="bib63"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Oostenveld</surname> <given-names>R</given-names></name><name><surname>Fries</surname> <given-names>P</given-names></name><name><surname>Maris</surname> <given-names>E</given-names></name><name><surname>Schoffelen</surname> <given-names>JM</given-names></name></person-group><year iso-8601-date="2011">2011</year><article-title>FieldTrip: open source software for advanced analysis of MEG, EEG, and invasive electrophysiological data</article-title><source>Computational Intelligence and Neuroscience</source><volume>2011</volume><fpage>1</fpage><lpage>9</lpage><pub-id pub-id-type="doi">10.1155/2011/156869</pub-id><pub-id pub-id-type="pmid">21253357</pub-id></element-citation></ref><ref id="bib64"><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Pachitariu</surname> <given-names>M</given-names></name><name><surname>Steinmetz</surname> <given-names>NA</given-names></name><name><surname>Kadir</surname> <given-names>SN</given-names></name></person-group><year iso-8601-date="2016">2016</year><chapter-title>Fast and accurate spike sorting of high-channel count probes with kilosort</chapter-title><person-group person-group-type="editor"><name><surname>Dietterich</surname> <given-names>T. G</given-names></name></person-group><source>Advances in Neural Information Processing Systems</source><publisher-name>MIT press</publisher-name><fpage>4448</fpage><lpage>4456</lpage></element-citation></ref><ref id="bib65"><element-citation publication-type="software"><person-group person-group-type="author"><name><surname>Pachitariu</surname> <given-names>M</given-names></name><name><surname>Steinmetz</surname> <given-names>NA</given-names></name><name><surname>Colonell</surname> <given-names>J</given-names></name></person-group><year iso-8601-date="2018">2018</year><source>Kilosort2</source><ext-link ext-link-type="uri" xlink:href="https://github.com/MouseLand/Kilosort2">https://github.com/MouseLand/Kilosort2</ext-link></element-citation></ref><ref id="bib66"><element-citation publication-type="software"><person-group person-group-type="author"><collab>Plexon</collab></person-group><year iso-8601-date="2020">2020</year><source>Plexon offline sorter</source><ext-link ext-link-type="uri" xlink:href="https://plexon.com/products/offline-sorter/">https://plexon.com/products/offline-sorter/</ext-link></element-citation></ref><ref id="bib67"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ramaswamy</surname> <given-names>S</given-names></name><name><surname>Courcol</surname> <given-names>JD</given-names></name><name><surname>Abdellah</surname> <given-names>M</given-names></name><name><surname>Adaszewski</surname> <given-names>SR</given-names></name><name><surname>Antille</surname> <given-names>N</given-names></name><name><surname>Arsever</surname> <given-names>S</given-names></name><name><surname>Atenekeng</surname> <given-names>G</given-names></name><name><surname>Bilgili</surname> <given-names>A</given-names></name><name><surname>Brukau</surname> <given-names>Y</given-names></name><name><surname>Chalimourda</surname> <given-names>A</given-names></name><name><surname>Chindemi</surname> <given-names>G</given-names></name><name><surname>Delalondre</surname> <given-names>F</given-names></name><name><surname>Dumusc</surname> <given-names>R</given-names></name><name><surname>Eilemann</surname> <given-names>S</given-names></name><name><surname>Gevaert</surname> <given-names>ME</given-names></name><name><surname>Gleeson</surname> <given-names>P</given-names></name><name><surname>Graham</surname> <given-names>JW</given-names></name><name><surname>Hernando</surname> <given-names>JB</given-names></name><name><surname>Kanari</surname> <given-names>L</given-names></name><name><surname>Katkov</surname> <given-names>Y</given-names></name><name><surname>Keller</surname> <given-names>D</given-names></name><name><surname>King</surname> <given-names>JG</given-names></name><name><surname>Ranjan</surname> <given-names>R</given-names></name><name><surname>Reimann</surname> <given-names>MW</given-names></name><name><surname>Rössert</surname> <given-names>C</given-names></name><name><surname>Shi</surname> <given-names>Y</given-names></name><name><surname>Shillcock</surname> <given-names>JC</given-names></name><name><surname>Telefont</surname> <given-names>M</given-names></name><name><surname>Van Geit</surname> <given-names>W</given-names></name><name><surname>Diaz</surname> <given-names>JV</given-names></name><name><surname>Walker</surname> <given-names>R</given-names></name><name><surname>Wang</surname> <given-names>Y</given-names></name><name><surname>Zaninetta</surname> <given-names>SM</given-names></name><name><surname>DeFelipe</surname> <given-names>J</given-names></name><name><surname>Hill</surname> <given-names>SL</given-names></name><name><surname>Muller</surname> <given-names>J</given-names></name><name><surname>Segev</surname> <given-names>I</given-names></name><name><surname>Schürmann</surname> <given-names>F</given-names></name><name><surname>Muller</surname> <given-names>EB</given-names></name><name><surname>Markram</surname> <given-names>H</given-names></name></person-group><year iso-8601-date="2015">2015</year><article-title>The neocortical microcircuit collaboration portal: a resource for rat somatosensory cortex</article-title><source>Frontiers in Neural Circuits</source><volume>9</volume><elocation-id>44</elocation-id><pub-id pub-id-type="doi">10.3389/fncir.2015.00044</pub-id><pub-id pub-id-type="pmid">26500503</pub-id></element-citation></ref><ref id="bib68"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Regalia</surname> <given-names>G</given-names></name><name><surname>Coelli</surname> <given-names>S</given-names></name><name><surname>Biffi</surname> <given-names>E</given-names></name><name><surname>Ferrigno</surname> <given-names>G</given-names></name><name><surname>Pedrocchi</surname> <given-names>A</given-names></name></person-group><year iso-8601-date="2016">2016</year><article-title>A framework for the comparative assessment of neuronal spike sorting algorithms towards more accurate Off-Line and On-Line microelectrode arrays data analysis</article-title><source>Computational Intelligence and Neuroscience</source><volume>2016</volume><fpage>1</fpage><lpage>19</lpage><pub-id pub-id-type="doi">10.1155/2016/8416237</pub-id></element-citation></ref><ref id="bib69"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Rey</surname> <given-names>HG</given-names></name><name><surname>Pedreira</surname> <given-names>C</given-names></name><name><surname>Quian Quiroga</surname> <given-names>R</given-names></name></person-group><year iso-8601-date="2015">2015</year><article-title>Past, present and future of spike sorting techniques</article-title><source>Brain Research Bulletin</source><volume>119</volume><fpage>106</fpage><lpage>117</lpage><pub-id pub-id-type="doi">10.1016/j.brainresbull.2015.04.007</pub-id><pub-id pub-id-type="pmid">25931392</pub-id></element-citation></ref><ref id="bib70"><element-citation publication-type="software"><person-group person-group-type="author"><name><surname>Rossant</surname> <given-names>C</given-names></name><name><surname>Kadir</surname> <given-names>S</given-names></name><name><surname>Goodman</surname> <given-names>D</given-names></name><name><surname>Hunter</surname> <given-names>M</given-names></name><name><surname>Harris</surname> <given-names>K</given-names></name></person-group><year iso-8601-date="2014">2014</year><source>Phy</source><ext-link ext-link-type="uri" xlink:href="https://github.com/cortex-lab/phy">https://github.com/cortex-lab/phy</ext-link></element-citation></ref><ref id="bib71"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Rossant</surname> <given-names>C</given-names></name><name><surname>Kadir</surname> <given-names>SN</given-names></name><name><surname>Goodman</surname> <given-names>DFM</given-names></name><name><surname>Schulman</surname> <given-names>J</given-names></name><name><surname>Hunter</surname> <given-names>MLD</given-names></name><name><surname>Saleem</surname> <given-names>AB</given-names></name><name><surname>Grosmark</surname> <given-names>A</given-names></name><name><surname>Belluscio</surname> <given-names>M</given-names></name><name><surname>Denfield</surname> <given-names>GH</given-names></name><name><surname>Ecker</surname> <given-names>AS</given-names></name><name><surname>Tolias</surname> <given-names>AS</given-names></name><name><surname>Solomon</surname> <given-names>S</given-names></name><name><surname>Buzsaki</surname> <given-names>G</given-names></name><name><surname>Carandini</surname> <given-names>M</given-names></name><name><surname>Harris</surname> <given-names>KD</given-names></name></person-group><year iso-8601-date="2016">2016</year><article-title>Spike sorting for large, dense electrode arrays</article-title><source>Nature Neuroscience</source><volume>19</volume><fpage>634</fpage><lpage>641</lpage><pub-id pub-id-type="doi">10.1038/nn.4268</pub-id><pub-id pub-id-type="pmid">26974951</pub-id></element-citation></ref><ref id="bib72"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Rossant</surname> <given-names>C</given-names></name><name><surname>Harris</surname> <given-names>KD</given-names></name></person-group><year iso-8601-date="2013">2013</year><article-title>Hardware-accelerated interactive data visualization for neuroscience in Python</article-title><source>Frontiers in Neuroinformatics</source><volume>7</volume><elocation-id>36</elocation-id><pub-id pub-id-type="doi">10.3389/fninf.2013.00036</pub-id><pub-id pub-id-type="pmid">24391582</pub-id></element-citation></ref><ref id="bib73"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Rousseeuw</surname> <given-names>PJ</given-names></name></person-group><year iso-8601-date="1987">1987</year><article-title>Silhouettes: a graphical aid to the interpretation and validation of cluster analysis</article-title><source>Journal of Computational and Applied Mathematics</source><volume>20</volume><fpage>53</fpage><lpage>65</lpage><pub-id pub-id-type="doi">10.1016/0377-0427(87)90125-7</pub-id></element-citation></ref><ref id="bib74"><element-citation publication-type="preprint"><person-group person-group-type="author"><name><surname>Ruebel</surname> <given-names>O</given-names></name><name><surname>Tritt</surname> <given-names>A</given-names></name><name><surname>Dichter</surname> <given-names>B</given-names></name><name><surname>Braun</surname> <given-names>T</given-names></name><name><surname>Cain</surname> <given-names>N</given-names></name><name><surname>Clack</surname> <given-names>N</given-names></name><name><surname>Davidson</surname> <given-names>TJ</given-names></name><name><surname>Dougherty</surname> <given-names>M</given-names></name><name><surname>Fillion-Robin</surname> <given-names>JC</given-names></name><name><surname>Graddis</surname> <given-names>N</given-names></name></person-group><year iso-8601-date="2019">2019</year><article-title>NWB: n 2.0: an accessible data standard for neurophysiology</article-title><source>bioRxiv</source><pub-id pub-id-type="doi">10.1101/523035</pub-id></element-citation></ref><ref id="bib75"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Rutishauser</surname> <given-names>U</given-names></name><name><surname>Schuman</surname> <given-names>EM</given-names></name><name><surname>Mamelak</surname> <given-names>AN</given-names></name></person-group><year iso-8601-date="2006">2006</year><article-title>Online detection and sorting of extracellularly recorded action potentials in human medial temporal lobe recordings, in vivo</article-title><source>Journal of Neuroscience Methods</source><volume>154</volume><fpage>204</fpage><lpage>224</lpage><pub-id pub-id-type="doi">10.1016/j.jneumeth.2005.12.033</pub-id><pub-id pub-id-type="pmid">16488479</pub-id></element-citation></ref><ref id="bib76"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Schmitzer-Torbert</surname> <given-names>N</given-names></name><name><surname>Redish</surname> <given-names>AD</given-names></name></person-group><year iso-8601-date="2004">2004</year><article-title>Neuronal activity in the rodent dorsal striatum in sequential navigation: separation of spatial and reward responses on the multiple T task</article-title><source>Journal of Neurophysiology</source><volume>91</volume><fpage>2259</fpage><lpage>2272</lpage><pub-id pub-id-type="doi">10.1152/jn.00687.2003</pub-id><pub-id pub-id-type="pmid">14736863</pub-id></element-citation></ref><ref id="bib77"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Siegle</surname> <given-names>JH</given-names></name><name><surname>López</surname> <given-names>AC</given-names></name><name><surname>Patel</surname> <given-names>YA</given-names></name><name><surname>Abramov</surname> <given-names>K</given-names></name><name><surname>Ohayon</surname> <given-names>S</given-names></name><name><surname>Voigts</surname> <given-names>J</given-names></name></person-group><year iso-8601-date="2017">2017</year><article-title>Open ephys: an open-source, plugin-based platform for multichannel electrophysiology</article-title><source>Journal of Neural Engineering</source><volume>14</volume><elocation-id>045003</elocation-id><pub-id pub-id-type="doi">10.1088/1741-2552/aa5eea</pub-id><pub-id pub-id-type="pmid">28169219</pub-id></element-citation></ref><ref id="bib78"><element-citation publication-type="preprint"><person-group person-group-type="author"><name><surname>Siegle</surname> <given-names>JH</given-names></name><name><surname>Jia</surname> <given-names>X</given-names></name><name><surname>Durand</surname> <given-names>S</given-names></name><name><surname>Gale</surname> <given-names>S</given-names></name><name><surname>Bennett</surname> <given-names>C</given-names></name><name><surname>Graddis</surname> <given-names>N</given-names></name><name><surname>Heller</surname> <given-names>G</given-names></name><name><surname>Ramirez</surname> <given-names>TK</given-names></name><name><surname>Choi</surname> <given-names>H</given-names></name><name><surname>Luviano</surname> <given-names>JA</given-names></name></person-group><year iso-8601-date="2019">2019a</year><article-title>A survey of spiking activity reveals a functional hierarchy of mouse corticothalamic visual areas</article-title><source>bioRxiv</source><pub-id pub-id-type="doi">10.1101/805010</pub-id></element-citation></ref><ref id="bib79"><element-citation publication-type="software"><person-group person-group-type="author"><name><surname>Siegle</surname> <given-names>JH</given-names></name><name><surname>Myroshnychenko</surname> <given-names>JH</given-names></name><name><surname>Jia</surname> <given-names>JH</given-names></name><name><surname>Graddis</surname> <given-names>JH</given-names></name><collab>Allen Institute</collab></person-group><year iso-8601-date="2019">2019b</year><source>ecephys_spike_sorting</source><ext-link ext-link-type="uri" xlink:href="https://github.com/AllenInstitute/ecephys_spike_sorting">https://github.com/AllenInstitute/ecephys_spike_sorting</ext-link></element-citation></ref><ref id="bib80"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Teeters</surname> <given-names>JL</given-names></name><name><surname>Godfrey</surname> <given-names>K</given-names></name><name><surname>Young</surname> <given-names>R</given-names></name><name><surname>Dang</surname> <given-names>C</given-names></name><name><surname>Friedsam</surname> <given-names>C</given-names></name><name><surname>Wark</surname> <given-names>B</given-names></name><name><surname>Asari</surname> <given-names>H</given-names></name><name><surname>Peron</surname> <given-names>S</given-names></name><name><surname>Li</surname> <given-names>N</given-names></name><name><surname>Peyrache</surname> <given-names>A</given-names></name><name><surname>Denisov</surname> <given-names>G</given-names></name><name><surname>Siegle</surname> <given-names>JH</given-names></name><name><surname>Olsen</surname> <given-names>SR</given-names></name><name><surname>Martin</surname> <given-names>C</given-names></name><name><surname>Chun</surname> <given-names>M</given-names></name><name><surname>Tripathy</surname> <given-names>S</given-names></name><name><surname>Blanche</surname> <given-names>TJ</given-names></name><name><surname>Harris</surname> <given-names>K</given-names></name><name><surname>Buzsáki</surname> <given-names>G</given-names></name><name><surname>Koch</surname> <given-names>C</given-names></name><name><surname>Meister</surname> <given-names>M</given-names></name><name><surname>Svoboda</surname> <given-names>K</given-names></name><name><surname>Sommer</surname> <given-names>FT</given-names></name></person-group><year iso-8601-date="2015">2015</year><article-title>Neurodata without borders: creating a common data format for neurophysiology</article-title><source>Neuron</source><volume>88</volume><fpage>629</fpage><lpage>634</lpage><pub-id pub-id-type="doi">10.1016/j.neuron.2015.10.025</pub-id><pub-id pub-id-type="pmid">26590340</pub-id></element-citation></ref><ref id="bib81"><element-citation publication-type="software"><person-group person-group-type="author"><name><surname>Voigts</surname> <given-names>J</given-names></name></person-group><year iso-8601-date="2012">2012</year><source>Simpleclust</source><ext-link ext-link-type="uri" xlink:href="https://jvoigts.scripts.mit.edu/blog/simpleclust-manual-spike-sorting-in-matlab">https://jvoigts.scripts.mit.edu/blog/simpleclust-manual-spike-sorting-in-matlab</ext-link></element-citation></ref><ref id="bib82"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Wood</surname> <given-names>F</given-names></name><name><surname>Black</surname> <given-names>MJ</given-names></name><name><surname>Vargas-Irwin</surname> <given-names>C</given-names></name><name><surname>Fellows</surname> <given-names>M</given-names></name><name><surname>Donoghue</surname> <given-names>JP</given-names></name></person-group><year iso-8601-date="2004">2004</year><article-title>On the variability of manual spike sorting</article-title><source>IEEE Transactions on Biomedical Engineering</source><volume>51</volume><fpage>912</fpage><lpage>918</lpage><pub-id pub-id-type="doi">10.1109/TBME.2004.826677</pub-id><pub-id pub-id-type="pmid">15188858</pub-id></element-citation></ref><ref id="bib83"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Wouters</surname> <given-names>J</given-names></name><name><surname>Kloosterman</surname> <given-names>F</given-names></name><name><surname>Bertrand</surname> <given-names>A</given-names></name></person-group><year iso-8601-date="2020">2020</year><article-title>SHYBRID: a graphical tool for generating hybrid Ground-Truth spiking data for evaluating spike sorting performance</article-title><source>Neuroinformatics</source><volume>9</volume><fpage>1</fpage><lpage>18</lpage><pub-id pub-id-type="doi">10.1007/s12021-020-09474-8</pub-id></element-citation></ref><ref id="bib84"><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Xq</surname> <given-names>L</given-names></name><name><surname>Wu</surname> <given-names>X</given-names></name><name><surname>Liu</surname> <given-names>C</given-names></name></person-group><year iso-8601-date="2011">2011</year><article-title>SPKtool: an open source toolbox for electrophysiological data processing</article-title><conf-name>In 2011 4th International Conference on Biomedical Engineering and Informatics</conf-name><fpage>854</fpage><lpage>857</lpage></element-citation></ref><ref id="bib85"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Yger</surname> <given-names>P</given-names></name><name><surname>Spampinato</surname> <given-names>GL</given-names></name><name><surname>Esposito</surname> <given-names>E</given-names></name><name><surname>Lefebvre</surname> <given-names>B</given-names></name><name><surname>Deny</surname> <given-names>S</given-names></name><name><surname>Gardella</surname> <given-names>C</given-names></name><name><surname>Stimberg</surname> <given-names>M</given-names></name><name><surname>Jetter</surname> <given-names>F</given-names></name><name><surname>Zeck</surname> <given-names>G</given-names></name><name><surname>Picaud</surname> <given-names>S</given-names></name><name><surname>Duebel</surname> <given-names>J</given-names></name><name><surname>Marre</surname> <given-names>O</given-names></name></person-group><year iso-8601-date="2018">2018</year><article-title>A spike sorting toolbox for up to thousands of electrodes validated with ground truth recordings in vitro and in vivo</article-title><source>eLife</source><volume>7</volume><elocation-id>e34518</elocation-id><pub-id pub-id-type="doi">10.7554/eLife.34518</pub-id><pub-id pub-id-type="pmid">29557782</pub-id></element-citation></ref><ref id="bib86"><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Yuan</surname> <given-names>X</given-names></name><name><surname>Kim</surname> <given-names>S</given-names></name><name><surname>Juyon</surname> <given-names>J</given-names></name><name><surname>D’Urbino</surname> <given-names>M</given-names></name><name><surname>Bullmann</surname> <given-names>T</given-names></name><name><surname>Chen</surname> <given-names>Y</given-names></name><name><surname>Stettler</surname> <given-names>A</given-names></name><name><surname>Hierlemann</surname> <given-names>A</given-names></name><name><surname>Frey</surname> <given-names>U</given-names></name></person-group><year iso-8601-date="2016">2016</year><article-title>A microelectrode array with 8,640 electrodes enabling simultaneous full-frame readout at 6.5 kfps and 112-channel switch-matrix readout at 20 ks/s</article-title><conf-name>VLSI Circuits (VLSI-Circuits), 2016 IEEE Symposium</conf-name><fpage>1</fpage><lpage>2</lpage></element-citation></ref><ref id="bib87"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Zhang</surname> <given-names>B</given-names></name><name><surname>Dai</surname> <given-names>J</given-names></name><name><surname>Zhang</surname> <given-names>T</given-names></name></person-group><year iso-8601-date="2017">2017</year><article-title>NeoAnalysis: a Python-based toolbox for quick electrophysiological data processing and analysis</article-title><source>BioMedical Engineering OnLine</source><volume>16</volume><elocation-id>129</elocation-id><pub-id pub-id-type="doi">10.1186/s12938-017-0419-7</pub-id><pub-id pub-id-type="pmid">29132360</pub-id></element-citation></ref></ref-list></back><sub-article article-type="decision-letter" id="sa1"><front-stub><article-id pub-id-type="doi">10.7554/eLife.61834.sa1</article-id><title-group><article-title>Decision letter</article-title></title-group><contrib-group><contrib contrib-type="editor"><name><surname>Colgin</surname><given-names>Laura L</given-names></name><role>Reviewing Editor</role><aff><institution>University of Texas at Austin</institution><country>United States</country></aff></contrib></contrib-group><contrib-group><contrib contrib-type="reviewer"><name><surname>Grün</surname><given-names>Sonja</given-names> </name><role>Reviewer</role><aff><institution>Jülich Research Centre</institution><country>Germany</country></aff></contrib><contrib contrib-type="reviewer"><name><surname>Kloosterman</surname><given-names>Fabian</given-names> </name><role>Reviewer</role><aff><institution>KU Leuven</institution><country>Belgium</country></aff></contrib></contrib-group></front-stub><body><boxed-text><p>In the interests of transparency, eLife publishes the most substantive revision requests and the accompanying author responses.</p></boxed-text><p><bold>Acceptance summary:</bold></p><p>SpikeInterface is an integrated set of tools that makes it straightforward for researchers to set up a complete spike sorting workflow. SpikeInterface supports many common data formats and modern spike sorters and provides post-processing tools for characterization of the spike sorting results. This allows for validation and comparison of multiple spike sorting results. Results suggest that combining the results of multiple spike sorters could help to reduce the number of false positive units, which is an interesting future direction that will likely inspire further investigation. This tool is expected to be useful for researchers in many different areas who are studying neuronal responses.</p><p><bold>Decision letter after peer review:</bold></p><p>[Editors’ note: the authors submitted for reconsideration following the decision after peer review. What follows is the decision letter after the first round of review.]</p><p>Thank you for submitting your work entitled &quot;SpikeInterface, a unified framework for spike sorting&quot; for consideration by <italic>eLife</italic>. Your article has been reviewed by a Senior Editor, a Reviewing Editor, and three reviewers. The following individuals involved in review of your submission have agreed to reveal their identity: Fabian Kloosterman (Reviewer #2).</p><p>Our decision has been reached after consultation between the reviewers. Based on these discussions and the individual reviews below, we regret to inform you that your work will not be considered further for publication in <italic>eLife</italic>.</p><p>There was a great deal of discussion about this manuscript among the reviewers and the editor after the individual reviews were received. Ultimately, the consensus was that this work in its present form is too preliminary to be useful to, and to make a major impact on, a broad range of users. At <italic>eLife</italic>, the standard revision period is approximately two months, and therefore papers are largely assessed &quot;as is&quot; to allow authors to decide when to publish the work at the stage when they feel it is ready. In this case, though, reviewers agreed that the work needs a number of major revisions that constitute a substantial amount of work in order to make a major impact across a broad range of readers (e.g., reviewers were not confident that this tool is ready to be used by anyone who is recording with Neuropixels). If you agree with the reviewers that major changes to the tool are necessary to make a major impact on the field, then we would encourage you to submit a majorly revised manuscript to us in the future, citing this manuscript number and requesting the same editor. We would be willing to re-assess the manuscript at that time. Otherwise, you can just move on to a more specialized journal, keeping your tool in its present form and perhaps improving on it in future publications.</p><p>The three original reviews are included in their entirety below. However, due to the extensive and constructive discussion that occurred after reviewers read each other's reviews, we would like to emphasize a number of interrelated major points that were discussed in the consultation:</p><p>1) A concern was raised that SpikeInterface limits the flexibility of the spike sorters it contains and makes spike sorting more of a &quot;black box&quot;. Given the lack of real ground truth available for results comparison, this was viewed as a major weakness. Reviewers felt that users still need to be able to look carefully at the units, understand the different algorithms, and properly set the parameters. Using the default parameters could lead to suboptimal results, and the authors did not attempt to adjust parameters. Reviewers felt that the SpikeInterface toolbox could also be used to compare results of the same spike sorter using different parameters and that this would be useful to find optimal parameters and would increase the potential impact of this tool.</p><p>2) The analyses and presentation of the comparison of spike sorters was viewed as weak. Reviewers agreed that careful manual curation is still the only right way to compare spike sorting results. Reviewers felt that it would be a mistake for readers who are new to the spike sorting process to look at the analyses shown in the paper as the right way to compare spike sorting results. Reviewers felt that a manual curation step is necessary to make the spike sorter evaluation process more useful.</p><p>3) It was suggested that the authors should attempt to perform some sort of smart cluster merging strategy that utilizes the output of different sorters.</p><p>4) Another suggestion for a potentially useful addition was that users would be able to swap in and out different algorithmic components in the spike sorting pipeline. Combined with manual curation and comparison to &quot;ground truth&quot; data sets, reviewers felt that this could help users to determine the best algorithmic components for particular types of recordings.</p><p><italic>Reviewer #1:</italic></p><p>In this paper, the authors introduce a Python package for easily running many different spike sorters and exporting to many different formats. The goal is to make it easier for electrophysiologists to run their data through the spike sorters and output these results to Phy and other GUIs for data visualizations. While I agree that spike sorting is a hard problem and users need to be helped as much as possible, I don't think this framework helps a lot and will ultimately not find much use. I think Phy (already published and widely used) does most of the work that the authors suggest SpikeInterface should do, and in fact the main use case for SpikeInterface seems to be as an exporter to Phy. At its core, the code provided here is a set of file converters and code wrappers that further obfuscate the black-boxes that many spike sorters are, and make it more difficult for users to know how to build a successful spike sorting pipeline for their own data.</p><p><italic>Reviewer #2:</italic></p><p>The work presented in this manuscript is of great interest to both spike sorting users and developers. The unified framework bridges the gap between the plethora of recording file formats and spike sorting packages, which is a major improvement in terms of spike sorting experience. The framework also features many interesting features related to spike sorting for processing recordings and sorting results. The manuscript is clearly written and introduces the functionality that is at hand in the framework in a concise way. Below is a list of major and minor comments that need to be addressed, however.</p><p>1) Spikeinterface is portrayed as a general spike sorting framework. Still, the spike sorting workflow supported by spikeinterface appears to be geared towards specific kind of data and sorters, i.e. those that work on high electrode count continuous datasets. The authors should make explicit the assumptions that are made in spikeinterface regarding the data that is accepted (e.g. datasets with only waveform snippets appear not to be supported) and the minimal requirement for spike sorters (e.g. do spike sorters need to include their own spike detection algorithm and spike feature extraction?).</p><p>2) The authors have chosen to run the spike sorters with their default parameters and without manual or automated refinement (i.e. noise cluster rejection, cluster merging/splitting). As many spike sorting algorithms explicitly depend on a manual cluster merging/splitting step after they have been applied to the data, it would be interesting to also provide an automated cluster merging (e.g., based on the ground truth as in Wouters, Kloosterman and Bertrand, 2019). This will improve the understanding of the true potential of a spike sorting algorithm, when comparing it to others in a ground-truth study. As a bare minimum, the authors should discuss the need of a post-sorting split/merge curation step and discuss the effect of leaving the step out on their results. Without such discussion, it would be premature to talk about a &quot;consensus-based strategy&quot; to select clusters (subsection “Application 1: Comparing Spike Sorters on Neuropixels Data”).</p><p>3) The authors define an agreement score to match clusters from different sorters and use the score to classify clusters (as compared to ground truth) as &quot;well-detected&quot;, &quot;false positive&quot;, &quot;redundant&quot; and &quot;over-merged&quot;. However, a low agreement score could result from a high number of false positive detections or a high number of false negative detections (or both), and the interpretation would be different in these cases. In the extremes of no false positives or false negatives, an agreement score of 0.2 could either mean all spikes in a cluster represent 20% of the ground truth spikes (i.e. a clean partial cluster) or it could mean that all ground truth spikes represent 20% of the spikes in a cluster (i.e. a &quot;dirty&quot; over-merged cluster). Thus, the agreement score is not a good metric for the classification of the clusters. Instead, the authors should consider a classification based on different metric(s), e.g. both precision and recall.</p><p>4) We do not find the swarm plot in Figure 4 that compares the accuracy, precision and recall for multiple sorters very informative. First, the number of non-matched clusters is not obvious in this plot (we assume point with zero score are non-matched?). More importantly, there is often a trade-off between the number of false positive and false negatives, and each sorter may make a different trade-off, depending on the parameters. The swarm plot does not show the relation between precision and recall for each sorter, and a precision-recall scatter plot would be more informative.</p><p><italic>Reviewer #3:</italic></p><p>This submission describes a software toolbox aimed to facilitate the comparison of spike sorting algorithms. It is targeted for a broad user base, who may not have the time or technical ability to make such comparisons on their own. This tool addresses a need of the neuroscience community. Outlined below are number of suggested corrections.</p><p>Introduction: Not all the listed sorters are truly fully-manual, ie Mclust is semiautomatic.</p><p>Subsection “Overview of SpikeInterface”: Roman numerals swapped for spikecomparison and spikewidgets.</p><p>Subsection “SpikeExtractors”: It is unclear how recordingextractor, a visualization tool, provides functionality required to excess data to evaluate the spike sorting pipeling. This becomes more clear later, but could be made more clear sooner.</p><p>Subsection “SpikeExtractors” and subsection “SpikeToolkit”: The code snippets could be expanded to give more context and be more relevant.</p><p>Subsection “Curation”: Instead of holding of for the future, this functionality would be nice to implement here, if it is not an unreasonable amount of work.</p><p>Subsection “Using the Python API”: It could be said that spikeinterface is also handmade, maybe clarify the point.</p><p>Figure 3B is hard to read.</p><p>Figure 3D, what are the color code agreement levels exactly, this is unclear.</p><p>In Figure 4 it would be nice to see plotted SNR vs agreement score.</p><p>[Editors’ note: further revisions were suggested prior to acceptance, as described below.]</p><p>Thank you for submitting your article &quot;SpikeInterface, a unified framework for spike sorting&quot; for consideration by <italic>eLife</italic>. Your article has been reviewed by Laura Colgin as the Senior Editor and Reviewing Editor and three reviewers. The following individuals involved in review of your submission have agreed to reveal their identity: Sonja Grün (Reviewer #2); Fabian Kloosterman (Reviewer #3).</p><p>The reviewers have discussed the reviews with one another and the Reviewing Editor has drafted this decision to help you prepare a revised submission.</p><p>We would like to draw your attention to changes in our revision policy that we have made in response to COVID-19 (https://elifesciences.org/articles/57162). Specifically, we are asking editors to accept without delay manuscripts, like yours, that they judge can stand as <italic>eLife</italic> papers without additional data, even if they feel that they would make the manuscript stronger. Thus the revisions requested below only address clarity and presentation.</p><p>Summary:</p><p>The authors describe SpikeInterface, which is an integrated set of tools that makes it straightforward for researchers to set up a complete spike sorting workflow. SpikeInterface is modular (and extendible) and supports many common data formats and modern spike sorters. It provides postprocessing tools for characterization of the spike sorting results and for validation and comparison of multiple spike sorting results (e.g. against ground truth). SpikeInterface allows users to focus on the spike sorting results and curation, rather than having to glue together or (re)implement disparate tools themselves.</p><p>Compared to the previous version, the authors have now more clearly outlined the goals of SpikeInterface in the introduction. In addition to comparing multiple sorters, they have added new results that indicate that combining the results of multiple spike sorters (&quot;ensemble spike sorting&quot;) could help to reduce the number of false positive units, which is an interesting future direction that needs further investigation.</p><p>Essential revisions:</p><p>1) Regarding the ensemble spike sorting approach:</p><p>– From the results shown in Figure 3C, it seems that one won't need to run all 6 sorters to eliminate the false positives. Could the authors quantify the relative benefit of combining 2, 3 or more sorters over the use of a single sorter?</p><p>– One could imagine that combining the results of spike sorters that use a different class of algorithm would provide more benefit than combining two sorters that use the same algorithm. Do the authors observe this?</p><p>– If reviewers understand correctly, many spike sorters will return a slightly different output when run a second time on the same data set. To what extent does running the same sorter twice give the same benefit (i.e. low agreement on false positive clusters) as running two different sorters?</p><p>– Would using the ensemble spike sorting approach give similar results as using a more stringent selection of units found by a single sorter (e.g. based on cluster quality metrics, SNR, spike amplitude, etc.)?</p><p>2) The authors used an arbitrary agreement score threshold of 0.5, which they acknowledge is a pragmatic but not necessarily the best choice to match units found by multiple sorters. Reviewers did not think it is necessary to change the way units are matched, but to provide more insight into the matching process it would be helpful to know what the distribution of unit agreement scores for matching pairs looks like.</p><p>3) When evaluating the spike sorting results on the simulated data set, the authors only mention matches and false positives. Reviewers did not see a mention of the number of false negatives (i.e. number of ground units that were missed by the sorters). Could the authors also indicate to what extent spikes of the missed clusters actually show up as part of the false positive units (e.g. because false positive units are actually overly split/merged true units)?</p></body></sub-article><sub-article article-type="reply" id="sa2"><front-stub><article-id pub-id-type="doi">10.7554/eLife.61834.sa2</article-id><title-group><article-title>Author response</article-title></title-group></front-stub><body><p>[Editors’ note: the authors resubmitted a revised version of the paper for consideration. What follows is the authors’ response to the first round of review.]</p><disp-quote content-type="editor-comment"><p>There was a great deal of discussion about this manuscript among the reviewers and the editor after the individual reviews were received. Ultimately, the consensus was that this work in its present form is too preliminary to be useful to, and to make a major impact on, a broad range of users. At eLife, the standard revision period is approximately two months, and therefore papers are largely assessed &quot;as is&quot; to allow authors to decide when to publish the work at the stage when they feel it is ready. In this case, though, reviewers agreed that the work needs a number of major revisions that constitute a substantial amount of work in order to make a major impact across a broad range of readers (e.g., reviewers were not confident that this tool is ready to be used by anyone who is recording with Neuropixels). If you agree with the reviewers that major changes to the tool are necessary to make a major impact on the field, then we would encourage you to submit a majorly revised manuscript to us in the future, citing this manuscript number and requesting the same editor. We would be willing to re-assess the manuscript at that time. Otherwise, you can just move on to a more specialized journal, keeping your tool in its present form and perhaps improving on it in future publications.</p><p>The three original reviews are included in their entirety below. However, due to the extensive and constructive discussion that occurred after reviewers read each other's reviews, we would like to emphasize a number of interrelated major points that were discussed in the consultation:</p><p>1) A concern was raised that SpikeInterface limits the flexibility of the spike sorters it contains and makes spike sorting more of a &quot;black box&quot;. Given the lack of real ground truth available for results comparison, this was viewed as a major weakness. Reviewers felt that users still need to be able to look carefully at the units, understand the different algorithms, and properly set the parameters. Using the default parameters could lead to suboptimal results, and the authors did not attempt to adjust parameters. Reviewers felt that the SpikeInterface toolbox could also be used to compare results of the same spike sorter using different parameters and that this would be useful to find optimal parameters and would increase the potential impact of this tool.</p></disp-quote><p>We disagree that SpikeInterface limits the flexibility of the underlying sorter in any meaningful way. A key feature of SpikeInterface is that the Python-based wrappers for each spike sorter <italic>expose</italic> the underlying parameters such that users can adjust them before running the sorter. In fact, to ease the parameter adjustment process for a new user, SpikeInterface contains two functions, get_default_params() and get_params_description(), which return the developer-suggested value and description of each parameter, respectively. We believe that this functionality provides quick and accessible guidance to the users to make spike sorting <italic>less</italic> “black box” if anything. We would also like to point the editor and reviewers to a series of open analyses that showcase how SpikeInterface can be used for parameter sweeping and evaluation of spike sorting results</p><p>(https://spikeinterface.github.io/blog/example-of-parameters-optimization/). While we acknowledge that these aspects of SpikeInterface are important to highlight, we believe that they would require an extensive study to properly investigate so we decided to leave them out of the current manuscript. Our main point here is that this type of optimisation is very easy to perform with SpikeInterface.</p><disp-quote content-type="editor-comment"><p>2) The analyses and presentation of the comparison of spike sorters was viewed as weak. Reviewers agreed that careful manual curation is still the only right way to compare spike sorting results. Reviewers felt that it would be a mistake for readers who are new to the spike sorting process to look at the analyses shown in the paper as the right way to compare spike sorting results. Reviewers felt that a manual curation step is necessary to make the spike sorter evaluation process more useful.</p></disp-quote><p>In our initial manuscript, the presented analyses were designed to showcase the different ways that SpikeInterface could be used to compare spike sorters. We agree with the reviewers, however, that the shallowness of these analyses was a major weak point that needed to be addressed. Therefore, in our updated manuscript, we completely re-wrote the Results section. In this new Results section, we explore how combining the output of multiple spike sorters can be used to improve overall spike sorting performance, a method we call ensemble spike sorting. To this end, we first demonstrate that there is surprisingly low agreement among six spike sorters designed for high-count probes on a Neuropixels recording (analysis of other recordings are illustrated in the supplement). Next, we repeat this analysis with a simulated Neuropixels dataset (with known ground truth), finding that the sorter agreement level is comparable to that of real data and that almost all units that are found by only one sorter are actually false positive units. Finally, we ask two experts to manually curate the output of the real Neuropixels dataset (using Phy) and compare the manually curated datasets to a consensus sorting result (units agreed upon by at least two out of the six sorters). We find excellent agreement between the “good” units found in the manually curated datasets and the consensus sorting results. We believe that this new analysis is much more detailed and comprehensive and provides evidence that using multiple spike sorters can potentially inform (or even replace) the time consuming and subjective manual curation step in extracellular analysis pipelines.</p><disp-quote content-type="editor-comment"><p>3) It was suggested that the authors should attempt to perform some sort of smart cluster merging strategy that utilizes the output of different sorters.</p></disp-quote><p>As outlined above, our analysis now explores an ensemble-based approach to spike sorting which combines the output of several spike sorters to improve overall spike sorting performance. In addition, SpikeInterface now includes functionality to automatically generate this consensus set by merging the best unit matches among multiple sorters. While we found this can yield good results for ground truth data, we believe further analysis is required to validate this method. We are confident, however, that the agreement scores among multiple spike sorters can, at the very least, inform subsequent manual curation steps.</p><disp-quote content-type="editor-comment"><p>4) Another suggestion for a potentially useful addition was that users would be able to swap in and out different algorithmic components in the spike sorting pipeline. Combined with manual curation and comparison to &quot;ground truth&quot; data sets, reviewers felt that this could help users to determine the best algorithmic components for particular types of recordings.</p></disp-quote><p>We would like to point out (as expressed also by reviewer 1) that different processing steps in a spike sorting algorithm are not decoupled from each other. We therefore believe that swapping components between different algorithms cannot be a viable solution for building better spike sorting pipelines. Despite our reservations about the mix-and-match approach to spike sorting, we have added a module to the spiketoolkit package called sortingcomponents which will contain different algorithmic components for spike sorting.</p><p>Currently, this package just contains a decoupled detection algorithm, but we plan to add more functionality in future updates.</p><disp-quote content-type="editor-comment"><p>Reviewer #1:</p><p>In this paper, the authors introduce a Python package for easily running many different spike sorters and exporting to many different formats. The goal is to make it easier for electrophysiologists to run their data through the spike sorters and output these results to Phy and other GUIs for data visualizations. While I agree that spike sorting is a hard problem and users need to be helped as much as possible, I don't think this framework helps a lot and will ultimately not find much use. I think Phy (already published and widely used) does most of the work that the authors suggest SpikeInterface should do, and in fact the main use case for SpikeInterface seems to be as an exporter to Phy. At its core, the code provided here is a set of file converters and code wrappers that further obfuscate the black-boxes that many spike sorters are, and make it more difficult for users to know how to build a successful spike sorting pipeline for their own data.</p></disp-quote><p>We thank the reviewer for the comments, however, we strongly disagree with this assessment. Phy is a tool for visualising and manually curating spike sorter outputs. In contrast, SpikeInterface aims to automate many aspects of a sorting pipeline, including file IO, pre and post-processing, running multiple spike sorting jobs, comparing spike sorting outputs, and computing quality metrics. As we show in our updated manuscript, the ability to efficiently run multiple spike sorters and to quickly compare their outputs offers new possibilities for automatic curation and unit annotation to inform manual curation. All analysis that can be performed with SpikeInterface is fully reproducible as well. We hope our revised paper better illustrates the many exciting use cases of SpikeInterface.</p><disp-quote content-type="editor-comment"><p>Reviewer #2:</p><p>The work presented in this manuscript is of great interest to both spike sorting users and developers. The unified framework bridges the gap between the plethora of recording file formats and spike sorting packages, which is a major improvement in terms of spike sorting experience. The framework also features many interesting features related to spike sorting for processing recordings and sorting results. The manuscript is clearly written and introduces the functionality that is at hand in the framework in a concise way. Below is a list of major and minor comments that need to be addressed, however.</p><p>1) Spikeinterface is portrayed as a general spike sorting framework. Still, the spike sorting workflow supported by spikeinterface appears to be geared towards specific kind of data and sorters, i.e. those that work on high electrode count continuous datasets. The authors should make explicit the assumptions that are made in spikeinterface regarding the data that is accepted (e.g. datasets with only waveform snippets appear not to be supported) and the minimal requirement for spike sorters (e.g. do spike sorters need to include their own spike detection algorithm and spike feature extraction?).</p></disp-quote><p>The reviewer correctly points out that datasets with only waveform snippets are not supported by SpikeInterface. Apart from this requirement, which is satisfied by most of modern acquisition systems, SpikeInterface does not make any other assumptions about the initial dataset. All supported spike sorters are end-to-end, i.e. they take a raw recording as input and output the sorted results. While many supported sorters are designed for high-count devices (e.g. IronClust, HerdingSpikes, Kilosort2), we also include sorters which are better suited for low-channel counts (Klusta, Wave-Clus, Mountainsort4). To help users better understand the different sorters supported by SpikeInterface, we added the get_sorte_description() function to the spikesorters package which provides a description of the algorithm, including its intended use.</p><disp-quote content-type="editor-comment"><p>2) The authors have chosen to run the spike sorters with their default parameters and without manual or automated refinement (i.e. noise cluster rejection, cluster merging/splitting). As many spike sorting algorithms explicitly depend on a manual cluster merging/splitting step after they have been applied to the data, it would be interesting to also provide an automated cluster merging (e.g., based on the ground truth as in Wouters, Kloosterman and Bertrand, 2019). This will improve the understanding of the true potential of a spike sorting algorithm, when comparing it to others in a ground-truth study. As a bare minimum, the authors should discuss the need of a post-sorting split/merge curation step and discuss the effect of leaving the step out on their results. Without such discussion, it would be premature to talk about a &quot;consensus-based strategy&quot; to select clusters (subsection “Application 1: Comparing Spike Sorters on Neuropixels Data”).</p></disp-quote><p>We thank the reviewer for this insightful comment which led us to completely re-write the Results section in our updated manuscript. In our new Results section, we provide evidence that a consensus-based spike sorting strategy is a viable alternative to using a single sorter. We demonstrate that units that are found by <italic>only</italic> one sorter mainly coincide with false positives (on simulated data). We also added a comparison between our consensus-based method and the manually curated outputs from two experts (on real data), showing that there is a large agreement between units labeled as “good” by the curators and the consensus sorting output. We believe that the new results in our updated manuscript provide initial evidence for the viability of a consensus-based strategy. In the Discussion section, we added a paragraph on Ensemble spike sorting to discuss the potential strengths and limitations of this strategy.</p><disp-quote content-type="editor-comment"><p>3) The authors define an agreement score to match clusters from different sorters and use the score to classify clusters (as compared to ground truth) as &quot;well-detected&quot;, &quot;false positive&quot;, &quot;redundant&quot; and &quot;over-merged&quot;. However, a low agreement score could result from a high number of false positive detections or a high number of false negative detections (or both), and the interpretation would be different in these cases. In the extremes of no false positives or false negatives, an agreement score of 0.2 could either mean all spikes in a cluster represent 20% of the ground truth spikes (i.e. a clean partial cluster) or it could mean that all ground truth spikes represent 20% of the spikes in a cluster (i.e. a &quot;dirty&quot; over-merged cluster). Thus, the agreement score is not a good metric for the classification of the clusters. Instead, the authors should consider a classification based on different metric(s), e.g. both precision and recall.</p></disp-quote><p>We acknowledge that our proposed classification of sorted units is preliminary and cannot differentiate between some spike sorting failure modes. However, we still believe that it can provide insight into the strengths and weaknesses of different sorters despite not being a perfect solution. We agree that a more detailed analysis on multiple ground-truth recordings is needed to provide better classification rules. We address these concerns in the updated manuscript by adding the following sentence in the subsection “SpikeComparison”: &quot;We would like to highlight to the reader that the unit classification proposed here is currently only based on agreement score (i.e. accuracy). More sophisticated classification rules could involve a combination of accuracy, precision, and recall values, which can be easily computed for each unit with the spikecomparison module.&quot;</p><disp-quote content-type="editor-comment"><p>4) We do not find the swarm plot in Figure 4 that compares the accuracy, precision and recall for multiple sorters very informative. First, the number of non-matched clusters is not obvious in this plot (we assume point with zero score are non-matched?). More importantly, there is often a trade-off between the number of false positive and false negatives, and each sorter may make a different trade-off, depending on the parameters. The swarm plot does not show the relation between precision and recall for each sorter, and a precision-recall scatter plot would be more informative.</p></disp-quote><p>To address this concern, we added a supplementary figure to the new manuscript that shows a scatter plot with precision vs recall for each sorter (Figure 2—figure supplement 1). As mentioned by reviewer 2, this figure helps reveal relevant differences among the chosen sorters and we thought it important to include in the new draft.</p><disp-quote content-type="editor-comment"><p>Reviewer #3:</p><p>This submission describes a software toolbox aimed to facilitate the comparison of spike sorting algorithms. It is targeted for a broad user base, who may not have the time or technical ability to make such comparisons on their own. This tool addresses a need of the neuroscience community. Outlined below are number of suggested corrections.</p><p>Introduction: Not all the listed sorters are truly fully-manual, ie Mclust is semiautomatic.</p></disp-quote><p>Thanks for catching this; We removed MClust from the list of fully manual spike sorters.</p><disp-quote content-type="editor-comment"><p>Subsection “Overview of SpikeInterface”: Roman numerals swapped for spikecomparison and spikewidgets.</p></disp-quote><p>We fixed the roman numerals accordingly.</p><disp-quote content-type="editor-comment"><p>Subsection “SpikeExtractors”: It is unclear how recordingextractor, a visualization tool, provides functionality required to excess data to evaluate the spike sorting pipeling. This becomes more clear later, but could be made more clear sooner.</p></disp-quote><p>A RecordingExtractor is not a visualization tool, but an file IO class that interfaces with the data. We are not sure what reviewer 3 means with this comment.</p><disp-quote content-type="editor-comment"><p>Subsection “SpikeExtractors” and subsection “SpikeToolkit”: The code snippets could be expanded to give more context and be more relevant.</p></disp-quote><p>In our updated manuscript, we improved the description before each code snippet to provide more context. We still chose to keep the code snippets minimal just to show the basic aspects of the API. The reader/user can find more detailed and comprehensive examples in the online documentation.</p><disp-quote content-type="editor-comment"><p>Subsection “Curation”: Instead of holding of for the future, this functionality would be nice to implement here, if it is not an unreasonable amount of work.</p></disp-quote><p>The curation module has now been extended to support curation based on all supported quality metrics.</p><disp-quote content-type="editor-comment"><p>Subsection “Using the Python API”: It could be said that spikeinterface is also handmade, maybe clarify the point.</p></disp-quote><p>The main point of that sentence is that, usually, custom scripts are not fully tested on continuous integration platforms, while SpikeInterface is. We believe that the paragraph conveys this message: &quot;Unlike handmade scripts, SpikeInterface has a wide range of unit tests, employs continuous integration, and has been carefully developed by a team of researchers. Users, therefore, can have increased confidence that the pipelines they create are correct and reusable. Additionally, SpikeInterface tracks the entire provenance of the performed analysis, allowing other users (or the same user) to reproduce the analysis at a later date.&quot;.</p><disp-quote content-type="editor-comment"><p>Figure 3B is hard to read.</p></disp-quote><p>We agree with the reviewer and we removed the panel from the Figure.</p><disp-quote content-type="editor-comment"><p>Figure 3D, what are the color code agreement levels exactly, this is unclear.</p></disp-quote><p>The legend is shown on the top right and it indicates the number of k sorters that agree on a unit.</p><disp-quote content-type="editor-comment"><p>In Figure 4 it would be nice to see plotted SNR vs agreement score.</p></disp-quote><p>We added the suggested Figure as Figure 2—figure supplement 1B.</p><p>[Editors’ note: what follows is the authors’ response to the second round of review.]</p><disp-quote content-type="editor-comment"><p>Summary:</p><p>The authors describe SpikeInterface, which is an integrated set of tools that makes it straightforward for researchers to set up a complete spike sorting workflow. SpikeInterface is modular (and extendible) and supports many common data formats and modern spike sorters. It provides postprocessing tools for characterization of the spike sorting results and for validation and comparison of multiple spike sorting results (e.g. against ground truth). SpikeInterface allows users to focus on the spike sorting results and curation, rather than having to glue together or (re)implement disparate tools themselves.</p><p>Compared to the previous version, the authors have now more clearly outlined the goals of SpikeInterface in the introduction. In addition to comparing multiple sorters, they have added new results that indicate that combining the results of multiple spike sorters (&quot;ensemble spike sorting&quot;) could help to reduce the number of false positive units, which is an interesting future direction that needs further investigation.</p><p>Essential revisions:</p><p>1) Regarding the ensemble spike sorting approach:</p></disp-quote><p>– From the results shown in Figure 3C, it seems that one won't need to run all 6 sorters to eliminate the false positives. Could the authors quantify the relative benefit of combining 2, 3 or more sorters over the use of a single sorter?</p><p>We have added Figure 3—figure supplement 1, and a brief passage of text to show how the detection of false/true positives depends on the number of sorters used, using the simulated ground-truth dataset. To this end, we tested all possible combinations of two to five sorters and quantified the fraction of identified false positives. The results show that already two sorters are sufficient to remove false positives, with little change when more sorters are added. However, the fraction of true positives in the ensemble sorting can increase substantially when more sorters are used. Therefore, the main benefit of combining multiple sorters is a more reliable identification of true positive units.</p><p>– One could imagine that combining the results of spike sorters that use a different class of algorithm would provide more benefit than combining two sorters that use the same algorithm. Do the authors observe this?</p><p>The sorters are highly variable in terms of performance which may occlude systematic differences between the main algorithms (template-based sorting and density-based clustering). We did observe a slightly better identification of false/true positives when different approaches (e.g. Kilosort2 and Ironclust) are combined, compared to the use of one approach alone (e.g. Kilosort2 and SpykingCircus). However, we found it difficult to judge if these biases were due to the central algorithm or due to other components of the sorting process. Therefore, we feel we could not give a well-qualified answer to this question as this would require a more systematic comparison of algorithms with equal pre/postprocessing and more ground-truth datasets with different generative assumptions.</p><p>– If reviewers understand correctly, many spike sorters will return a slightly different output when run a second time on the same data set. To what extent does running the same sorter twice give the same benefit (i.e. low agreement on false positive clusters) as running two different sorters?</p><p>We tested this phenomena for Kilosort2 and the simulated ground-truth recording from our manuscript. Each run returned slightly different results with different numbers of units each time. Using the same ensemble method, we found that all unmatched units were indeed false positives, but this removed only a subset of false positives (a certain fraction of false positives was always consistently found). A summary of the effect is shown in the following figure:</p><fig id="sa2fig1"><label>Author response image 1.</label><caption><title>Comparison of five individual runs of Kilosort2 on the simulated Neuropixels recording.</title><p>The top shows the proportions of units from each sorting found in k other sortings. Below these units are split according to false and true positive units after comparison to the ground-truth data. While a sizable fraction of false positive units are unique to each run of the sorter, many are identical in all sortings, indicating that variability in multiple sorter outputs cannot be used to reliably separate false and true positive units.</p></caption><graphic mime-subtype="tiff" mimetype="image" xlink:href="elife-61834-resp-fig1-v2.tif"/></fig><p>While potentially worth further investigation, we feel it is too preliminary to show these results as we do not understand where these differences originate and how they can be controlled. Therefore, we decided not to mention this result in the manuscript.</p><p>– Would using the ensemble spike sorting approach give similar results as using a more stringent selection of units found by a single sorter (e.g. based on cluster quality metrics, SNR, spike amplitude, etc.)?</p><p>We tested this idea using the most obvious quality measure, SNR, on a Kilosort2 sorting of the ground-truth data. We chose Kilosort2 since its performance on detecting true positive units is best among all the sorters. Here we found, surprisingly, that false positive units can have a large SNR so there is no obvious way to separate these. This is illustrated in Figure 3—figure supplement 2, and a short passage was added to this effect.</p><disp-quote content-type="editor-comment"><p>2) The authors used an arbitrary agreement score threshold of 0.5, which they acknowledge is a pragmatic but not necessarily the best choice to match units found by multiple sorters. Reviewers did not think it is necessary to change the way units are matched, but to provide more insight into the matching process it would be helpful to know what the distribution of unit agreement scores for matching pairs looks like.</p></disp-quote><p>We added a histogram of agreement scores for the ground-truth data (Figure 1—figure supplement 2), which shows that the majority of matches have scores &gt;0.8.</p><disp-quote content-type="editor-comment"><p>3) When evaluating the spike sorting results on the simulated data set, the authors only mention matches and false positives. Reviewers did not see a mention of the number of false negatives (i.e. number of ground units that were missed by the sorters). Could the authors also indicate to what extent spikes of the missed clusters actually show up as part of the false positive units (e.g. because false positive units are actually overly split/merged true units)?</p></disp-quote><p>There are 250 ground-truth units, which we now indicate as an horizontal dashed line in Figure 2E.</p></body></sub-article></article>