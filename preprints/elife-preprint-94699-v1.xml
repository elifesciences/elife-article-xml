<?xml version="1.0" ?><!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.3 20210610//EN"  "JATS-archivearticle1-mathml3.dtd"><article xmlns:ali="http://www.niso.org/schemas/ali/1.0/" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article" dtd-version="1.3" xml:lang="en">
<front>
<journal-meta>
<journal-id journal-id-type="nlm-ta">elife</journal-id>
<journal-id journal-id-type="publisher-id">eLife</journal-id>
<journal-title-group>
<journal-title>eLife</journal-title>
</journal-title-group>
<issn publication-format="electronic" pub-type="epub">2050-084X</issn>
<publisher>
<publisher-name>eLife Sciences Publications, Ltd</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">94699</article-id>
<article-id pub-id-type="doi">10.7554/eLife.94699</article-id>
<article-id pub-id-type="doi" specific-use="version">10.7554/eLife.94699.1</article-id>
<article-version-alternatives>
<article-version article-version-type="publication-state">reviewed preprint</article-version>
<article-version article-version-type="preprint-version">1.1</article-version>
</article-version-alternatives>
<article-categories>
<subj-group subj-group-type="heading">
<subject>Computational and Systems Biology</subject>
</subj-group>
<subj-group subj-group-type="heading">
<subject>Physics of Living Systems</subject>
</subj-group>
</article-categories>
<title-group>
<article-title>The French flag problem revisited: Creating robust and tunable axial patterns without global signaling</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" equal-contrib="yes">
<name>
<surname>Kremser</surname>
<given-names>Stephan</given-names>
</name>
<xref ref-type="aff" rid="a1">1</xref>
<xref ref-type="author-notes" rid="n1">†</xref>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<name>
<surname>Vercelli</surname>
<given-names>Gabriel</given-names>
</name>
<xref ref-type="aff" rid="a1">1</xref>
<xref ref-type="author-notes" rid="n1">†</xref>
<xref ref-type="author-notes" rid="n2">§</xref>
</contrib>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-0859-6422</contrib-id>
<name>
<surname>Gerland</surname>
<given-names>Ulrich</given-names>
</name>
<xref ref-type="aff" rid="a1">1</xref>
<xref ref-type="corresp" rid="cor1">*</xref>
</contrib>
<aff id="a1"><label>1</label><institution>Department of Bioscience, School of Natural Sciences, Technical University of Munich</institution>, James-Franck-Str. 1, D-85748 Garching, <country>Germany</country></aff>
</contrib-group>
<contrib-group content-type="section">
<contrib contrib-type="editor">
<name>
<surname>Nahmad</surname>
<given-names>Marcos</given-names>
</name>
<role>Reviewing Editor</role>
<aff>
<institution-wrap>
<institution>Center for Research and Advanced Studies of the National Polytechnic Institute</institution>
</institution-wrap>
<city>Mexico City</city>
<country>Mexico</country>
</aff>
</contrib>
<contrib contrib-type="senior_editor">
<name>
<surname>Desplan</surname>
<given-names>Claude</given-names>
</name>
<role>Senior Editor</role>
<aff>
<institution-wrap>
<institution>New York University</institution>
</institution-wrap>
<city>New York</city>
<country>United States of America</country>
</aff>
</contrib>
</contrib-group>
<author-notes>
<corresp id="cor1"><label>*</label><bold>For correspondence:</bold> <email>gerland@tum.de</email> (UG)</corresp>
<fn id="n1" fn-type="equal"><label>†</label><p>These authors contributed equally to this work</p></fn>
<fn id="n2" fn-type="present-address"><label>§</label><p>MIT Microbiology Program, Massachusetts Institute of Technology</p></fn>
</author-notes>
<pub-date date-type="original-publication" iso-8601-date="2024-04-11">
<day>11</day>
<month>04</month>
<year>2024</year>
</pub-date>
<volume>13</volume>
<elocation-id>RP94699</elocation-id>
<history>
<date date-type="sent-for-review" iso-8601-date="2023-12-21">
<day>21</day>
<month>12</month>
<year>2023</year>
</date>
</history>
<pub-history>
<event>
<event-desc>Preprint posted</event-desc>
<date date-type="preprint" iso-8601-date="2023-12-30">
<day>30</day>
<month>12</month>
<year>2023</year>
</date>
<self-uri content-type="preprint" xlink:href="https://doi.org/10.1101/2023.12.29.573602"/>
</event>
</pub-history>
<permissions>
<copyright-statement>© 2024, Kremser et al</copyright-statement>
<copyright-year>2024</copyright-year>
<copyright-holder>Kremser et al</copyright-holder>
<ali:free_to_read/>
<license xlink:href="https://creativecommons.org/licenses/by/4.0/">
<ali:license_ref>https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
<license-p>This article is distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution License</ext-link>, which permits unrestricted use and redistribution provided that the original author and source are credited.</license-p>
</license>
</permissions>
<self-uri content-type="pdf" xlink:href="elife-preprint-94699-v1.pdf"/>
<abstract>
<title>Abstract</title>
<p>Wolpert’s French flag problem conceptualizes the task of forming axial patterns with broad regions in multicellular systems. Wolpert described two different solutions to his problem, the balancing model and thresholding of a morphogen gradient, both of which require global, long-range signaling between cells. Since global signaling becomes challenging in large multicellular systems, we computationally explore alternative solutions, which use only local cell-cell signaling and are simple enough to potentially be implemented in natural or synthetic systems. We employ cellular automata rules to describe local signal processing logics, and search for rules capable of robust and tunable axial patterning with evolutionary algorithms. This yields large sets of successful rules, which however display only few types of behavior. We introduce a rule alignment and consensus procedure to identify patterning modules that are responsible for the different behaviors. With these modules as building blocks, we then construct local schemes for axial patterning, which function also in the presence of noise and growth, and for patterns with a larger number of different regions. The regulatory logic underlying these modules could therefore serve as the basis for the design of synthetic patterning systems, and as a conceptual framework for the interpretation of biological mechanisms.</p>
</abstract>

</article-meta>
<notes>
<notes notes-type="competing-interest-statement">
<title>Competing Interest Statement</title><p>The authors have declared no competing interest.</p></notes>
</notes>
</front>
<body>
<sec id="s1">
<title>Introduction</title>
<p>One of the many remarkable features in the development of multicellular organisms is the formation of spatial gene expression patterns. The ability to spatially coordinate gene expression is a fundamental requirement for cell differentiation in animal and plant development, and spatial transcriptomics techniques now allow to measure the expression levels of genes systematically throughout tissue space, on a genome-wide scale (<bold><italic><xref ref-type="bibr" rid="c31">Rao et al., 2021</xref></italic></bold>). However, many of the principles and mechanisms underlying the formation of the spatial patterns still remain elusive. To explore such principles on a conceptual level, Lewis Wolpert introduced the ‘French Flag problem’ (<bold><italic><xref ref-type="bibr" rid="c47">Wolpert, 1968</xref></italic></bold>) as an abstraction of the task of forming axial patterns, i.e., quasi-one-dimensional patterns along a body axis. Specifically, the French Flag problem is to form a tri-partite pattern, such as that of a French flag, which is defined by the relative proportions of its different regions, rather than their absolute sizes (<bold><italic><xref ref-type="bibr" rid="c34">Sharpe, 2019</xref></italic></bold>).</p>
<p>In his seminal work (<bold><italic><xref ref-type="bibr" rid="c47">Wolpert, 1968</xref>, <xref ref-type="bibr" rid="c46">1969</xref></italic></bold>), Wolpert proposed two different axial patterning mechanisms, conceptualized by the gradient model and the balancing model, respectively (<bold><italic><xref ref-type="bibr" rid="c34">Sharpe, 2019</xref></italic></bold>). The gradient model led to the notion of positional information encoded in the concentration gradient of a morphogen (<bold><italic><xref ref-type="bibr" rid="c46">Wolpert, 1969</xref></italic></bold>; <bold><italic><xref ref-type="bibr" rid="c37">Tkačik and Gregor, 2021</xref></italic></bold>). In contrast, the balancing model represents a form of self-organized pattern formation, akin to the Turing mechanism (<bold><italic><xref ref-type="bibr" rid="c40">Turing, 1952</xref></italic></bold>) but without an intrinsic wavelength of the pattern (<bold><italic><xref ref-type="bibr" rid="c22">Ishihara and Kaneko, 2006</xref></italic></bold>). Both mechanisms have in common, however, that they require long-range signaling: In the case of the gradient model, cells respond to a globally diffusible molecule, for which a concentration gradient is maintained. In the balancing model, cells produce different long-range signaling molecules depending on their internal gene expression state, and cells adopt the state of their neighbors, if the total signal concentration emitted by them is weaker than their own.</p>
<p>Morphogen gradients and positional information are firmly and quantitatively established in model systems such as the early <italic>Drosophila</italic> embryo (<bold><italic><xref ref-type="bibr" rid="c37">Tkačik and Gregor, 2021</xref></italic></bold>). More generally, however, long-range signaling is limited by the diffusivity of the signaling molecule, such that alternative mechanisms are likely required for axial patterning over larger scales in multicellular systems (<bold><italic><xref ref-type="bibr" rid="c18">Dickmann et al., 2022</xref></italic></bold>). Alternative mechanisms are valuable also for the construction of synthetic multicellular systems <bold><italic><xref rid="c38" ref-type="bibr">Toda et al. (2018)</xref></italic></bold>; <bold><italic><xref rid="c19" ref-type="bibr">Dupin and Simmel (2019)</xref></italic></bold>. Mechanisms based on short-range signaling, between cells and their neighbors, are particularly promising in this context. On the one hand, short-range cell-to-cell communication, e.g., via Delta-Notch signaling (<bold><italic><xref ref-type="bibr" rid="c20">Ehebauer et al., 2006</xref></italic></bold>; <bold><italic><xref ref-type="bibr" rid="c5">Andersson et al., 2011</xref></italic></bold>; <bold><italic><xref ref-type="bibr" rid="c35">Sjöqvist and Andersson, 2019</xref></italic></bold>), Wnt signaling (<bold><italic><xref ref-type="bibr" rid="c26">Logan and Nusse, 2004</xref></italic></bold>), or Eph/Ephrin signaling (<bold><italic><xref ref-type="bibr" rid="c23">Klein, 2012</xref></italic></bold>), is ubiquitously available. For instance, the Notch pathway, which is conserved across the metazoa (<bold><italic><xref ref-type="bibr" rid="c13">Bray, 2006</xref></italic></bold>), uses membrane-bound proteins for communication between adjacent cells, regulating the formation of developmental patterns through lateral inhibition and lateral induction (<bold><italic><xref ref-type="bibr" rid="c11">Bocci et al., 2020</xref></italic></bold>). On the other hand, recent advances in synthetic biology enable the insertion of orthogonal short-range signaling systems into cells (<bold><italic><xref ref-type="bibr" rid="c38">Toda et al., 2018</xref></italic></bold>) and the creation of artificial cells with local communication (<bold><italic><xref ref-type="bibr" rid="c19">Dupin and Simmel, 2019</xref></italic></bold>).</p>
<p>Here, we revisit the French Flag problem to identify alternative mechanisms for axial patterning based only on short-range signaling. Towards this end, we use evolutionary searches to explore a large space of different models. These models have in common that they describe a one-dimensional array of locally communicating cells: Each cell is able to produce local signals, process signals from its neighbors, and respond in a context-dependent manner by switching its internal state. The models differ with respect to their local rules for signaling and signal processing. From a computational perspective, the French Flag problem with the short-range signaling constraint can be considered as a distributed computing problem — a number of cells jointly and distributively solves a task, without any of the cells receiving all of the inputs or observing all of the outputs (<bold><italic><xref ref-type="bibr" rid="c2">Afek et al., 2011</xref></italic></bold>). This computational perspective is reflected in our choice of the modeling framework for the signal processing of cells: We use the cellular automata (CA) framework, which was originally introduced and leveraged to study questions at the interface between the theories of computation and pattern formation (<bold><italic><xref ref-type="bibr" rid="c41">Ulam et al., 1962</xref></italic></bold>; <bold><italic><xref ref-type="bibr" rid="c28">Neumann et al., 1966</xref></italic></bold>; <bold><italic><xref ref-type="bibr" rid="c14">Conway, 1970</xref></italic></bold>; <bold><italic><xref ref-type="bibr" rid="c44">Wolfram, 1983</xref>, <xref ref-type="bibr" rid="c45">1984</xref></italic></bold>). Later, the CA framework also proved useful in describing the formation of cell differentiation patterns in various <italic>in vivo</italic> systems (<bold><italic><xref ref-type="bibr" rid="c3">Akberdin et al., 2007</xref></italic></bold>; <bold><italic><xref ref-type="bibr" rid="c27">Manukyan et al., 2017</xref></italic></bold>; <bold><italic><xref ref-type="bibr" rid="c1">Adhyapok et al., 2020</xref></italic></bold>).</p>
<p>By focusing on logical rules for local signaling and the dynamics of a small number of discrete cell states, CA provide a suitable level of description for our study. CA have previously been used to explore patterning principles for cellular systems (<bold><italic><xref ref-type="bibr" rid="c16">Deutsch and Dormann, 2005</xref></italic></bold>; <bold><italic><xref ref-type="bibr" rid="c7">Basanta et al., 2008</xref></italic></bold>; <bold><italic><xref ref-type="bibr" rid="c30">Ramalho et al., 2021</xref></italic></bold>; <bold><italic><xref ref-type="bibr" rid="c12">Bojer et al., 2022</xref></italic></bold>), and to construct specific solutions for different “Flag problems” (<bold><italic><xref ref-type="bibr" rid="c21">Herman and Liu, 1973</xref></italic></bold>; <bold><italic><xref ref-type="bibr" rid="c32">Rohlf and Bornholdt, 2005</xref>, <xref ref-type="bibr" rid="c33">2009</xref></italic></bold>; <bold><italic><xref ref-type="bibr" rid="c29">Nichele et al., 2017</xref></italic></bold>). Clearly, modeling frameworks other than CA are available, such as message passing models, which have been used to construct solutions to the French flag problem based on the communication and computation abilities of digital electronic devices (<bold><italic><xref ref-type="bibr" rid="c4">Ancona et al., 2019</xref></italic></bold>). As we will see below, the CA framework is well suited for an evolutionary optimization approach, since it naturally lends itself to a multiple alignment procedure that enables the identification of ‘consensus’ or prototype rules from an ensemble of selected CA models. This procedure proves instrumental to dissect successful patterning strategies into pattern formation modules, which each represent a relatively simple patterning principle that could conceivably be implemented in biological or bioengineered multicellular systems. We show that these modules serve as building blocks to engineer patterning schemes. Finally, we characterize the robustness of these schemes to growth of the system and noisiness of the systems’ dynamics or initial conditions, and show how strategies for different proportions of stripes can be either constructed or searched for.</p>
</sec>
<sec id="s2">
<title>Model and Methods</title>
<sec id="s2a">
<title>Modeling framework</title>
<p>We use cellular automata (CA) as conceptual models for tissues or synthetic systems composed of individual cellular units, which communicate with their neighbors via signaling mechanisms. This modeling framework focuses on the information processing within cells. It thereby enables our investigation of different <italic>strategies</italic> for pattern formation via contact-based signaling, regardless of the underlying molecular mechanisms. Computationally, the simplicity of CA allows the exploration of a large class of models, and evolutionary searches for models that satisfy different criteria.</p>
<p>Given our focus on axial patterns, it is sufficient to consider one-dimensional CA composed of a line of cells. Axial patterning in two-dimensional systems can use the same strategies as in one dimension, while an additional lateral coupling between adjacent lines of cells could increase the robustness of the patterning process (<bold><italic><xref ref-type="bibr" rid="c30">Ramalho et al., 2021</xref></italic></bold>). The cells in a one-dimensional CA of size <italic>L</italic> are labelled by a position index <italic>i</italic> = 1 … <italic>L</italic>. Each cell <italic>i</italic> has an internal state, represented by a single integer variable <italic>x</italic><sub><italic>i</italic></sub> ∈ {0, …, <italic>k</italic> − 1}, where <italic>k</italic> denotes the number of different internal states. For the French flag problem, the minimal number of states is <italic>k</italic> = 3, but we will also consider CA with more states. For instance, a fourth state could correspond to an initial, undifferentiated state, or to a transient state that does not occur in the final pattern.</p>
<p>In the CA modeling framework used here, cells do not change their relative position <italic>i</italic> in the system. However, cells can change their internal state in a context-dependent manner, i.e., depending on their current state and the current state of their neighbors. These state transitions occur at discrete time points and are governed by an update function <italic>f</italic>, called rule (<xref rid="fig1" ref-type="fig">fig. 1a</xref>). In a biological interpretation, the rule subsumes the effect of local inter-cellular interactions, intracellular signal processing, and internal differentiation processes. Computationally, the update rule takes as an input the states <inline-formula><inline-graphic xlink:href="573602v1_inline1.gif" mimetype="image" mime-subtype="gif"/></inline-formula> of a cell <italic>i</italic> and its nearest neighbors at a given time <italic>t</italic>, and outputs the new state of cell <italic>i</italic> at time <italic>t</italic> + 1,
<disp-formula id="eqn1">
<graphic xlink:href="573602v1_eqn1.gif" mimetype="image" mime-subtype="gif"/>
</disp-formula></p>
<fig id="fig1" position="float" fig-type="figure">
<label>Figure 1.</label>
<caption><p>Cellular Automata (CA) as a minimal model of pattern formation via local cell-cell signaling. (a) Example of a one-dimensional CA of length <italic>L</italic> = 15, two states and fixed boundary conditions. Given a pattern of cells in the blue (0) or white (1) state at time <italic>t</italic>, an update function <italic>f</italic> (the “update rule”) determines the pattern at time <italic>t</italic> + 1. This rule maps each of the 8 possible configurations of a cell with its two nearest neighbors to an output, the new state of the cell. Each rule is uniquely identified by the string of output values for all possible input configurations in a prescribed order. (b) By analogy to pattern-forming developmental systems, we define a genotype to phenotype to fitness relation for the CA models. All cells in the system use the same update rule, which specifies the dynamical behaviour of the system. The string of output values encoding the rule is thus interpreted as a genotype, whereas the pattern formation process produced by the rule is the phenotype. While the fitness could generally depend on various aspects of the pattern formation process, we assume here that fitness depends only on the final pattern: The fitness is defined as the fraction of the final pattern that matches the target pattern. In the shown example, the French Flag pattern is the target pattern, but other axial patterns are also considered.</p></caption>
<graphic xlink:href="573602v1_fig1.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
<p>Each update rule <italic>f</italic> is uniquely specified by the sequence <italic>S</italic> of digits that represent the rule’s outputs to all possible combinations of input signals. This sequence also serves as the identifier for the rule (<xref rid="fig1" ref-type="fig">fig. 1a</xref>). Here, we only consider CA that apply the same rule to all cells, such that the behavior of a cell does not explicitly depend on its position <italic>i</italic> in space.</p>
<p>The update rule <xref ref-type="disp-formula" rid="eqn1">(1)</xref> is deterministic, since the current cell states <inline-formula><inline-graphic xlink:href="573602v1_inline2.gif" mimetype="image" mime-subtype="gif"/></inline-formula> uniquely determine the cell states at subsequent times. In contrast, actual cells and synthetic cell-like systems are subject to biomolecular noise, which contributes a probabilistic component to their behavior. In our modeling framework, we explore the effects of noise using probabilistic updates of the form
<disp-formula id="eqn2">
<graphic xlink:href="573602v1_eqn2.gif" mimetype="image" mime-subtype="gif"/>
</disp-formula>
where the cell follows the context-dependent update rule with a (high) probability 1 −<italic>p</italic>, but ignores this rule with a (small) probability <italic>p</italic> by randomly choosing any state with equal likelihood.</p>
<p>While conventional CA models assume a fixed grid of cells and updates that happen simultaneously for all cells, biological systems often grow and their constituent cells are not perfectly synchronized. We therefore also analyze the effects of growth and asynchrony on pattern formation within our modeling framework. Towards this end, we allow for different levels of asynchrony by setting a probability <italic>p</italic><sub><italic>A</italic></sub> for a single cell to undergo an asynchronous update per time step. For each update, we determine, according to the probability <italic>p</italic><sub><italic>A</italic></sub>, which cells to update asynchronously, and carry out the synchronous update for the remaining cells. We then perform the asynchronous updates in random order. The probability <italic>p</italic><sub><italic>A</italic></sub> then serves as a continuous parameter to control the degree of asynchrony. To introduce growth, we define an analogous parameter, the probability <italic>p</italic><sub><italic>divide</italic></sub> per time step for each cell to divide. The cell divisions that are selected according to this probability are carried out at each time step after the updates of the internal states, with daughter cells inheriting the internal state of their respective mother cells at that time.</p>
<p>Iterating the update procedure described above generates a timeline of state patterns, which is a characteristic of the pattern formation process under a given rule. From a biological perspective, the sequence <italic>S</italic> representing the update rule can be thought of as a genotype, which encodes a patterning strategy. The state <italic>x</italic><sub><italic>i</italic></sub> of a cell can be regarded as a cell type, and the timeline of state patterns <inline-formula><inline-graphic xlink:href="573602v1_inline3.gif" mimetype="image" mime-subtype="gif"/></inline-formula> will be regarded as the phenotype of the respective rule (<xref rid="fig1" ref-type="fig">fig. 1b</xref>). Note that this phenotype is determined by both the rule and the initial pattern – the initial state <inline-formula><inline-graphic xlink:href="573602v1_inline4.gif" mimetype="image" mime-subtype="gif"/></inline-formula> of all cells. So, in the biological analogy, the phenotype does not only depend on the genotype <italic>S</italic>, but also on the epigenetic information<inline-formula><inline-graphic xlink:href="573602v1_inline5.gif" mimetype="image" mime-subtype="gif"/></inline-formula>.</p>
<p>While the phenotype is a pattern formation process, we are especially interested in the final pattern of cell states in the context of the generalized French flag problem considered here. Since in biological systems the time to develop a pattern is limited, we follow the dynamics of the cellular automaton for up to <italic>T</italic> = 2<italic>L</italic> steps in a system of size <italic>L</italic>, and compare this final pattern to the target pattern (alg. S1). The rule dynamics can, in principle, be transient or stationary, but we later show that our procedure produces rules that form stationary patterns with a time to steady state not larger than 2<italic>L</italic>.</p>
</sec>
<sec id="s2b">
<title>Fitness</title>
<p>To quantify how close the final pattern of the pattern formation process is to the target pattern, we use a fitness function. The closer the final pattern resembles the target pattern, the larger is the fitness Φ, which is defined as the percentage of positions at which the final pattern matches the target pattern (<xref rid="fig1" ref-type="fig">fig. 1b</xref>),
<disp-formula id="eqn3">
<graphic xlink:href="573602v1_eqn3.gif" mimetype="image" mime-subtype="gif"/>
</disp-formula></p>
<p>Because a genotype can produce different final patterns depending on the initial condition, we also consider for each genotype a mean fitness corresponding to the fitness average across possible initial conditions of a given length. Hence, the mean fitness for a given genotype <italic>S</italic> is only a function of the system size <italic>L</italic>. In practice, sampling all initial conditions for large <italic>L</italic> is computationally intractable, so in what follows we estimate the mean fitness from a random sample of <italic>N</italic><sub><italic>sample</italic></sub> initial conditions (alg. S2).</p>
</sec>
<sec id="s2c">
<title>Evolutionary algorithm</title>
<p>Evolutionary algorithms (EAs) mimic natural evolution to solve an optimization problem, by evolving a population of trial solutions to the problem via cycles of random mutation and selection. The successful application of EAs to CA models has previously been demonstrated [Mitchell, M., Hraber, P., Crutchfield, J., 1994. Evolving cellular automata to perform computations: Mechanisms and impediments. Physica D 75, 361391] (<bold><italic><xref ref-type="bibr" rid="c33">Rohlf and Bornholdt, 2009</xref></italic></bold>). Here, we use EAs to optimize the fitness Φ of pattern-forming CA rules. We start with a population of rules and use each of them to simulate CA with a fixed system size (default: <italic>L</italic> = 100), starting from <italic>N</italic><sub><italic>sample</italic></sub> different initial conditions (default: <italic>N</italic><sub><italic>sample</italic></sub> = 50). The random initial conditions are newly generated in each cycle of the EA and for each rule. Given the small sample size, this adds a stochastic element to the computation of the mean fitness according to <xref ref-type="disp-formula" rid="eqn3">eq. (3)</xref>. For each rule, we apply two statistically independent mutations in its genotype, and determine its mean fitness as described above. If this mean fitness is higher than that of the original rule, we replace the original rule by its mutated version. Otherwise, we keep the original rule in the population. Finally, we sort the rules according to their fitness and discard the bottom 30%, replacing them by randomly generated rules (<xref rid="fig2" ref-type="fig">fig. 2a</xref>). This completes one evolution cycle and creates the initial population for the next one (see alg. S1).</p>
<fig id="fig2" position="float" fig-type="figure">
<label>Figure 2.</label>
<caption><p>Evolutionary search for high-fitness rules and multiple alignment. (a) Schematics of the evolutionary algorithm (EA). Starting with a population of rules, the algorithm uses mutation and selection steps to find rules with higher fitness. (b) Left: Phenotype of a high-fitness rule found with the EA. Center: Multiple alignment of the genotype of this rule with those of its high fitness neighbors (Φ &gt; 0.9) up to a Hamming distance of 6, totalling 379 different rules (the first rule in the alignment is the EA output). The consensus rule is the result of the multiple alignment. Right: Phenotype of the consensus rule.</p></caption>
<graphic xlink:href="573602v1_fig2.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
</sec>
<sec id="s2d">
<title>Adaptive fitness calculation</title>
<p>When searching the whole rule space (<xref rid="fig3" ref-type="fig">fig. 3e-g</xref>), we calculate rule fitness (<xref ref-type="disp-formula" rid="eqn3">eq. (3)</xref>) using <xref ref-type="statement" rid="fig1algS2">alg. S2</xref> with an adaptive assignment of parameter values to improve computational efficiency: First, we calculate rule fitness by sampling <italic>N</italic><sub><italic>sample</italic></sub> = 10 initial conditions with length <italic>L</italic> = 30. If the fitness exceeds 2/3, 40 additional initial conditions with the same length are sampled and all 50 samples are used to calculate that rule’s mean fitness. This reduces the computational cost for rules that are likely low scoring. Only rules with fitness above 0.8 are saved.</p>
<fig id="fig3" position="float" fig-type="figure">
<label>Figure 3.</label>
<caption><p>Dissecting the pattern formation mechanisms of the consensus rule. (a) Sequence logo for the consensus rule and its high-fitness neighbors (Φ &gt; 0.9) up to a Hamming distance of 5 (in total 387 rules). The horizontal axis represents the 27 entries within the update rule (the input pattern is indicated for each entry to facilitate interpretation). The information content (decrease in Shannon entropy compared to a uniform distribution) in bits for each entry can be read off on the vertical axis as the total height of the stack of symbols. The relative height of the symbols represents their relative frequencies, with the most frequent output at the top. An entry of the update rule is considered as highly variable, if its entropy is more than 1 bit (information content less than <italic>log</italic><sub>2</sub>(3) − 1 = 0.58). (b) Table of all single mutations of the consensus rule. Vertical axis shows to which state the output is mutated. The fitness of the mutant rule is color-coded (white indicates fitness above 0.9). Black squares mark the consensus output. (c) The condition that the target French flag pattern must be maintained once it is reached (steady-state) fixes seven entries of the update rule. (d) Partition of consensus rule entries into two patterning modules. The sorting module contains 12 entries and effectively implements a swap between white and blue states when white is to the left. The bulldozer module contains 15 entries and creates a red bulldozer state that moves to the right, while erasing any white and blue states to its right and alternately seeding blue and white states to its left. These two characteristics of the red bulldozer state are schematically represented by the grey boxes with the pointy arrow to white and blue states on the left, and the blunt-ended arrow to white and blue states on the right. (e-g) T-distributed Stochastic Neighbor Embedding (tSNE) plots of 3-state CA rules with fitness larger than 0.85, based on the genotypes <italic>S</italic> of the rules. Crosses represent the position of the consensus rule (red) and its symmetric partner (pink). The plots are colored based on rule fitness (e), overlap with conserved entries of the sorting module (f) or the bulldozer module (g). The left side of the plots in (f) and (g) shows high agreement with the sorting and bulldozer modules, while the right side shows high agreement with their respective symmetric partner rules (<xref rid="fig3S3" ref-type="fig">fig. S3c</xref> and <xref rid="fig3S3" ref-type="fig">d</xref>). Therefore, most high scoring rules combine the sorting and bulldozer module to achieve the French flag pattern.</p></caption>
<graphic xlink:href="573602v1_fig3.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
</sec>
</sec>
<sec id="s3">
<title>Results</title>
<sec id="s3a">
<title>Evolutionary exploration of 3-state rules</title>
<p>We first apply the modeling framework described above to Wolfram’s classic French flag problem. The minimal number of states necessary to form a French flag pattern is <italic>k</italic> = 3. Even with only three states, the number of possible update rules is already vast: The three input cells of the rule, i.e. the central cell and its two neighbors (<xref rid="fig1" ref-type="fig">fig. 1</xref>), then each have three possible states, totaling 3<sup>3</sup> different input configurations, each of which can be mapped to three possible output values, resulting in <inline-formula><inline-graphic xlink:href="573602v1_inline6.gif" mimetype="image" mime-subtype="gif"/></inline-formula> rules. To find French flag forming rules in a more efficient way than by exhaustive search, we used evolutionary algorithms (EAs) that apply iterative mutation, selection, and random insertion to a population of rules (see ‘Model and Methods’ and <xref rid="fig2" ref-type="fig">fig. 2a</xref>). The pattern formation starting from random initial conditions is scored by the fitness Φ defined by <xref ref-type="disp-formula" rid="eqn3">Eq. 3</xref>. The EAs lead to a gradual increase of the average fitness of the rules in the population, and a punctuated increase of the maximal fitness (<xref rid="fig2S1" ref-type="fig">fig. S1a,b</xref>). We found that including random insertions of new rules after selection slows the increase of the average fitness, but typically increases the maximal fitness that is reached (<xref rid="fig2S1" ref-type="fig">fig. S1b,c</xref>). We therefore settled on a single EA, in the following referred to as ‘Full EA’, which combines mutations with a fixed fraction of random insertions in each iteration.</p>
<p>The Full EA finds many rules in 3-state space, which have high fitness Φ and form final patterns resembling a French flag, starting from random initial conditions (<xref rid="fig2S1" ref-type="fig">fig. S1</xref>). Moreover, the evolutionary search is robust, in the sense that independent runs of the EA with different initial populations of rules yield rules with similar fitness (<xref rid="fig2S1" ref-type="fig">fig. S1c</xref>). The phenotype of the rule that displayed the highest fitness is shown in <xref rid="fig2S1" ref-type="fig">fig. S1d</xref> for three different system sizes. The fitness of this rule increases with the system size (<xref rid="fig2S1" ref-type="fig">fig. S1e</xref>), for reasons that will become clear below.</p>
</sec>
<sec id="s3b">
<title>Multiple alignment reveals a robust consensus rule</title>
<p>While the evolutionary search successfully identifies many high-fitness rules, understanding how the local signaling logic of those rules forms the target pattern remains a challenge. In order to better understand which properties of high-fitness rules are essential for their function, we use a multiple alignment procedure. This is conceptually similar to the identification of sequence motifs by aligning DNA, RNA, or protein sequences (<bold><italic><xref ref-type="bibr" rid="c6">Bailey, 2008</xref></italic></bold>), or network motifs by aligning biological networks (<bold><italic><xref ref-type="bibr" rid="c9">Berg and Lässig, 2004</xref></italic></bold>). In our case, we perform multiple alignments based on the geno-types <italic>S</italic> that define the update rules (<xref rid="fig2" ref-type="fig">fig. 2b</xref>). Each position in <italic>S</italic> encodes the rule’s output value for a specific configuration of the three input cells. When the multiple alignment is performed on related (“homologous”) high-fitness rules, a conserved value in a column of the multiple alignment thus indicates that the encoded context-dependent cell state transition is important for the patterning mechanism implemented by these rules. By contrast, columns in the alignment displaying highly variable values indicate input configurations that likely play non-essential roles. As for sequence motifs, we determine a “consensus rule” by selecting the most frequent value in each position of the multiple alignment.</p>
<p>To create an ensemble of related high-fitness rules, we take the genotype of one of the rules found by the evolutionary algorithm as a seed, and then select all rules that are at most 6 mutations away from this seed and have a fitness above a threshold of Φ = 0.9 (<xref rid="fig2" ref-type="fig">fig. 2b</xref>). This yields an ensemble of around 400 rules, with which we perform the multiple alignment to determine the consensus rule (<xref rid="fig2" ref-type="fig">fig. 2b</xref>). Note that this consensus rule is not the fittest rule in the ensemble of related high-fitness rules (<xref rid="fig2" ref-type="fig">fig. 2b</xref>). We will see further below that the consensus rule serves as a prototype, which exemplifies the general patterning strategy of the ensemble, but does not feature specific optimizations used by the highest-fitness rules. In the example shown in <xref rid="fig2" ref-type="fig">fig. 2b</xref>, the consensus rule has approximately the same fitness as the seed rule, but its phenotype <inline-formula><inline-graphic xlink:href="573602v1_inline7.gif" mimetype="image" mime-subtype="gif"/></inline-formula> appears more ordered and reaches the steady-state more rapidly.</p>
<p>Visual inspection of the phenotypes <inline-formula><inline-graphic xlink:href="573602v1_inline8.gif" mimetype="image" mime-subtype="gif"/></inline-formula> in <xref rid="fig2" ref-type="fig">fig. 2b</xref> also reveals that the seed rule and the consensus rule share a basic feature: The underlying patterning strategy is asymmetric, in the sense that the mechanism generating the red stripe is apparently different from the mechanism generating the blue stripe. We will dissect this patterning strategy in the next section, but emphasize already now that all rules within a multiple rule alignment must be from the same symmetry class in order for the consensus rule to be meaningful. For instance, it is straightforward to construct a symmetric partner of the consensus rule, for which the mechanisms to generate the blue and red stripes are interchanged (<xref rid="fig2S2" ref-type="fig">fig. S2</xref>). Even though this symmetric partner rule implements the same patterning strategy overall, its genotype <italic>S</italic> is not homologous to that of the consensus rule. This example illustrates why the multiple alignment cannot simply be constructed from all high-fitness rules identified by the evolutionary algorithm.</p>
<p>Our procedure to identify the consensus rule involves several parameter choices, including the fitness threshold that defines high-fitness rules, the choice of the starting rule to generate the ensemble, and the maximum Hamming distance from the starting rule. To test whether the consensus procedure is robust, we varied these choices and recalculated the consensus rule (<xref rid="fig2tblS1" ref-type="fig">table S1</xref>). The genotypes <italic>S</italic> of the obtained consensus rules displayed at most 5 mutations with respect to the consensus rule of <xref rid="fig2" ref-type="fig">fig. 2b</xref>. Out of all mutations, only one was within the conserved positions of the original multiple alignment, and this happened when the fitness threshold was decreased to 0.85, which includes many rules with inferior pattern formation. Taken together, these results indicate that the consensus procedure is not sensitive to the choice of the parameter values.</p>
</sec>
<sec id="s3c">
<title>Consensus rule can be dissected into two patterning modules</title>
<p>We now turn to the mechanistic interpretation of the consensus rule identified in <xref rid="fig2" ref-type="fig">fig. 2b</xref>. Towards this end, we first consider the sequence motif obtained from the multiple alignment. The sequence logo (<xref rid="fig3" ref-type="fig">fig. 3a</xref>) quantifies the sequence bias in the ensemble of related high-fitness rules, by depicting the statistical preferences at each site of the sequence in terms of the Shannon entropies. Out of the 27 sites in the sequence, 9 are perfectly conserved, 10 display a strong bias, and 8 are highly variable (<xref rid="fig3" ref-type="fig">fig. 3a</xref>). The pattern observed in the sequence logo is also consistent with the fitness effects of point mutations to the consensus rule (<xref rid="fig3" ref-type="fig">fig. 3b</xref>). Seven of the perfectly conserved sites in the motif can be understood to be a consequence of the hard requirement that the final French flag pattern is a steady-state pattern, i.e., it must be conserved under the update rule (<xref rid="fig3" ref-type="fig">fig. 3c</xref>).</p>
<p>A closer inspection of the consensus rule reveals that it can be partitioned into two functional modules (<xref rid="fig3" ref-type="fig">fig. 3d</xref>), which we refer to as the “sorting module” and the “bulldozer module”, respectively. Together, these two modules generate a French flag pattern, but they perform complementary functions. The sorting module effectively sorts blue states to the left and white states to the right. It contains all entries of the update rule in which the left and center positions of the input are not red (2 × 2 × 3 = 12 out of the 27 entries). Not all of these entries appear consistent with the simple sorting interpretation. In particular, entry #9 updates to a red state rather than white. However, this deviation is not essential (see below), which is indicated also by the fact that entry #9 is among the highly variable positions in the sequence logo (<xref rid="fig3" ref-type="fig">fig. 3a</xref>).</p>
<p>The bulldozer module contains the remaining 15 entries of the update rule (<xref rid="fig3" ref-type="fig">fig. 3d</xref>). Effectively, this module moves red states to the right until they hit another red state. In the process, a moving red state erases the pattern in front of it and generates new blue and white states in its trail (we therefore refer to the red state as ‘bulldozer state’). Through the repeated action of the bulldozer module, the red states accumulate on the right, forming the red stripe, while the last bulldozer leaves blue and white states behind, which are sorted by the sorting module to form the blue and white stripes in the left and center, completing the French flag pattern. This interpretation of the pattern formation process generated by the consensus rule suggests the following properties: (i) the total number of red states should be conserved during the process, (ii) the leftmost red state should seed blue and white states in a one-to-one ratio, (iii) the blue and white states to the left of the leftmost red state should be sorted into stripes maintaining their numbers, and (iv) the final pattern should scale with the system size, as required in the statement of the French flag problem. We checked these properties empirically (<xref ref-type="app" rid="app4">Appendix 4</xref> and <xref rid="fig3S2" ref-type="fig">fig. S2</xref>). Property (iv) holds for the consensus rule, in the sense that the mean boundary positions scale linearly with the system size (<xref rid="fig3S2" ref-type="fig">fig. S2d</xref>). Properties (i) and (iii) become true when entry #9 of the consensus rule is mutated to white or blue (<xref rid="fig3S2" ref-type="fig">fig. S2a, b, g, h</xref>), because this stops the creation of additional red states. Property (ii) becomes true when entry #15 is mutated to blue (<xref ref-type="app" rid="app4">Appendix 4</xref> and <xref rid="fig3S2" ref-type="fig">fig. S2c</xref>).</p>
<p>We created an analytically solvable model of the pattern formation mechanism with properties (i)-(iii). Using this model, we proved that the mean fitness of this mechanism converges to 1 as the system size <italic>L</italic> increases, with a power law exponent of −1/2 (<xref ref-type="app" rid="app5">Appendix 5</xref>). This also implies the scaling property (iv). Because the properties (i)-(iii) do not exactly hold for the consensus rule, it is not surprising that the mean fitness of the consensus rule converges to a value less than one (17/18) as the system length is increased (<xref rid="fig3S2" ref-type="fig">fig. S2f</xref>). However, the mean fitness of the rule where entry #9 is mutated to white does follow the predicted fitness scaling (<xref rid="fig3S2" ref-type="fig">fig. S2f</xref>).</p>
<p>Using the above insight, we can also rationalize the highly variable sites in the sequence logo (<xref rid="fig3" ref-type="fig">fig. 3a</xref>). These correspond to the entries controlling the bulldozer seeding process (#6 and #15), the dynamics of blue and white states in between bulldozers (#20, #24, #25), and inputs that rarely appear in the patterning process (#2, #9, #18). These entries are flexible not because they are completely irrelevant for pattern formation, but rather because there are different combinations of their outputs that successfully form a French flag. As an example, when entry #25 maps to white, most states in between red states are going to be white during pattern formation. This makes entries #6, #15, and #24, which require a blue state to the right of a red state, mostly irrelevant. Conversely, when entry #25 maps to blue, blue and white states appear often between red states, so inputs #6, #15, and #24 become relevant.</p>
</sec>
<sec id="s3d">
<title>Exhaustive search within 3-state rule space</title>
<p>Since the evolutionary exploration of the rule space used above may have missed other patterning strategies, we also sought to perform an exhaustive search of the whole rule space, trying to identify all successful patterning strategies. Such an exhaustive search is computationally challenging, but for the minimal case of <italic>k</italic> = 3 states it is feasible, in principle, since the number of rules is on the order of a trillion. In practice, this requires a very fast computation of the fitness of each rule. Towards this end, we used an adaptive algorithm (see Model and Methods), which quickly eliminates rules that clearly do not form a French flag and evaluates with more attention the remaining ones.</p>
<p>We used this exhaustive search approach to identify all high-fitness rules, defined here as rules with fitness estimates larger than <italic>f</italic> &gt; 0.85 (in total 6675 rules). In order to assess and visualize to what extent these rules rely on the same types of “Sorting” and “Bulldozer” modules as the consensus rule, we chose the following strategy: We first represented the rules as dots in a two-dimensional plane, arranged such that similar rules lie close together. For this purpose, we used a t-distributed Stochastic Neighbor Embedding (tSNE) plot (<bold><italic><xref ref-type="bibr" rid="c43">van der Maaten and Hinton, 2008</xref></italic></bold>), based on the genotypes <italic>S</italic> of the rules (see <xref rid="fig3" ref-type="fig">fig. 3e</xref>). In this plot, we also marked the positions of the consensus rule (red cross) and its symmetric partner rule (pink cross). We then colored the dots within this same plot in different ways, according to color codes defined by different observables that characterize the behavior or structure of the rule. Note that the tSNE plot displays an approximate mirror symmetry, where nearly every cluster of dots on the left side has a symmetric partner on the right side (<xref rid="fig3" ref-type="fig">fig. 3e</xref>). The consensus rule and its symmetric partner rule are also in mirror symmetric positions on the left and right, respectively. This symmetry becomes useful when we next interpret the color patterns obtained from different observables.</p>
<p>Using fitness as the color code reveals no particular pattern in the tSNE plot (<xref rid="fig3" ref-type="fig">fig. 3e</xref>). However, when the dot color encodes the overlap of the rule with the blue-white sorting module (<xref rid="fig3" ref-type="fig">fig. 3f</xref>) of the consensus rule, the vast majority of rules on the left-hand side display full overlap. Here, overlap is defined as the fraction of module entries within the update rule that match the corresponding consensus module entry, not including the entries that were highly variable in <xref rid="fig3" ref-type="fig">fig. 3a</xref> (entries with information content less than log<sub>2</sub> (3) − 1 = 0.58 bits). Many rules on the left-hand side also contain the red bulldozer module of the consensus rule, or have a high degree of overlap with it (<xref rid="fig3" ref-type="fig">fig. 3g</xref>). Conversely, the rules on the right-hand side display a high degree of overlap with the white-red sorting module and the blue bulldozer module of the symmetric partner rule (<xref rid="fig3S3" ref-type="fig">fig. S3</xref>). Color-coding also for the overlap with the steady-state conditions of <xref rid="fig3" ref-type="fig">fig. 3c</xref> reveals that a small group of rules at the top, as well as a few interspersed rules elsewhere, violate these conditions (<xref rid="fig3S3" ref-type="fig">fig. S3</xref>). Consistently, the average time to reach the steady state cannot be defined for these rules, and is shown as zero in the corresponding dot plot (<xref rid="fig3S3" ref-type="fig">fig. S3</xref>). These rules, which generate propagating wave fronts, received a high fitness score only because their transient pattern is typically close to the French Flag pattern at the fixed time point when the fitness is evaluated.</p>
<p>Taken together, our exhaustive search within 3-state rule space revealed no new patterning strategy beyond the strategy of the consensus rule, which combines a sorting module with a bulldozer module. In particular, the search revealed no “pure strategies”, based either only on sorting or only on a erase-and-reconstruct mode of patterning. We will next see that such pure strategies become possible when the rule space is expanded to four states.</p>
</sec>
<sec id="s3e">
<title>Pure sorting and landscaping strategies for axial patterning</title>
<p>Three is clearly the minimal number of cell states required to generate a French flag pattern. A fourth state, which occurs transiently but not in the final pattern, may offer the flexibility required to implement alternative patterning strategies. For instance, three states are insufficient to implement a pure sorting strategy, which starts from a random distribution of states and effectively moves all blue states to the left and red states to the right: The underlying issue is that local configurations of three neighboring cells in an inverted French flag state lead to an ambiguous update according to the sorting logic (<xref rid="fig4" ref-type="fig">fig. 4a</xref>). This issue can be resolved with the help of an additional transient state (shown in black), which mimicks the superposition of a blue and a red state. A resolution module involving this additional black state (<xref rid="fig4" ref-type="fig">fig. 4b</xref>) combined with three sorting modules (blue-white, white-red, blue-red) then successfully sorts an initial pattern containing the problematic inverted French flag configuration (<xref rid="fig4" ref-type="fig">fig. 4c,d</xref>). We refer to this 4-state rule encompassing the resolution module and the three sorting modules as the ‘Bubble rule’ (<xref rid="fig4S1" ref-type="fig">fig. S1a</xref>), because its behavior resembles that of the bubble sorting algorithm (<bold><italic><xref ref-type="bibr" rid="c24">Knuth, 1998</xref></italic></bold>), see <xref rid="fig5" ref-type="fig">fig. 5</xref> (left).</p>
<fig id="fig4" position="float" fig-type="figure">
<label>Figure 4.</label>
<caption><p>Pure sorting strategy. (a) Pure sorting with only three states faces a dilemma at local configurations of three cells in an inverted French flag pattern. According to the sorting logic, both lateral states, blue and red, should move to the center, while the white state should move both to the right and left. (b) The dilemma is resolved with an extra state (colored black, numbered 3 in genotypes <italic>S</italic>) representing the superposition of blue and red. A resolution module is formed by the shown set of updates. (c) Example of how the resolution module operates. A random initial pattern with local inverted French flag configuration is sorted, maintaining the initial number of cells in each state. To undo the duplication of the white state in the first time step, the resolution module lets the black state chase the extra white state on its right and, when they meet, exchange both states for a blue and a red state, resolving the ambiguity of the black state and erasing the duplicated white state. The arrows link this example to the general scheme underlying the resolution module shown in (d). An ambiguous position is always converted into a black cell and a duplicated white state. If the state of the cell to the right of the duplicated white is blue, that blue state is swapped with the one inside the black state (case 1). Otherwise, the red state takes the place of the duplicated white, resolving both the ambiguity of the black state and the duplication of the white state (case 2).</p></caption>
<graphic xlink:href="573602v1_fig4.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
<fig id="fig5" position="float" fig-type="figure">
<label>Figure 5.</label>
<caption><p>Three different axial patterning strategies in 4-state rule space. In addition to the mixed patterning strategy of the 3-state consensus rule, the introduction of a fourth, transient state also enables the formation of a French flag pattern via a pure sorting strategy (left), or via a full erase-and-reconstruct patterning strategy (middle). These new patterning strategies are implemented by combining the three pairwise sorting modules for the French flag color states with the resolution module or the hidden bulldozer module, respectively. The resulting phenotypic patterning behavior (bottom) is shown for two different system sizes, starting from random initial conditions in 4-state space. For comparison, a 4-state version of the 3-state consensus rule implementing the mixed patterning strategy is also shown (right). See fig. S1 for the full definitions of the three shown rules.</p></caption>
<graphic xlink:href="573602v1_fig5.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
<p>A full erase-and-reconstruct mode of forming the French flag pattern is also not possible with only three states. This is because the state that erases the initial pattern then has to be one of the states in the final pattern, such that it cannot erase itself. However, four states enable a “hidden bulldozer module” using a transient bulldozer state, which not only erases other states to its right, but also itself (<xref rid="fig5" ref-type="fig">fig. 5</xref>, middle). Compared to the bulldozer module of <xref rid="fig3" ref-type="fig">fig. 3d</xref>, this module has a modified seeding process, such that blue, white, and red states are seeded alternately to the left of the bulldozers. The states seeded by the bulldozer are then sorted into position by sorting modules for each pair of states. The problematic inverted French flag configuration never occurs, because of the seeding order of the bulldozer state. We refer to this 4-state rule combining the three sorting modules with a hidden bulldozer module as the “Landscaping rule”, as it re-patterns the entire system (<xref rid="fig5" ref-type="fig">fig. 5</xref>, middle).</p>
<p>The 4-state rule space also allows for a mixed patterning strategy akin to that of the 3-state consensus rule (<xref rid="fig5" ref-type="fig">fig. 5</xref>, right). Like the consensus rule, the 4-state “Mixed rule” (<xref rid="fig5" ref-type="fig">fig. 5</xref>, right) uses only a single sorting module for blue and white states and a bulldozer module with the red state as its bulldozer state. This 4-state bulldozer also erases the additional black state (see <xref rid="fig4S1" ref-type="fig">fig. S1</xref> for the full rule definition). Taken together, we now have three different axial patterning strategies, which triggers the question how they differ with respect to properties such as the accuracy, speed, robustness, and tunability of the patterning process. We analyze each of these aspects in the following.</p>
</sec>
<sec id="s3f">
<title>Accuracy and speed of the patterning process</title>
<p>Our fitness function (<xref ref-type="disp-formula" rid="eqn3">eq. (3)</xref>) quantifies the accuracy of the patterning process by measuring the deviation of the final pattern from the target pattern. We therefore compare the accuracy of different patterning strategies by comparing their mean fitness values achieved across random initial conditions. A large mean fitness is associated with an update rule that forms the French flag pattern with high accuracy for most initial conditions. <xref rid="fig6" ref-type="fig">Figure 6</xref> shows that the mean fitness grows with the system size <italic>L</italic>, for all three axial patterning strategies, approaching the maximal value 1 as a power law, supporting that all rules form perfect French flag patterns in the large system size limit. Interestingly, the Landscaping rule approaches this limit much faster than the other two, with a power law exponent around −1, compared to exponents close to −0.5 for the Bubble rule and the Mixed rule (inset).</p>
<fig id="fig6" position="float" fig-type="figure">
<label>Figure 6.</label>
<caption><p>Comparison of the patterning accuracy of the three patterning strategies of <xref rid="fig5" ref-type="fig">Fig. 5</xref>. Accuracy is measured via the mean fitness value (averaged over 1000 randomly chosen initial conditions). The maximal fitness of one is achieved only when a perfect French flag pattern is formed for all initial conditions. The mean fitness increases with the system size, <italic>L</italic>, for all patterning strategies, but it approaches the maximal fitness with different power laws (inset). Linear fits on a log-log scale (inset) yield the exponents −.509 ± .001 for the Mixed rule, −1.00 ± .01 for the Landscaping rule, and −.469 ± .001 for the Bubble rule. The mean fitness oscillates with a period of three, since perfect French flag patterns can be formed only when <italic>L</italic> is divisible by three.</p></caption>
<graphic xlink:href="573602v1_fig6.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
<p>To understand the mechanisms underlying these behaviors, we used simple analytically solvable models to derive the fitness scaling of the rules from basic probability principles (<xref ref-type="app" rid="app5">Appendix 5</xref>). In short, the Bubble rule generates the final pattern by sorting initial cell states, such that the statistical fluctuations in the initial distribution of cell states propagates to the final state. These fluctuations scale as the inverse square root of the system size, explaining the exponent of the Bubble rule. The Mixed rule is similarly affected by the statistical fluctuations in the initial distribution of cell states, and thus displays the same scaling as the Bubble rule (see <xref ref-type="app" rid="app5">Appendix 5</xref>). In contrast, the Landscaping rule uses a bulldozer state to re-pattern the entire system. The fitness deficit is caused by the small number of states that escape this re-patterning because they appear to the left of the first bulldozer state. This is a constant number of states, on average, so they create a fitness deficit inversely proportional to the system size, explaining the power law exponent of the Landscaping rule.</p>
<p>Another important property of a patterning strategy is the time required to complete the pattern. To compare the patterning speed of the three 4-state rules of <xref rid="fig5" ref-type="fig">fig. 5</xref>, we analyzed the mean time to reach the steady state pattern, <italic>T</italic><sub><italic>ss</italic></sub>(<italic>L</italic>), as a function of the system size <italic>L</italic>. We estimated <italic>T</italic><sub><italic>ss</italic></sub>(<italic>L</italic>) from simulations, by averaging over different random initial conditions at a fixed <italic>L</italic>. For all three rules, <italic>T</italic><sub><italic>ss</italic></sub>(<italic>L</italic>) scales linearly with <italic>L</italic>, however the rules display different linear scaling coefficients, i.e., different mean patterning speeds. The Bubble rule is fastest, with <italic>T</italic><sub><italic>ss</italic></sub> ≈ 0.74<italic>L</italic>, and the Landscaping rule is slowest, with a linear scaling coefficient of 1.67, while the Mixed rule is in between, with a coefficient of one (<xref rid="fig6S1" ref-type="fig">fig. S1</xref>). These scaling behaviors are also rationalized by the analytical models described above (<xref ref-type="app" rid="app5">Appendix 5</xref>). In a nutshell, the Mixed and Landscaping rules are slower, because they erase parts of the existing pattern before creating the target pattern, while the Bubble rule starts patterning immediately.</p>
<p>Taken together, the increased patterning accuracy of the Landscaping rule comes at the price of a reduced patterning speed. We will next see, in our analysis of robustness and tunability, that this is not the only trade-off between the different patterning strategies.</p>
</sec>
<sec id="s3g">
<title>Robustness of the patterning process</title>
<sec id="s3g1">
<title>Robustness against noise-induced errors</title>
<p>In biological systems, noise is ubiquitous (<bold><italic><xref ref-type="bibr" rid="c39">Tsimring, 2014</xref></italic></bold>) and can be disruptive as well as constructive. More specifically in development, pattern formation can be affected by noise-induced errors in intercellular signal transmission, intracellular information processing, and cellular differentiation. Within the CA modeling framework, we describe such local errors by probabilistic updates, as defined in <xref ref-type="disp-formula" rid="eqn2">Eq. (2)</xref>, where the error probability <italic>p</italic> serves as a measure of the noise level.</p>
<p>The three rules of <xref rid="fig5" ref-type="fig">fig. 5</xref> respond differently to update errors (<xref rid="fig7" ref-type="fig">fig. 7a,b</xref>). When the perfect French flag pattern is used as the initial state, the pattern quickly disintegrates already at small error probabilities <italic>p</italic> under the Landscaping rule (<xref rid="fig7" ref-type="fig">fig. 7a</xref>). The Mixed rule is similarly sensitive to update errors, except for the red stripe, which is maintained better than the blue and white stripes. The Bubble rule is most robust overall to noise-induced update errors. These qualitative observations (<xref rid="fig7" ref-type="fig">fig. 7a</xref>) are consistent with a quantitative analysis of the error-induced shift in the boundary positions within the French Flag pattern (<xref rid="fig7" ref-type="fig">fig. 7b</xref>), which suggests that boundaries created by sorting modules are significantly more robust against update errors than boundaries created by bulldozer modules. The robustness of sorting modules is rationalized by noting that (i) any update error is sorted into the correct stripe, and (ii) the stripe width does not change on average, since a stripe of width <italic>l</italic> widens with a rate proportional to <italic>L</italic> − <italic>l</italic> and decreases width with a rate proportional to 2<italic>l</italic>, resulting in equilibrium lengths of <italic>l</italic> = <italic>L</italic>/3, generalizing a mechanism previously described for a two color pattern (<bold><italic><xref ref-type="bibr" rid="c32">Rohlf and Bornholdt, 2005</xref></italic></bold>). In contrast, bulldozer modules are sensitive to update errors, because erroneously generated bulldozer states re-pattern the system.</p>
<fig id="fig7" position="float" fig-type="figure">
<label>Figure 7.</label>
<caption><p>Robustness of the three patterning strategies of <xref rid="fig5" ref-type="fig">Fig. 5</xref>. (a) Maintenance of the French Flag pattern under noisy updates according to the Mixed, Landscaping, and Bubble rule. (b) Estimated average position of the two boundaries within the tripartite pattern, as a function of the update error probability <italic>p</italic>, for each of the three rules. Each point was calculated as an average over 1000 iterations starting from the French flag pattern, and the boundary position was determined using a sliding window of three cells and a majority rule to associate each cell to the most prevalent state in its window (the boundaries are then set to the first position where cell states change from blue to white, and from white to red). (c) Examples of simultaneous growth and patterning under the Mixed, Landscaping, and Bubble rule, respectively, for two different growth rates (cell division probability per time step). (d) Fitness as a function of final system size for the three rules and additionally a modified version of the Landscaping rule (see main text). The vertical dashed lines mark the system sizes beyond which the average time of pattern formation (fig. S1) is expected to exceed the time required to reach a growth speed of one cell per time step. (e) Fitness as a function of the probability of asynchrony <italic>p</italic><sub><italic>A</italic></sub> for the same four rules. (f) Examples of the patterning dynamics at a probability of asynchrony <italic>p</italic><sub><italic>A</italic></sub> = 0.1 in a system of size <italic>L</italic> = 34.</p></caption>
<graphic xlink:href="573602v1_fig7.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
</sec>
<sec id="s3g2">
<title>Robustness of patterning with simultaneous growth</title>
<p>Growth via cell divisions is an integral part of many pattern formation processes in developmental biology. We therefore asked to what extent the three patterning strategies of <xref rid="fig5" ref-type="fig">fig. 5</xref> function also in the presence of cell division. To address this question, we introduced a probability <italic>p</italic><sub><italic>divide</italic></sub> per time step for cells to perform a symmetric division that conserves the internal state (see ‘Model and Methods’). This homogeneous cell division process causes the system to grow exponentially in size over time, during the patterning process (<xref rid="fig7" ref-type="fig">fig. 7c</xref>). While exponential growth is not sustainable and real developmental systems limit growth by additional regulation, our simple model suffices to explore how growth generally interferes with the different patterning strategies.</p>
<p>For small cell division rates, all three strategies successfully form French Flag patterns (<xref rid="fig7" ref-type="fig">fig. 7c</xref>, left), albeit with stripe widths that are more variable than without growth (<xref rid="fig5" ref-type="fig">fig. 5</xref>). This increased variability is to be expected, given the positive feedback that growth exerts on stripe width (a wide stripe extends with a larger instantaneous speed than a narrow stripe). When the cell division rate is increased, patterning following the Landscaping rule is most affected by the interference with growth (<xref rid="fig7" ref-type="fig">fig. 7c</xref>, right). In part, this is due to the creation of new bulldozer states induced by the symmetric cell divisions (<xref rid="fig7S4" ref-type="fig">fig. S4a,b</xref> and <xref rid="fig7S3" ref-type="fig">fig. S3a,b</xref>). The rule can be mutated to eliminate this bulldozer creation process, without affecting the underlying patterning strategy (<xref rid="fig7S1" ref-type="fig">fig. S1</xref>, <xref rid="fig7S3" ref-type="fig">fig. S3c,d</xref>).</p>
<p>A second interfering effect of growth on patterning sets in roughly when the instantaneous growth speed exceeds the speed of the patterning process before the final pattern is reached. Since the different rules have different patterning speeds (see above), this occurs first for the Landscaping rule, then for the Mixed rule, and ultimately also for the Bubble rule, as seen in a rapid drop of the average fitness as a function of the cell division rate (<xref rid="fig7" ref-type="fig">fig. 7d</xref>). This appears to be a universal limit for any patterning strategy based purely on local signaling, without additional feedback from patterning onto growth.</p>
</sec>
<sec id="s3g3">
<title>Robustness against asynchronous updates</title>
<p>While there is ample evidence from different organisms that neighboring cells can maintain synchronously varying gene expression levels (<bold><italic><xref ref-type="bibr" rid="c25">Liao and Oates, 2017</xref></italic></bold>), synchronization will never be perfect, such that the robustness of patterning strategies against asynchronous updates is a pertinent question. To be able to explore the behavior of the three patterning strategies of <xref rid="fig5" ref-type="fig">fig. 5</xref> for different degrees of synchronicity, we introduced the probability <italic>p</italic><sub><italic>A</italic></sub> for each cell update to be asynchronous (see ‘Model and Methods’), such that <italic>p</italic><sub><italic>A</italic></sub> = 0 corresponds to the perfectly synchronous updates considered so far, and <italic>p</italic><sub><italic>A</italic></sub> = 1 to entirely asynchronous updates.</p>
<p>Although the final tripartite pattern is stable also under asynchronous updates, the process of forming the pattern can be disturbed: For all three patterning strategies, the average fitness decreases with increasing <italic>p</italic><sub><italic>A</italic></sub> (<xref rid="fig7" ref-type="fig">fig. 7e</xref>), since the asynchronous updates can significantly distort the relative width of the formed stripes (<xref rid="fig7" ref-type="fig">fig. 7f</xref>). On average, the Landscaping rule is most strongly affected, while the Bubble and Mixed rules perform similarly (<xref rid="fig7" ref-type="fig">fig. 7e</xref>). The same mutation of the Landscaping rule that improved its robustness of patterning with simultaneous growth, also improves its robustness against asynchronous updates (<xref rid="fig7" ref-type="fig">fig. 7e</xref>). However, even with this mutation the observed general trade-off remains: The Landscaping strategy displays the highest patterning accuracy under perfect conditions, but is sensitive to perturbation by asynchronous updates.</p>
</sec>
</sec>
<sec id="s3h">
<title>Tunability of the patterning process</title>
<p>Another relevant set of questions about the patterning strategies of <xref rid="fig5" ref-type="fig">fig. 5</xref> concerns their generality: Can the same underlying strategies also be used to form other axial patterns? How can the quantitative characteristics of a pattern be tuned? And to what extent is the patterning process controlled by the initial conditions or by the update rule, respectively?</p>
<p>As initial conditions we assumed random initial states so far, but another natural choice, inspired by developmental biology, is to assume an “undifferentiated” initial cell state (black) for all cells within the system (i.e., not on the boundary). During the pattern formation process, their cell fate is then ultimately determined to be one of the differentiated states, i.e., blue, white, or red for the French flag pattern. Since the Landscaping rule of <xref rid="fig5" ref-type="fig">fig. 5</xref> implements an erase-and-reconstruct patterning strategy, it should be able to form the French Flag pattern starting from any initial condition, and thus also from the homogeneous undifferentiated pattern. This is indeed the case (<xref rid="fig8" ref-type="fig">fig. 8a</xref>). However, other strategies are also available, as revealed by an evolutionary search (<xref rid="fig8" ref-type="fig">fig. 8b,c</xref>). For this evolutionary search in 4-state rule space, we adapted the method of <xref rid="fig2" ref-type="fig">fig. 2a</xref> by inserting only random rules that satisfy the steady-state conditions of <xref rid="fig3" ref-type="fig">fig. 3c</xref>. Note also that the evolutionary search with a homogeneous initial pattern is significantly faster than with random initial patterns, since the average over different initial conditions is not required for the fitness calculation.</p>
<fig id="fig8" position="float" fig-type="figure">
<label>Figure 8.</label>
<caption><p>Undifferentiated initial condition. Here, the black state is used as an undifferentiated state, in which all cells within the system are initialized (except for the fixed boundaries). (a) The Landscaping rule solves the French flag problem also for this initial condition. (b, c) An evolutionary search yields a different patterning strategy of two fronts starting from the boundaries and moving inward at speeds of 1 and 1/2 cells per time step, respectively, with the faster front emerging either form the left (b) or the right (c).</p></caption>
<graphic xlink:href="573602v1_fig8.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
<p>Both shown examples (<xref rid="fig8" ref-type="fig">fig. 8b,c</xref>) use two patterning fronts that propagate from the boundaries inward. The two fronts move at different speeds, with a 2:1 ratio, and arrest when they collide. The collision point thus either lies at one third of the system size (<xref rid="fig8" ref-type="fig">fig. 8c</xref>) or at two thirds (<xref rid="fig8" ref-type="fig">fig. 8b</xref>). The slower front generates one stripe, while the faster front generates two stripes in its wake, such that the tripartite pattern ultimately emerges with approximately equal stripe widths. Stripe formation behind the faster front involves a sorting process in both examples, but the detailed characteristics of this process are visibly different (<xref rid="fig8" ref-type="fig">fig. 8b,c</xref>).</p>
<p>How can the relative widths of the stripes in the French flag pattern be tuned? To explore this question, we first performed an evolutionary search in 3-state rule space for rules that form the pattern with a stripe width ratio of 1:2:1 starting from uniformly distributed random initial conditions. This revealed a consensus rule that achieves the targeted ratio well for larger systems (<xref rid="fig9" ref-type="fig">fig. 9a,b</xref>). This rule uses the relevant entries of a sorting module for red and white cells, while the bulldozer module is changed. The primary effect of this change is revealed by initializing the pattern formation process with isolated blue states in an all-white region (<xref rid="fig9" ref-type="fig">fig. 9c</xref>): single blue cells travel from right to left, producing white and red cells in a 2:1 ratio in their wake. We also performed an evolutionary search for 3-state rules achieving other target ratios, 2:1:1 and 3:1:1, for the stripe width fig. S1, which suggests that simple integer stripe width ratios are attainable with similar mechanisms. However, it seems clear that the stripe widths cannot be continuously tuned in this way.</p>
<fig id="fig9" position="float" fig-type="figure">
<label>Figure 9.</label>
<caption><p>Tunability of the patterning process. (a-c) An evolutionary search for rules that form a French Flag pattern with a stripe width ratio of 1:2:1 from random initial conditions identified a rule (genotype 201 220 122 202 110 112 201 110 000), which (a) achieves this target ratio increasingly well for larger system sizes (dots show the average proportion of each state, dashed lines the aimed ratios, and solid lines the average value from <italic>L</italic> = 901 to <italic>L</italic> = 1000). (b) The patterning behavior of this rule is similar to that of the consensus rule, however (c) the bulldozer state (blue) produces white and red cells in a 2:1 ratio in its wake, as it travels from right to left (shown here using an initial condition with only two isolated blue cells in a white background). (d-e) Mutations of the Bubble rule can tune the resulting stripe widths in fine-grained steps, for instance to (d) increase the width of the blue stripe, in (e) 24 mutations that gradually increase the production of blue states from black states. (f-i) Generalization of the mixed and landscaping strategies to form axial patterns with more than three stripes, as illustrated here using either 5 or 10 states.</p></caption>
<graphic xlink:href="573602v1_fig9.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
<p>For continuous tuning of the relative stripe widths, we turn to the 4-state Bubble rule of <xref rid="fig5" ref-type="fig">fig. 5</xref>. A possible way to control the relative width of the stripes for a pure sorting strategy is to control the statistics of cell states in the initial pattern. Indeed, for initial patterns without black states, the Bubble rule conserves the number of blue, white and red states (fig. S2), such that any intracellular mechanism creating a bias in the initial cell state choice will permit the formation of arbitrary relative stripe widths. If black states are included in the initial condition, they are converted to blue, white, or red states by the Bubble rule. Since the resolution module fixes only a fraction of rule entries out of all entries involving a black state (<xref rid="fig4" ref-type="fig">fig. 4</xref>), the remaining entries can be modified to bias the creation of certain cell states. This allows to tune the resulting stripe widths in fine-grained steps, for instance to increase the width of the blue stripe (<xref rid="fig9" ref-type="fig">fig. 9d,e</xref>), or to increase the width of the white or red stripes (<xref rid="fig8S3" ref-type="fig">fig. S3</xref>).</p>
<p>Finally, we considered target patterns with a larger number of stripes. While the patterning strategy underlying the Bubble rule could, in principle, be generalized to more states, and thus more stripes, this would require a number of additional transient states for resolution modules of the type shown in <xref rid="fig4" ref-type="fig">fig. 4</xref>. The generalization of the patterning strategies underlying the Mixed rule and the Landscaping rule is more straightforward, without a growing “overhead” of additional transient states. Utilizing the state of the last stripe (Mixed) or an additional state (Landscaping) as Bulldozer module and sorting the seeded states with pairwise Sorting modules, generalizations of the Mixed and the Landscaping rule are indeed able to form axial patterns with larger numbers of stripes (<xref rid="fig9" ref-type="fig">fig. 9f-i</xref>).</p>
</sec>
</sec>
<sec id="s4">
<title>Discussion</title>
<p>We revisited Wolpert’s French flag problem (<bold><italic><xref ref-type="bibr" rid="c47">Wolpert, 1968</xref></italic></bold>) to identify alternative axial patterning strategies, which do not require long-range signaling, but are strictly based on local, nearest-neighbor interactions. Local patterning strategies can function even when the transport of signaling molecules, for instance via diffusion, is restricted or too slow for effective long-range signaling (<bold><italic><xref ref-type="bibr" rid="c18">Dickmann et al., 2022</xref></italic></bold>). To describe such strategies, we used cellular automata as a minimal modeling framework that allows to enumerate all possible update rules for the patterning dynamics, and thus all patterning strategies, for a given number of internal cell states (<xref rid="fig1" ref-type="fig">fig. 1</xref>). As in the original French flag problem, the modeling framework considers cells that do not move, but maintain their relative arrangement. However, when we searched the model space with an evolutionary algorithm (<xref rid="fig2" ref-type="fig">fig. 2a</xref>), one component of successful patterning strategies turned out to be a functional module that effectively implements sorting of cell states (<xref rid="fig3" ref-type="fig">fig. 3d</xref>). Rather than physical sorting of cells via differential adhesion (<bold><italic><xref ref-type="bibr" rid="c36">Steinberg, 2007</xref></italic></bold>), this module sorts the information contained in the cell states, which in biological cells is reflected by their gene expression patterns. This informational sorting is implemented via local cell-cell communication according to the signaling logic specified by the entries of the cellular automaton update rule (<xref rid="fig3" ref-type="fig">fig. 3d</xref>).</p>
<p>The pattern formation process can either make use of the initial cell states, or ignore them completely by erasing the initial pattern with a propagating front that generates the intended pattern in its wake (<xref rid="fig5" ref-type="fig">fig. 5</xref>). This latter “Landscaping” mode of patterning is thus suitable also when all interior cells of the system are initially in the same undifferentiated state. Patterning can then start from either boundary of the axial system, or from both boundaries simultaneously (<xref rid="fig8" ref-type="fig">fig. 8</xref>). However, in a system without global signaling, it is not clear how two patterning waves could be triggered simultaneously from different ends of the system. In contrast, local synchronization of cells, as assumed by the cellular automata modeling framework, is attainable with local interactions (<bold><italic><xref ref-type="bibr" rid="c42">Uriu et al., 2021</xref></italic></bold>). Additionally, we found that the patterning strategies do not immediately become dysfunctional with a small degree of asynchronicity (<xref rid="fig7" ref-type="fig">fig. 7e</xref>). It is also important to note that in order for the patterning strategies discussed here to be viable, cells need to be able to differentiate between left and right neighbors in their signal detection and processing, which requires cell polarization. Although we have limited our analysis to one-dimensional models here, extending the analysis of axial patterning in two- or three-dimensional systems would not pose conceptual challenges. Additional lateral signaling in two- or three-dimensional systems could also be leveraged to increase the robustness of the patterning process to noise, via a positive reinforcement or majority voting scheme (<bold><italic><xref ref-type="bibr" rid="c30">Ramalho et al., 2021</xref></italic></bold>).</p>
<p>A valuable tool in our analysis of patterning strategies has been the multiple alignment and consensus procedure (<xref rid="fig2" ref-type="fig">fig. 2b</xref>), which is enabled by the discrete nature of cellular automata models. This procedure leads to sequence logos and the identification of relevant entries within update rules (<xref rid="fig3" ref-type="fig">fig. 3a,b</xref>), and helped us to discover the two basic patterning modules that form the core of the patterning strategies analyzed here: A sorting module that generates patterns by segregating two states away from each other, and a bulldozer module that generates a patterning wave (<xref rid="fig3" ref-type="fig">fig. 3d</xref>). We then analyzed the trade-offs between the different patterning strategies: erasing and recreating a pattern from scratch is more accurate (<xref rid="fig6" ref-type="fig">fig. 6</xref>), but sorting the initial condition is faster (<xref rid="fig6S1" ref-type="fig">fig. S1</xref>) and more robust to noise and growth (<xref rid="fig7" ref-type="fig">fig. 7</xref>). Additionally, sorting is more plastic in the sense that stripe widths can be easily tuned by either biasing the initial condition or mutating a few entries of the rule itself (<xref rid="fig9" ref-type="fig">fig. 9</xref>). This is analogous to changing the stripe width in Wolpert’s morphogen mechanism by altering the threshold concentrations for cell differentiation.</p>
<p>Systematic searches for mechanisms for the robust and tunable formation of different patterns, potentially in several spatial dimensions, remains an interesting challenge for the future. Our approach of using evolutionary searches and a multiple sequence alignment procedure to identify functional signaling logics may prove fruitful in this direction, although enlarging the potential rule space might entail the need to employ more complex evolutionary search algorithms ensuring a large solution diversity (<bold><italic><xref ref-type="bibr" rid="c15">Cully and Demiris, 2018</xref></italic></bold>).</p>
</sec>
</body>
<back>
<ack>
<title>Acknowledgments</title>
<p>We are grateful to members of the Gerland group and Thiago T. Varella for helpful discussions. G.V. would like to thank the Streicker International Fellows Program for the generous support through the Streicker Fellowship. This work was funded by the Deutsche Forschungsgemeinschaft (DFG, German Research Foundation) – Project-ID 201269156 – SFB 1032 and under Germany’
ss Excellence Strategy – EXC 2094 – 390783311 through U.G.</p>
</ack>
<ref-list>
<title>References</title>
<ref id="c1"><mixed-citation publication-type="journal"><string-name><surname>Adhyapok</surname> <given-names>P</given-names></string-name>, <string-name><surname>Fu</surname> <given-names>X</given-names></string-name>, <string-name><surname>Sluka</surname> <given-names>JP</given-names></string-name>, <string-name><surname>Clendenon</surname> <given-names>SG</given-names></string-name>, <string-name><surname>Sluka</surname> <given-names>VD</given-names></string-name>, <string-name><surname>Wang</surname> <given-names>Z</given-names></string-name>, <string-name><surname>Dunn</surname> <given-names>K</given-names></string-name>, <string-name><surname>Klaunig</surname> <given-names>JE</given-names></string-name>, <string-name><surname>Glazier</surname> <given-names>JA</given-names></string-name>. <article-title>A computational model of liver tissue damage and repair</article-title>. <source>PLoS One</source>. <year>2020</year>; <volume>15</volume>(<issue>12</issue>):<fpage>e0243451</fpage>. doi: <pub-id pub-id-type="doi">10.1371/journal.pone.0243451</pub-id>.</mixed-citation></ref>
<ref id="c2"><mixed-citation publication-type="journal"><string-name><surname>Afek</surname> <given-names>Y</given-names></string-name>, <string-name><surname>Alon</surname> <given-names>N</given-names></string-name>, <string-name><surname>Barad</surname> <given-names>O</given-names></string-name>, <string-name><surname>Hornstein</surname> <given-names>E</given-names></string-name>, <string-name><surname>Barkai</surname> <given-names>N</given-names></string-name>, <string-name><surname>Bar-Joseph</surname> <given-names>Z.</given-names></string-name> <article-title>A biological solution to a fundamental distributed computing problem</article-title>. <source>Science</source>. <year>2011</year>; <volume>331</volume>(<issue>6014</issue>):<fpage>183</fpage>–<lpage>185</lpage>. doi: <pub-id pub-id-type="doi">10.1126/science.1193210</pub-id>.</mixed-citation></ref>
<ref id="c3"><mixed-citation publication-type="journal"><string-name><surname>Akberdin</surname> <given-names>IR</given-names></string-name>, <string-name><surname>Ozonov</surname> <given-names>EA</given-names></string-name>, <string-name><surname>Mironova</surname> <given-names>VV</given-names></string-name>, <string-name><surname>Omelyanchuk</surname> <given-names>NA</given-names></string-name>, <string-name><surname>Likhoshvai</surname> <given-names>VA</given-names></string-name>, <string-name><surname>Gorpinchenko</surname> <given-names>DN</given-names></string-name>, <string-name><surname>Kolchanov</surname> <given-names>NA</given-names></string-name>. <article-title>A cellular automaton to model the development of primary shoot meristems of Arabidopsis thaliana</article-title>. <source>J Bioinform Comput Biol</source>. <year>2007</year>; <volume>5</volume>(<issue>2B</issue>):<fpage>641</fpage>–<lpage>650</lpage>. doi: <pub-id pub-id-type="doi">10.1142/S0219720007002862</pub-id>.</mixed-citation></ref>
<ref id="c4"><mixed-citation publication-type="book"><string-name><surname>Ancona</surname> <given-names>B</given-names></string-name>, <string-name><surname>Bajwa</surname> <given-names>A</given-names></string-name>, <string-name><surname>Lynch</surname> <given-names>N</given-names></string-name>, <string-name><given-names>Mallmann-Trenn</given-names> <surname>Frederik</surname></string-name>. <chapter-title>How to Color a French Flag: Biologically Inspired Algorithms for Scale-Invariant Patterning</chapter-title>. In: <person-group person-group-type="editor"><string-name><surname>Censor-Hillel</surname> <given-names>K</given-names></string-name>, <string-name><surname>Flammini</surname> <given-names>M</given-names></string-name>, editors</person-group>. <source>Structural Information and Communication Complexity</source> <publisher-loc>Cham</publisher-loc>: <publisher-name>Springer International Publishing</publisher-name>; <year>2019</year>. p. <fpage>327</fpage>–<lpage>331</lpage>. doi: <pub-id pub-id-type="doi">10.1007/978-3-030-24922-9_22</pub-id>.</mixed-citation></ref>
<ref id="c5"><mixed-citation publication-type="journal"><string-name><surname>Andersson</surname> <given-names>ER</given-names></string-name>, <string-name><surname>Sandberg</surname> <given-names>R</given-names></string-name>, <string-name><surname>Lendahl</surname> <given-names>U.</given-names></string-name> <article-title>Notch signaling: simplicity in design, versatility in function</article-title>. <source>Development</source>. <year>2011</year>; <volume>138</volume>(<issue>17</issue>):<fpage>3593</fpage>–<lpage>3612</lpage>. doi: <pub-id pub-id-type="doi">10.1242/dev.063610</pub-id>.</mixed-citation></ref>
<ref id="c6"><mixed-citation publication-type="other"><string-name><surname>Bailey</surname> <given-names>TL</given-names></string-name>. <article-title>Discovering Sequence Motifs</article-title>. In: <person-group person-group-type="editor"><string-name><surname>Keith</surname> <given-names>JM</given-names></string-name>, editor</person-group>. <source>Bioinformatics Volume I Humana Press</source>; <year>2008</year>. p. <fpage>231</fpage>–<lpage>251</lpage>.</mixed-citation></ref>
<ref id="c7"><mixed-citation publication-type="journal"><string-name><surname>Basanta</surname> <given-names>D</given-names></string-name>, <string-name><surname>Miodownik</surname> <given-names>M</given-names></string-name>, <string-name><surname>Baum</surname> <given-names>B.</given-names></string-name> <article-title>The evolution of robust development and homeostasis in artificial organisms</article-title>. <source>PLoS Comput Biol</source>. <year>2008</year>; <volume>4</volume>(<issue>3</issue>):<fpage>e1000030</fpage>. doi: <pub-id pub-id-type="doi">10.1371/journal.pcbi.1000030</pub-id>.</mixed-citation></ref>
<ref id="c8"><mixed-citation publication-type="journal"><string-name><surname>Ben-Zvi</surname> <given-names>D</given-names></string-name>, <string-name><surname>Shilo</surname> <given-names>BZ</given-names></string-name>, <string-name><surname>Barkai</surname> <given-names>N.</given-names></string-name> <article-title>Scaling of morphogen gradients</article-title>. <source>Curr Opin Genet Dev</source>. <year>2011</year>; <volume>21</volume>(<issue>6</issue>):<fpage>704</fpage>–<lpage>710</lpage>. doi: <pub-id pub-id-type="doi">10.1016/j.gde.2011.07.011</pub-id>.</mixed-citation></ref>
<ref id="c9"><mixed-citation publication-type="journal"><string-name><surname>Berg</surname> <given-names>J</given-names></string-name>, <string-name><surname>Lässig</surname> <given-names>M.</given-names></string-name> <article-title>Local graph alignment and motif search in biological networks</article-title>. <source>PNAS</source>. <year>2004</year>; <volume>101</volume>(<issue>41</issue>):<fpage>14689</fpage>–<lpage>14694</lpage>. doi: <pub-id pub-id-type="doi">10.1073/pnas.0305199101</pub-id>.</mixed-citation></ref>
<ref id="c10"><mixed-citation publication-type="journal"><string-name><surname>Blyth</surname> <given-names>CR</given-names></string-name>. <article-title>Expected absolute error of the usual estimator of the binomial parameter</article-title>. <source>Am Stat</source>. <year>1980</year>; <volume>34</volume>(<issue>3</issue>):<fpage>155</fpage>–<lpage>157</lpage>.</mixed-citation></ref>
<ref id="c11"><mixed-citation publication-type="other"><string-name><surname>Bocci</surname> <given-names>F</given-names></string-name>, <string-name><surname>Onuchic</surname> <given-names>JN</given-names></string-name>, <string-name><surname>Jolly</surname> <given-names>MK</given-names></string-name>. <article-title>Understanding the principles of pattern formation driven by Notch signaling by integrating experiments and theoretical models</article-title>. <source>Front Physiol</source>. <year>2020</year>; <volume>11</volume>. doi: <pub-id pub-id-type="doi">10.3389/fphys.2020.00929</pub-id>.</mixed-citation></ref>
<ref id="c12"><mixed-citation publication-type="journal"><string-name><surname>Bojer</surname> <given-names>M</given-names></string-name>, <string-name><surname>Kremser</surname> <given-names>S</given-names></string-name>, <string-name><surname>Gerland</surname> <given-names>U.</given-names></string-name> <article-title>Robust boundary formation in a morphogen gradient via cell-cell signaling</article-title>. <source>Phys Rev E</source>. <year>2022</year>; <volume>105</volume>(<issue>6</issue>). doi: <pub-id pub-id-type="doi">10.1103/PhysRevE.105.064405</pub-id>.</mixed-citation></ref>
<ref id="c13"><mixed-citation publication-type="journal"><string-name><surname>Bray</surname> <given-names>SJ</given-names></string-name>. <article-title>Notch signalling: a simple pathway becomes complex</article-title>. <source>Nat Rev Mol Cell Biol</source>. <year>2006</year>; <volume>7</volume>(<issue>9</issue>):<fpage>678</fpage>–<lpage>689</lpage>. doi: <pub-id pub-id-type="doi">10.1038/nrm2009</pub-id>.</mixed-citation></ref>
<ref id="c14"><mixed-citation publication-type="journal"><string-name><surname>Conway</surname> <given-names>J.</given-names></string-name> <article-title>Mathematical games (M. Gardner, Ed</article-title>.). <source>Sc Am</source>. <year>1970</year>; <volume>223</volume>(<issue>4</issue>).</mixed-citation></ref>
<ref id="c15"><mixed-citation publication-type="journal"><string-name><surname>Cully</surname> <given-names>A</given-names></string-name>, <string-name><surname>Demiris</surname> <given-names>Y.</given-names></string-name> <article-title>Quality and Diversity Optimization: A Unifying Modular Framework</article-title>. <source>IEEE Trans Evol Comput</source>. <year>2018</year>; <volume>22</volume>(<issue>2</issue>):<fpage>245</fpage>–<lpage>259</lpage>. doi: <pub-id pub-id-type="doi">10.1109/TEVC.2017.2704781</pub-id>.</mixed-citation></ref>
<ref id="c16"><mixed-citation publication-type="book"><string-name><surname>Deutsch</surname> <given-names>A</given-names></string-name>, <string-name><surname>Dormann</surname> <given-names>S.</given-names></string-name> <chapter-title>Cellular Automaton Modeling of Biological Pattern Formation: Characterization, Applications, and Analysis</chapter-title>. <source>Modeling and Simulation in Science, Engineering and Technology</source>, <publisher-loc>Boston, MA</publisher-loc>: <publisher-name>Birkhäuser Boston</publisher-name>; <year>2005</year>. doi: <pub-id pub-id-type="doi">10.1007/b138451</pub-id>.</mixed-citation></ref>
<ref id="c17"><mixed-citation publication-type="journal"><string-name><surname>Diaconis</surname> <given-names>P</given-names></string-name>, <string-name><surname>Zabell</surname> <given-names>S.</given-names></string-name> <article-title>Closed Form Summation for Classical Distributions: Variations on a Theme of De Moivre</article-title>. <source>Stat Sci</source>. <year>1991</year>; <volume>6</volume>(<issue>3</issue>):<fpage>284</fpage>–<lpage>302</lpage>. doi: <pub-id pub-id-type="doi">10.2307/2683873</pub-id>.</mixed-citation></ref>
<ref id="c18"><mixed-citation publication-type="journal"><string-name><surname>Dickmann</surname> <given-names>JE</given-names></string-name>, <string-name><surname>Rink</surname> <given-names>JC</given-names></string-name>, <string-name><surname>Jülicher</surname> <given-names>F.</given-names></string-name> <article-title>Long-range morphogen gradient formation by cell-to-cell signal propagation</article-title>. <source>Phys Biol</source>. <year>2022</year>; <volume>19</volume>(<issue>6</issue>):<fpage>066001</fpage>.</mixed-citation></ref>
<ref id="c19"><mixed-citation publication-type="journal"><string-name><surname>Dupin</surname> <given-names>A</given-names></string-name>, <string-name><surname>Simmel</surname> <given-names>FC</given-names></string-name>. <article-title>Signalling and differentiation in emulsion-based multi-compartmentalized in vitro gene circuits</article-title>. <source>Nat Chem</source>. <year>2019</year>; <volume>11</volume>(<issue>1</issue>):<fpage>32</fpage>–<lpage>39</lpage>. doi: <pub-id pub-id-type="doi">10.1038/s41557-018-0174-9</pub-id>.</mixed-citation></ref>
<ref id="c20"><mixed-citation publication-type="journal"><string-name><surname>Ehebauer</surname> <given-names>M</given-names></string-name>, <string-name><surname>Hayward</surname> <given-names>P</given-names></string-name>, <string-name><surname>Martinez-Arias</surname> <given-names>A.</given-names></string-name> <article-title>Notch signaling pathway</article-title>. <source>Sci STKE</source>. <year>2006</year>; <volume>2006</volume>(<issue>364</issue>):<fpage>cm7</fpage>–<lpage>cm7</lpage>. doi: <pub-id pub-id-type="doi">10.1126/stke.3642006cm7</pub-id>.</mixed-citation></ref>
<ref id="c21"><mixed-citation publication-type="journal"><string-name><surname>Herman</surname> <given-names>GT</given-names></string-name>, <string-name><surname>Liu</surname> <given-names>WH</given-names></string-name>. <article-title>The daughter of Celia, the French flag, and the firing squad</article-title>. <source>Simulation</source>. <year>1973</year>; <volume>21</volume>(<issue>2</issue>):<fpage>33</fpage>–<lpage>41</lpage>. doi: <pub-id pub-id-type="doi">10.1177/003754977302100203</pub-id>.</mixed-citation></ref>
<ref id="c22"><mixed-citation publication-type="journal"><string-name><surname>Ishihara</surname> <given-names>S</given-names></string-name>, <string-name><surname>Kaneko</surname> <given-names>K.</given-names></string-name> <article-title>Turing pattern with proportion preservation</article-title>. <source>J Theor Biol</source>. <year>2006</year>; <volume>238</volume>(<issue>3</issue>):<fpage>683</fpage>–<lpage>693</lpage>. doi: <pub-id pub-id-type="doi">10.1016/j.jtbi.2005.06.016</pub-id>.</mixed-citation></ref>
<ref id="c23"><mixed-citation publication-type="journal"><string-name><surname>Klein</surname> <given-names>R.</given-names></string-name> <article-title>Eph/ephrin signalling during development</article-title>. <source>Development</source>. <year>2012</year>; <volume>139</volume>(<issue>22</issue>):<fpage>4105</fpage>–<lpage>4109</lpage>. doi: <pub-id pub-id-type="doi">10.1242/dev.074997</pub-id>.</mixed-citation></ref>
<ref id="c24"><mixed-citation publication-type="other"><string-name><surname>Knuth</surname> <given-names>DE</given-names></string-name>. <source>Sorting and searching, vol. 3 of The art of computer programming. Second edition, forty-second printing ed. Boston: Addison-Wesley</source>; <year>1998</year>.</mixed-citation></ref>
<ref id="c25"><mixed-citation publication-type="journal"><string-name><surname>Liao</surname> <given-names>BK</given-names></string-name>, <string-name><surname>Oates</surname> <given-names>AC</given-names></string-name>. <article-title>Delta-Notch signalling in segmentation</article-title>. <source>Arthropod structure &amp; development</source>. <year>2017</year>; <volume>46</volume>(<issue>3</issue>):<fpage>429</fpage>–<lpage>447</lpage>. doi: <pub-id pub-id-type="doi">10.1016/j.asd.2016.11.007</pub-id>.</mixed-citation></ref>
<ref id="c26"><mixed-citation publication-type="journal"><string-name><surname>Logan</surname> <given-names>CY</given-names></string-name>, <string-name><surname>Nusse</surname> <given-names>R.</given-names></string-name> <article-title>The Wnt signaling pathway in development and disease</article-title>. <source>Annu Rev Cell Dev Biol</source>. <year>2004</year>; <volume>20</volume>:<fpage>781</fpage>–<lpage>810</lpage>. doi: <pub-id pub-id-type="doi">10.1146/annurev.cellbio.20.010403.113126</pub-id>.</mixed-citation></ref>
<ref id="c27"><mixed-citation publication-type="journal"><string-name><surname>Manukyan</surname> <given-names>L</given-names></string-name>, <string-name><surname>Montandon</surname> <given-names>SA</given-names></string-name>, <string-name><surname>Fofonjka</surname> <given-names>A</given-names></string-name>, <string-name><surname>Smirnov</surname> <given-names>S</given-names></string-name>, <string-name><surname>Milinkovitch</surname> <given-names>MC</given-names></string-name>. <article-title>A living mesoscopic cellular automaton made of skin scales</article-title>. <source>Nature</source>. <year>2017</year>; <volume>544</volume>(<issue>7649</issue>):<fpage>173</fpage>–<lpage>179</lpage>. doi: <pub-id pub-id-type="doi">10.1038/nature22031</pub-id>.</mixed-citation></ref>
<ref id="c28"><mixed-citation publication-type="other"><string-name><surname>Neumann</surname> <given-names>J</given-names></string-name>, <string-name><surname>Burks</surname> <given-names>AW</given-names></string-name>, <etal>et al.</etal> <article-title>Theory of self-reproducing automata. University of Illinois press Urbana</article-title>; <year>1966</year>.</mixed-citation></ref>
<ref id="c29"><mixed-citation publication-type="journal"><string-name><surname>Nichele</surname> <given-names>S</given-names></string-name>, <string-name><surname>Ose</surname> <given-names>MB</given-names></string-name>, <string-name><surname>Risi</surname> <given-names>S</given-names></string-name>, <string-name><surname>Tufte</surname> <given-names>G.</given-names></string-name> <article-title>CA-NEAT: evolved compositional pattern producing networks for cellular automata morphogenesis and replication</article-title>. <source>IEEE Trans Cogn Dev Syst</source>. <year>2017</year>; <volume>10</volume>(<issue>3</issue>):<fpage>687</fpage>–<lpage>700</lpage>.</mixed-citation></ref>
<ref id="c30"><mixed-citation publication-type="journal"><string-name><surname>Ramalho</surname> <given-names>T</given-names></string-name>, <string-name><surname>Kremser</surname> <given-names>S</given-names></string-name>, <string-name><surname>Wu</surname> <given-names>H</given-names></string-name>, <string-name><surname>Gerland</surname> <given-names>U.</given-names></string-name> <article-title>Programmable pattern formation in cellular systems with local signaling</article-title>. <source>Commun Phys</source>. <year>2021</year>; <volume>4</volume>(<issue>1</issue>):<fpage>8605</fpage>. doi: <pub-id pub-id-type="doi">10.1038/s42005-021-00639-8</pub-id>.</mixed-citation></ref>
<ref id="c31"><mixed-citation publication-type="journal"><string-name><surname>Rao</surname> <given-names>A</given-names></string-name>, <string-name><surname>Barkley</surname> <given-names>D</given-names></string-name>, <string-name><surname>França</surname> <given-names>GS</given-names></string-name>, <string-name><surname>Yanai</surname> <given-names>I.</given-names></string-name> <article-title>Exploring tissue architecture using spatial transcriptomics</article-title>. <source>Nature</source>. <year>2021</year>; <volume>596</volume>(<issue>7871</issue>):<fpage>211</fpage>–<lpage>220</lpage>. doi: <pub-id pub-id-type="doi">10.1038/s41586-021-03634-9</pub-id>.</mixed-citation></ref>
<ref id="c32"><mixed-citation publication-type="journal"><string-name><surname>Rohlf</surname> <given-names>T</given-names></string-name>, <string-name><surname>Bornholdt</surname> <given-names>S.</given-names></string-name> <article-title>Self-organized pattern formation and noise-induced control based on particle computations</article-title>. <source>J Stat Mech: Theory Exp</source>. <year>2005</year>; <volume>2005</volume>(<issue>12</issue>):<fpage>L12001</fpage>–<lpage>L12001</lpage>. doi: <pub-id pub-id-type="doi">10.1088/1742-5468/2005/12/L12001</pub-id>.</mixed-citation></ref>
<ref id="c33"><mixed-citation publication-type="journal"><string-name><surname>Rohlf</surname> <given-names>T</given-names></string-name>, <string-name><surname>Bornholdt</surname> <given-names>S.</given-names></string-name> <article-title>Morphogenesis by coupled regulatory networks: Reliable control of positional information and proportion regulation</article-title>. <source>J Theor Biol</source>. <year>2009</year>; <volume>261</volume>(<issue>2</issue>):<fpage>176</fpage>–<lpage>193</lpage>. doi: <pub-id pub-id-type="doi">10.1016/j.jtbi.2009.07.023</pub-id>.</mixed-citation></ref>
<ref id="c34"><mixed-citation publication-type="journal"><string-name><surname>Sharpe</surname> <given-names>J.</given-names></string-name> <article-title>Wolpert’s French Flag: what’s the problem?</article-title> <source>Development</source>. <year>2019</year>; <volume>146</volume>(<issue>24</issue>). doi: <pub-id pub-id-type="doi">10.1242/dev.185967</pub-id>.</mixed-citation></ref>
<ref id="c35"><mixed-citation publication-type="journal"><string-name><surname>Sjöqvist</surname> <given-names>M</given-names></string-name>, <string-name><surname>Andersson</surname> <given-names>ER</given-names></string-name>. <article-title>Do as I say, Not(ch) as I do: Lateral control of cell fate</article-title>. <source>Dev Biol</source>. <year>2019</year>; <volume>447</volume>(<issue>1</issue>):<fpage>58</fpage>–<lpage>70</lpage>. doi: <pub-id pub-id-type="doi">10.1016/j.ydbio.2017.09.032</pub-id>.</mixed-citation></ref>
<ref id="c36"><mixed-citation publication-type="journal"><string-name><surname>Steinberg</surname> <given-names>MS</given-names></string-name>. <article-title>Differential adhesion in morphogenesis: a modern view</article-title>. <source>Curr Opin Genet Dev</source>. <year>2007</year>; <volume>17</volume>(<issue>4</issue>):<fpage>281</fpage>–<lpage>286</lpage>. <ext-link ext-link-type="uri" xlink:href="https://www.sciencedirect.com/science/article/pii/S0959437X07001062">https://www.sciencedirect.com/science/article/pii/S0959437X07001062</ext-link>, doi: <pub-id pub-id-type="doi">10.1016/j.gde.2007.05.002</pub-id>, pattern formation and developmental mechanisms.</mixed-citation></ref>
<ref id="c37"><mixed-citation publication-type="journal"><string-name><surname>Tkacik</surname> <given-names>G</given-names></string-name>, <string-name><surname>Gregor</surname> <given-names>T.</given-names></string-name> <article-title>The many bits of positional information</article-title>. <source>Development</source>. <year>2021</year>; <volume>148</volume>(<issue>2</issue>). doi: <pub-id pub-id-type="doi">10.1242/dev.176065</pub-id>.</mixed-citation></ref>
<ref id="c38"><mixed-citation publication-type="journal"><string-name><surname>Toda</surname> <given-names>S</given-names></string-name>, <string-name><surname>Blauch</surname> <given-names>LR</given-names></string-name>, <string-name><surname>Tang</surname> <given-names>SKY</given-names></string-name>, <string-name><surname>Morsut</surname> <given-names>L</given-names></string-name>, <string-name><surname>Lim</surname> <given-names>WA</given-names></string-name>. <article-title>Programming self-organizing multicellular structures with synthetic cell-cell signaling</article-title>. <source>Science</source>. <year>2018</year>; <volume>361</volume>(<issue>6398</issue>):<fpage>156</fpage>–<lpage>162</lpage>. doi: <pub-id pub-id-type="doi">10.1126/science.aat0271</pub-id>.</mixed-citation></ref>
<ref id="c39"><mixed-citation publication-type="journal"><string-name><surname>Tsimring</surname> <given-names>LS</given-names></string-name>. <article-title>Noise in biology</article-title>. <source>Rep Prog Phys</source>. <year>2014</year>; <volume>77</volume>(<issue>2</issue>):<fpage>026601</fpage>. doi: <pub-id pub-id-type="doi">10.1088/0034-4885/77/2/026601</pub-id>.</mixed-citation></ref>
<ref id="c40"><mixed-citation publication-type="journal"><string-name><surname>Turing</surname> <given-names>AM</given-names></string-name>. <article-title>The Chemical Basis of Morphogenesis</article-title>. <source>Philos Trans R Soc B</source>. <year>1952</year>; <volume>237</volume>(<issue>641</issue>):<fpage>37</fpage>–<lpage>72</lpage>. doi: <pub-id pub-id-type="doi">10.1098/rstb.1952.0012</pub-id>.</mixed-citation></ref>
<ref id="c41"><mixed-citation publication-type="confproc"><string-name><surname>Ulam</surname> <given-names>S</given-names></string-name>, <etal>et al.</etal> <article-title>On some mathematical problems connected with patterns of growth of figures</article-title>. In: <conf-name>Proceedings of Symposia in Applied Mathematics, vol. 14 Am. Math. Soc</conf-name>. Vol. <volume>14</volume>, <publisher-loc>Providence</publisher-loc>; <year>1962</year>. p. <fpage>215</fpage>–<lpage>224</lpage>.</mixed-citation></ref>
<ref id="c42"><mixed-citation publication-type="journal"><string-name><surname>Uriu</surname> <given-names>K</given-names></string-name>, <string-name><surname>Liao</surname> <given-names>BK</given-names></string-name>, <string-name><surname>Oates</surname> <given-names>AC</given-names></string-name>, <string-name><surname>Morelli</surname> <given-names>LG</given-names></string-name>. <article-title>From local resynchronization to global pattern recovery in the zebrafish segmentation clock</article-title>. <source>eLife</source>. <year>2021</year> <month>feb</month>; <volume>10</volume>:<fpage>e61358</fpage>. 10.7554/eLife.61358, doi: <pub-id pub-id-type="doi">10.7554/eLife.61358</pub-id>.</mixed-citation></ref>
<ref id="c43"><mixed-citation publication-type="journal"><string-name><surname>van der Maaten</surname> <given-names>L</given-names></string-name>, <string-name><surname>Hinton</surname> <given-names>G.</given-names></string-name> <article-title>Visualizing Data using t-SNE</article-title>. <source>J Mach Learn Res</source>. <year>2008</year>; <volume>9</volume>:<fpage>2579</fpage>–<lpage>2605</lpage>.</mixed-citation></ref>
<ref id="c44"><mixed-citation publication-type="journal"><string-name><surname>Wolfram</surname> <given-names>S.</given-names></string-name> <article-title>Statistical mechanics of cellular automata</article-title>. <source>Rev Mod Phys</source>. <year>1983</year>; <volume>55</volume>(<issue>3</issue>):<fpage>601</fpage>–<lpage>644</lpage>. doi: <pub-id pub-id-type="doi">10.1103/RevModPhys.55.601</pub-id>.</mixed-citation></ref>
<ref id="c45"><mixed-citation publication-type="journal"><string-name><surname>Wolfram</surname> <given-names>S.</given-names></string-name> <article-title>Computation theory of cellular automata</article-title>. <source>Commun Math Phys</source>. <year>1984</year>; <volume>96</volume>(<issue>1</issue>):<fpage>15</fpage>–<lpage>57</lpage>. doi: <pub-id pub-id-type="doi">10.1007/BF01217347</pub-id>.</mixed-citation></ref>
<ref id="c46"><mixed-citation publication-type="journal"><string-name><surname>Wolpert</surname> <given-names>L.</given-names></string-name> <article-title>Positional information and the spatial pattern of cellular differentiation</article-title>. <source>J Theor Biol</source>. <year>1969</year>; <volume>25</volume>(<issue>1</issue>):<fpage>1</fpage>–<lpage>47</lpage>. doi: <pub-id pub-id-type="doi">10.1016/S0022-5193(69)80016-0</pub-id>.</mixed-citation></ref>
<ref id="c47"><mixed-citation publication-type="other"><string-name><surname>Wolpert</surname> <given-names>L.</given-names></string-name> <article-title>The French flag problem: a contribution to the discussion on pattern development and regulation</article-title>. In: <person-group person-group-type="editor"><string-name><surname>Waddington</surname> <given-names>CH</given-names></string-name>, editor</person-group>. <source>Towards a Theoretical Biology Aldine Pub. Co</source>.; <year>1968</year>. p. <fpage>125</fpage>–<lpage>133</lpage>.</mixed-citation></ref>
</ref-list>
<sec id="s5">
<title>Supplementary information</title>
</sec>
<app-group>
<app id="app1">
<label>Appendix 1</label>
<title>Tables and figures</title>
<statement id="alg1">
<label>Figure 1 - Supplement algorithm S1</label>
<p>Cellular Automata Simulation</p>
<p><fig id="fig1algS1" position="float" fig-type="figure">
<graphic xlink:href="573602v1_fig1algS1.tif" mimetype="image" mime-subtype="tiff"/>
</fig></p>
</statement>
<statement id="alg2">
<label>Figure 1 - Supplement algorithm S2</label>
<p>Fitness Calculation</p>
<p><fig id="fig1algS2" position="float" fig-type="figure">
<graphic xlink:href="573602v1_fig1algS2.tif" mimetype="image" mime-subtype="tiff"/>
</fig></p>
</statement>
<fig id="fig2S1" position="float" fig-type="figure">
<label>Figure 2 - supplement figure S1.</label>
<caption><p>Results and analysis of evolutionary algorithm. For all simulations in this figure, the algorithm was started with 100 random rules and ran for 1000 iterations. Rule fitness was estimated by an average over 50 random initial conditions with CA size of <italic>L</italic> = 100. Each iteration, rules were mutated and, if less fit than the mutant, replaced by the mutant rule. Then, the 30 least fit rules were substituted by random ones. (cf. alg. S1) (a) Average and best fitness of the 100 rules in the list at each iteration as a function of evolutionary algorithm iterations. (b) Comparison between the ‘full’ EA using both mutations and replacement by random rules to modify the rule list, as well as modifications of the EA either only mutating the rules or only randomizing the least fit ones. (c) Distribution of maximum rule fitness found by the algorithm over 1619 runs (1620 for only mutation of rules, 1621 for only insertion of random rules) with the parameters specified before. (d) Phenotype of the fittest rule at the end of the run in (a), also fittest rule of the Full EA distribution in (c), for length <italic>L</italic> = 30, 100, and 300. (e) Dependence of the fitness of the rule in (a, b, d) on system length <italic>L</italic> for an average over 50 random initial conditions as in (a, b, c). Length <italic>L</italic> = 100 for which the fitness is usually calculated is marked with the red, dashed line.</p></caption>
<graphic xlink:href="573602v1_fig2S1.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
<fig id="fig2S2" position="float" fig-type="figure">
<label>Figure 2 - supplement figure S2.</label>
<caption><p>Kymographs of consensus rule (a) and its symmetric partner (b) with genotype <italic>S</italic> = 000011012121011012111022002.</p></caption>
<graphic xlink:href="573602v1_fig2S2.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
<statement id="alg3">
<label>Figure 2 - Supplement algorithm S1</label>
<p>Evolutionary algorithm simulation</p>
<p><fig id="alg1a" position="float" fig-type="figure">
<graphic xlink:href="573602v1_fig2algS1.tif" mimetype="image" mime-subtype="tiff"/>
</fig></p>
</statement>
<fig id="fig2tblS1" position="float" fig-type="figure">
<label>Figure 2 - supplement table S1.</label>
<caption><p>Consensus rule for different parameters. The consensus rule was calculated for 2 different 2 different neighborhood sizes and 3 different fitness thresholds. The differences to the consensus rule in the marked in red, with all consensus rules differed from the one selected by at most 5 mutations.</p></caption>
<graphic xlink:href="573602v1_fig2tblS1.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
<fig id="fig3S2" position="float" fig-type="figure">
<label>Figure 3 - supplement figure S2.</label>
<caption><p>Properties of consensus rule and its modifications. (a) Number of red states in final pattern as a function of the number of reds in the initial pattern for consensus rule, consensus with mapping 9 changed to white and to blue. The number of final reds for the consensus rule is always slightly larger or equal than the number of initial reds, while for both modifications of the consensus the numbers are the same. (b) Same data as in (a) but averaged for each system length. The dashed black lines in the figure are the lines <italic>y</italic> = <italic>x</italic> and <inline-formula><inline-graphic xlink:href="573602v1_inline11.gif" mimetype="image" mime-subtype="gif"/></inline-formula>. (c) Example of how the bulldozer state in the consensus rule sometimes seeds more whites than blues and how modifying the output of mapping 15 to blue makes the seeding ratio 1 <italic>z</italic> 1. (d) Scaling of the fraction of blue, white, and red states with system length. Mean fitness is also plotted in black. (e) Dependence of the variance of the final difference in the number of whites and blues on the position of the leftmost red state. Each point is the variance over 1000 random initial conditions. For the consensus rule, this variance is capped because mapping 9 introduces a red state close to the left boundary even if there isn’t one in the initial state. Mutating this mapping makes the variance scale linearly with red state position, consistent with the widths being independent binomial random variables. (f) Scaling of the mean fitness with system size <italic>L</italic> for the consensus rule, its modification, and the fittest rule (rule 200 222 122 202 110 112 211 110 100). While the consensus fitness converges to 17/18, the fitness of the modified and the fittest rules converge to 1 as <italic>L</italic> → ∞. The analytical solution plotted is the equation <inline-formula><inline-graphic xlink:href="573602v1_inline12.gif" mimetype="image" mime-subtype="gif"/></inline-formula>. (g,h) Mean difference between the final and initial number of 0s (g) and 1s (h) as a function of the initial number of 0s (g) and 1s (h), respectively. 10000 samples of initial conditions with only blue and white states with a proportion given by the value on the horizontal axis and random sequence. Error bar corresponds to the standard deviation of the sample of each point</p></caption>
<graphic xlink:href="573602v1_fig3S2.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
<fig id="fig3S3" position="float" fig-type="figure">
<label>Figure 3 - supplement figure S3.</label>
<caption><p>tSNE Plot of all rules with fitness larger 0.85 as described in <xref rid="fig3" ref-type="fig">fig. 3</xref> and Fitness. (a) Number of rule entries that are the same as (b) Time to steady state, (c) Relevant entries (entries with information content larger <italic>log</italic><sub>2</sub>(3) − 1 bits (cp. <xref rid="fig3" ref-type="fig">fig. 3 b</xref>) for a module that sorts red and white cells or (d) a blue bulldozer state moving to the left</p></caption>
<graphic xlink:href="573602v1_fig3S3.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
<fig id="fig4S1" position="float" fig-type="figure">
<label>Figure 4 - supplement figure S1.</label>
<caption><p>Complete rule tables for the engineered rules in the <italic>k</italic> = 4 space.</p></caption>
<graphic xlink:href="573602v1_fig4S1.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
<fig id="fig4S2" position="float" fig-type="figure">
<label>Figure 4 - supplement figure S2.</label>
<caption><p>Simulation examples of the prototypical rules for different system sizes <italic>L</italic> ∈ {9, 33, 99, 999}</p></caption>
<graphic xlink:href="573602v1_fig4S2.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
<fig id="fig6S1" position="float" fig-type="figure">
<label>Figure 6 - supplement figure S1.</label>
<caption><p>Steady State Times for Consensus, Bubble, Landscaping, and Mixed rule. (a) Sampled distributions for <italic>L</italic> = 100 with the rough estimates of the average from the main text. (b) Scaling of average steady state time with length (dots), together with the rough estimates (dashed lines) and the fits (solid lines).</p></caption>
<graphic xlink:href="573602v1_fig6S1.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
</app>
<app id="app2">
<label>Appendix 2</label>
<title>Choice of fitness function</title>
<p>The algorithm to calculate the fitness for a single rule according to <xref ref-type="disp-formula" rid="eqn3">eq. (3)</xref> is outlined in Fitness Calculation. (For <xref rid="fig7" ref-type="fig">fig. 7a</xref>, <italic>N</italic><sub><italic>sample</italic></sub> = 100, <italic>T</italic><sub><italic>max</italic></sub> = 2<italic>L</italic>). The fitness serves two separate purposes in our argument: as a measure of how well a particular rule is able to generate a specific target pattern, and as a score function in the evolutionary algorithm.</p>
<p>Depending on the target pattern and the (biological) context, different measures might be used to better capture the first purpose, e.g., for the French flag pattern a cell with a red state where a blue cell should be situated could be punished more severely. Here, the Hamming distance was chosen as fitness because it is independent of the specific target pattern and arguably the simplest possible choice.</p>
<p>In it’s function as a score for the evolutionary algorithm, a different choice of fitness function might be useful to speed up the convergence of the EA algorithm by, e.g., introducing a non-linearity before summing up the individual scores for different initial conditions. We did not use these possibilities here to keep a single consistent fitness function throughout the whole paper. Our choice of fitness function is, for well working cellular automata rules, usually not constant with system size but a mostly increasing function of the system size <italic>L</italic> (<xref rid="fig2S1" ref-type="fig">fig. S1 d, e</xref>), depending on the sample size and the exact value of <italic>L</italic>, since only every third size is divisible by three as needed to for an unambiguous choice of target pattern for a French Flag pattern.</p>
<p>When searching rules that form other target ratios also different length (<italic>L</italic> ∈ {40, 100, 200}) and simulation times (either <italic>T</italic><sub><italic>max</italic></sub> = 2<italic>L</italic> or with equal weights <italic>T</italic><sub><italic>max</italic></sub> = 2<italic>L</italic> and <italic>T</italic><sub><italic>max</italic></sub> = 5<italic>L</italic>) were used to counteract the fact that found solutions only worked for specific lengths and/or a specific simulation times.</p>
</app>
<app id="app3">
<label>Appendix 3</label>
<title>Evolutionary Algorithm</title>
<p>The basic evolutionary algorithm as conceptually shown in <xref rid="fig2" ref-type="fig">fig. 2</xref> is represented in pseudo-code in Evolutionary algorithm simulation. The EA is initialized with a list of random rules. A single iteration, which will be carried out <italic>N</italic><sub><italic>Iteration</italic></sub> = 1000 times, consists of a calculation of the fitness of each rule, as well as mutating each rule twice and calculating the fitness of the mutated rules as well. Each rule is then compared in fitness to its mutated counterpart and the better performing one is chosen. After sorting these rules, the worst 30% are discarded and replaced by random rules before a new iteration starts.</p>
<fig id="fig7S1" position="float" fig-type="figure">
<label>Figure 7 - supplement figure S1.</label>
<caption><p>Average fitness of prototypical rules in growing systems. Average fitness as a function of the system size for the prototypical rules in 3 and 4 state space for the Consensus rule, Bubble rule, Landscaping rule and Mixed rule, as well as a modification of the consensus rule in entry 9 to 1 (from 2) and modification of the Landscaping rule in entry 36 to 1 (from 3). In each case, the fitness as a function of the initial and final length are shown for a system growing with a probability of 0.2% per time step per cell. Sample sizes are 10000 for <italic>L</italic> ≤ 10, 1000 for 10 &lt; <italic>L</italic> ≤ 100 and 100 for <italic>L</italic> &gt; 100. Further, the fitness for the corresponding non growing (static) system is plotted. Sample sizes in this case are 10000 for <italic>L</italic> ≤ 10, 1000 for <italic>L</italic> &gt; 10. The vertical lines correspond to the length at which on average the exponential growth of the system exceeds the length at which the exponential growth of the system is faster then the pattern formation process defined by 0.002<italic>aL</italic><sub><italic>crit</italic></sub> = 1 with <italic>a</italic> being the average number of steps needed to complete pattern formation (cp. S1).</p></caption>
<graphic xlink:href="573602v1_fig7S1.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
<fig id="fig7S2" position="float" fig-type="figure">
<label>Figure 7 - supplement figure S2.</label>
<caption><p>Simulation of a growing system for the Bubble (a, b) and Mixed (c, d) rule for initial system sizes <italic>L</italic> = 80 (a, c) and <italic>L</italic> = 160 (b, d). The system is growing with a division probability of 0.2% per time step per cell.</p></caption>
<graphic xlink:href="573602v1_fig7S2.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
<fig id="fig7S3" position="float" fig-type="figure">
<label>Figure 7 - supplement figure S3.</label>
<caption><p>Simulation of a growing system for the Landscaping rule (a, b) and the Landscaping rule modified at position 36 (to 1) (c, d) for initial system sizes <italic>L</italic> = 80 (a, c) and <italic>L</italic> = 160 (b, d). The system is growing with a division probability of 0.2% per time step per cell. The modified entry suppresses the formation of new bulldozer states due to cell divisions</p></caption>
<graphic xlink:href="573602v1_fig7S3.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
<fig id="fig7S4" position="float" fig-type="figure">
<label>Figure 7 - supplement figure S4.</label>
<caption><p>Simulation of a growing system for the consensus rule (a, b) and the consensus rule modified at position 9 (to 1) (c, d) for initial system sizes <italic>L</italic> = 80 (a, c) and <italic>L</italic> = 160 (b, d). The system is growing with a division probability of 0.2% per time step per cell. The modified entry suppresses the formation of new bulldozer states due to cell divisions</p></caption>
<graphic xlink:href="573602v1_fig7S4.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
<fig id="fig8S1" position="float" fig-type="figure">
<label>Figure 8 - supplement figure S1.</label>
<caption><p>Rules for different target ratios (b, w, r) = (3, 1, 1): 200220122210110102110110100 and (b, w, r) = (2, 1, 1): 211220022210110102111110100. Left column: average proportion of each state (dots) together with the aimed ratios (dashed lines) as well as the asymptotic values (average value from <italic>L</italic> = 901 to <italic>L</italic> = 1000, solid lines). Middle column: exemplary kymograph from random initial conditions for <italic>L</italic> = 33. Right column: from two times adjacent blue and red cells (3, 1, 1), and randomly initial conditions with only blue and white cells (2, 1, 1), respectively.</p></caption>
<graphic xlink:href="573602v1_fig8S1.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
<fig id="fig8S2" position="float" fig-type="figure">
<label>Figure 8 - supplement figure S2.</label>
<caption><p>Conservation of States for the Bubble Rule: Difference between number number of states in the blue (a), white (b), and red (c) color in final and initial state when starting from initial conditions without black states for <italic>L</italic> = 99 and 100 randomly drawn samples for every possible total number of blue, white and red initial conditions.</p></caption>
<graphic xlink:href="573602v1_fig8S2.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
<fig id="fig8S3" position="float" fig-type="figure">
<label>Figure 8 - supplement figure S3.</label>
<caption><p>Modifications of the Bubble rule lead to different stripe width. Example (a, c) and average relative stripe width in final pattern as a function of a chosen mutation trajectory (b, d) for modification towards white (a, b) and red (c, d) state, respectively. In each case, the average stripe width can be adjusted using modifications</p></caption>
<graphic xlink:href="573602v1_fig8S3.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
<p>While most EA runs produce high scoring rules consistently, acquiring exceptionally well scoring rules may need several EA runs (<xref rid="fig2S1" ref-type="fig">fig. S1 c</xref>), which is feasible since a typical EA run was measured to take approximately 4 min on average (on a single core of a Intel Xeon E-2246G 3,60 GHz CPU). While we consider a very specific version of EA algorithms here combining mutations and replacement of the worst rules by random rules, only mutating would also be able to find good rules, although not as quickly as the combination with replacements (<xref rid="fig2S1" ref-type="fig">fig. S1 b</xref>), while just using random replacements (which is essentially equivalent to random sampling) is not able to produce variants with high fitness quickly (<xref rid="fig2S1" ref-type="fig">fig. S1 b</xref>).</p>
</app>
<app id="app4">
<label>Appendix 4</label>
<title>Computational analysis of the consensus rule</title>
<p>In the main text possible properties of the consensus rule have been hypothesized: (1) the total number of red states is conserved throughout development, (2) the leftmost red state seeds blue and white states at a ratio 1 : 1, (3) the blue and white states to the left of the leftmost red state are sorted into stripes maintaining their numbers, and (4) the pattern formation process scales with the system size. Here, we check these properties computationally for the consensus rule and, when they don’t hold exactly, we explain the mismatch between the consensus patterning strategy and the intuition herein developed and propose modifications to the consensus rule achieving the proposed properties.</p>
<p>The first property, conservation of red states, only holds true approximately for the consensus rule (<xref rid="fig3S2" ref-type="fig">fig. S2a, b</xref>), because the output of its mapping 9 (input: white, blue, blue) slightly increases the number of red states during development. However, mutating this mapping’s output to either blue or white would yield conservation without disrupting pattern formation (<xref rid="fig3S2" ref-type="fig">fig. S2a, b</xref> and <xref rid="fig3" ref-type="fig">fig. 3d</xref>). The second property, alternating seeding of blue and white by the leftmost bulldozer state, also only holds true approximately because mapping 15 of the consensus rule (input: white, red, blue) disrupts the perfect alternation between blue and white states (<xref rid="fig3S2" ref-type="fig">fig. S2c</xref> and <xref rid="fig3" ref-type="fig">fig. 3b</xref>). Mutating this mapping’s output to blue, instead of white, results in alternating seed without disrupting pattern formation (<xref rid="fig3S2" ref-type="fig">fig. S2c</xref> and <xref rid="fig3" ref-type="fig">fig. 3d</xref>).</p>
<p>The third property is also not exact for the consensus rule because mapping 9 prevents blue and white states from just sorting into stripes and can, instead, create red states in between them. Mutating mapping 9 to white would resolve the situation (<xref rid="fig3S2" ref-type="fig">fig. S2e, g, h</xref>).</p>
<p>The fourth property, scaling with system size, holds true for the consensus rule in the sense that the mean position of the boundaries between stripes scales linearly with the size of the system (<xref rid="fig3S2" ref-type="fig">fig. S2d</xref>), a property usually associated with gradient based pattern formation (<bold><italic><xref ref-type="bibr" rid="c8">Ben-Zvi et al., 2011</xref></italic></bold>).</p>
</app>
<app id="app5">
<label>Appendix 5</label>
<title>Analytical models</title>
<p>We devised simplified models to describe the patterning strategies of the 3 and 4-state rules. These models have analytically solvable statistical properties and can clarify the connections between patterning strategies and the resulting mean fitness. Moreover, these analyses allow us to quantify to what extent more detailed properties of these rules modify the generic behavior captured by these analytical models.</p>
<p>We model the Consensus rule as a strategy that starts with a random initial condition with white, blue and red states being equally likely. Because mapping number 9 transforms blue states into red states, after the first update the pattern we assume a slight bias towards red, with a probability of 1/3 + 1/27 that an initial state will be red, and with probability 1/3 − 1/27 it will be blue. We make the simplifying assumption that the distribution of these states is still binomial (<xref rid="figAS1" ref-type="fig">fig. S1a</xref>) and that only the mean of the distribution is changed. After the first rule update, all red states accumulate to the right, moving one position at a time, and maintaining their initial number. In addition, blue and white states to the left of the leftmost red state are sorted and also maintain their number, and finally the states between the initial and final position of the leftmost red state are equally split between blue and white states and sorted.</p>
<p>We model the Mixed rule similarly to the consensus, except that its initial condition includes black states. We assume that these black states get equally redistributed into blue, white and red during the initial updates and then pattern formation continues as in the consensus rule, but with mapping 9 not creating new reds.</p>
<p>We model the Landscaping rule in a similar fashion, but now black states, instead of reds, are used for patterning and the black states disappear from the pattern when they reach the right boundary. We assume all states to the left of the leftmost black state maintain their numbers and are sorted, and the states between the initial position of the leftmost black state and the right boundary are equally split into blue, white and red states.</p>
<p>We model the Bubble rule as a strategy that starts with a random initial condition with white, blue, red and black states being equally likely. As with the Mixed rule, we assume the black states get equally redistributed into the other three states during the first updates. We then assume that the remaining states are sorted, keeping their numbers constant.</p>
<p>Focusing on the fitness function, the models described above always develop into patterns with blue, white and red stripes in this order, but possibly with different widths. To describe these final patterns, we define the variables <italic>b, w</italic>, and <italic>r</italic> to represent the widths of the blue, white, and red stripes in the steady state patterns. The conditions on these widths is that they span the whole flag (<italic>b</italic> + <italic>w</italic> + <italic>r</italic> = <italic>L</italic>) and that they are non negative (<italic>b, w, r</italic> ≥ 0). Using these new variables, we can rewrite the fitness function defined in <xref ref-type="disp-formula" rid="eqn3">eq. (3)</xref> as:
<disp-formula id="eqn4">
<graphic xlink:href="573602v1_eqn4.gif" mimetype="image" mime-subtype="gif"/>
</disp-formula></p>
<p>Based on this equation, we calculate how fitness scales with automata length for each of the rule models described above. The variables we need to determine in this calculation are <italic>b</italic> and <italic>r</italic>.</p>
<p>As a first simplification step we assume that <italic>L</italic> is a multiple of 3. The expected fitness value can then be written as:
<disp-formula id="eqn5">
<graphic xlink:href="573602v1_eqn5.gif" mimetype="image" mime-subtype="gif"/>
</disp-formula></p>
<p>If <italic>L</italic> is not a multiple of 3, the difference to the above expression scales as at most <inline-formula><inline-graphic xlink:href="573602v1_inline9.gif" mimetype="image" mime-subtype="gif"/></inline-formula></p>
<p>In the Consensus rule model, the number of red states in the final pattern is the same as the number of red states in the initial pattern after the biasing effect of mapping 9. The distribution of <italic>r</italic>, therefore, will be a binomial with parameters <italic>n</italic> = <italic>L</italic> and <italic>p</italic> = 1/3 + 1/27: <bold><italic>B</italic></bold>(<italic>L</italic>, 1/3 + 1/27). We can use this to derive a lower bound for the last expectation value on the RHS of <xref ref-type="disp-formula" rid="eqn5">eq. (5)</xref> using the positivity of the absolute value:
<disp-formula id="eqn6">
<graphic xlink:href="573602v1_eqn6.gif" mimetype="image" mime-subtype="gif"/>
</disp-formula></p>
<p>Using the Chernoff-bound for a binomial, we can also arrive at an upper bound for the last expectation value on the RHS of <xref ref-type="disp-formula" rid="eqn5">eq. (5)</xref>:
<disp-formula id="eqn7">
<graphic xlink:href="573602v1_eqn7.gif" mimetype="image" mime-subtype="gif"/>
</disp-formula></p>
<p>The distribution of <italic>b</italic> is more involved. Assuming the leftmost red state is at position <italic>x</italic> after the effects of mapping 9, the number of blue states between positions 1 and <italic>x</italic> will be distributed following ℬ(<italic>x</italic>, 1/2) and half of the states between positions <italic>x</italic> and <italic>L</italic> − <italic>r</italic> will be blue. Therefore, the distribution of blue states given <italic>x</italic> and <italic>r</italic> can be written as <italic>b</italic> = (<italic>L</italic>−<italic>r</italic>−<italic>x</italic>)/2+<italic>s</italic>, with <italic>s</italic> being distributed as ℬ(<italic>x</italic>, 1/2)</p>
<p>This allows now the calculation of the first expectation in <xref ref-type="disp-formula" rid="eqn5">eq. (5)</xref>. Note that the variables <italic>r</italic> and <italic>x</italic> that are not independent. So, we derive bounds by plugging the above expression for <italic>b</italic> into the expectation and use the triangle inequality as well as the bounds on <italic>x</italic> as a random variable between 0 and <italic>L</italic>:
<disp-formula id="eqn8">
<graphic xlink:href="573602v1_eqn8.gif" mimetype="image" mime-subtype="gif"/>
</disp-formula>
<disp-formula id="eqn9">
<graphic xlink:href="573602v1_eqn9.gif" mimetype="image" mime-subtype="gif"/>
</disp-formula></p>
<p>The expectation value of <italic>x</italic> is bounded by the expectation of a geometrically distributed variable with success probability <italic>p</italic> = 1/3 + 1/27 (the probability a state is red) and the other expectation value in the expressions is the one estimated before.</p>
<p>Summarizing everything, we have the following bounds on the difference between 1 and the fitness function:
<disp-formula id="eqn10">
<graphic xlink:href="573602v1_eqn10.gif" mimetype="image" mime-subtype="gif"/>
</disp-formula>
where <inline-formula><inline-graphic xlink:href="573602v1_inline13.gif" mimetype="image" mime-subtype="gif"/></inline-formula>[<italic>x</italic>] was approximated by the (slightly larger) expected value of the entire geometric distribution. Therefore, we can conclude that for this model of the Consensus rule,
<disp-formula id="eqn11">
<graphic xlink:href="573602v1_eqn11.gif" mimetype="image" mime-subtype="gif"/>
</disp-formula></p>
<p>This explains why the fitness of the consensus does not converge to 1: mapping 9’s bias prevents the French flag from developing perfectly even for large system sizes. Mutating this mapping’s output to white instead would solve this problem and we could model this new 3-state rule in the same way we model the Mixed rule next.</p>
<p>In the Mixed rule model, the number of red states in the final pattern is the same as the number of red states in the initial pattern after the redistribution of black states. Since we are assuming black states are redistributed uniformly, the distribution of <italic>r</italic> will be a binomial distribution with parameters <italic>n</italic> = <italic>L</italic> and <italic>p</italic> = 1/3: ℬ(<italic>L</italic>, 1/3) (<xref rid="figAS1" ref-type="fig">fig. S1 (b)</xref>). Just like before, the distribution of <italic>b</italic> is more involved. Assuming the leftmost red state is at position <italic>x</italic>, the number of blue states <italic>s</italic> between positions 1 and <italic>x</italic> will be distributed following ℬ(<italic>x</italic>, 1/2) and half of the states between positions <italic>x</italic> and <italic>L</italic> − <italic>r</italic> will be blue. Therefore, the distribution of blue states given <italic>x</italic> and <italic>r</italic> can be written as <italic>b</italic> = (<italic>L</italic> − <italic>r</italic> − <italic>x</italic>)/2 + <italic>s</italic>. We again have to calculate the expressions in <xref ref-type="disp-formula" rid="eqn5">eq. (5)</xref>. Since now <inline-formula><inline-graphic xlink:href="573602v1_inline14.gif" mimetype="image" mime-subtype="gif"/></inline-formula>[<italic>r</italic>] = <italic>L/</italic>3, the second expectation value on the right hand side is called the mean absolute deviation (MAD) and in this case <italic>r</italic> is a binomial variable, so a closed formula exists. This second expectation does not converge exponentially to its limit value anymore, but rather converges as a power law, as detailed later. We can bound the first expectation in the same way we did before (<xref ref-type="disp-formula" rid="eqn8">eq. (8)</xref> and <xref ref-type="disp-formula" rid="eqn9">eq. (9)</xref>), but now knowing that the expectation value of <italic>x</italic> is bounded by the expectation of a geometrically distributed variable with success probability <italic>p</italic> = 1/3 (the probability a state is red). The second expectation value in the expressions is the MAD that already appeared before and can be calculated.</p>
<p>We then have the following bounds on the difference between 1 and the fitness function:
<disp-formula id="eqn12">
<graphic xlink:href="573602v1_eqn12.gif" mimetype="image" mime-subtype="gif"/>
</disp-formula>
where <inline-formula><inline-graphic xlink:href="573602v1_inline15.gif" mimetype="image" mime-subtype="gif"/></inline-formula>[<italic>x</italic>] was approximated by the, slightly larger, expected value of the entire geometric distribution. Using the closed formula for the MAD of a binomial variable (<bold><italic><xref ref-type="bibr" rid="c17">Diaconis and Zabell, 1991</xref></italic></bold>) and its approximation (<bold><italic><xref ref-type="bibr" rid="c10">Blyth, 1980</xref></italic></bold>) applied to our specific case, we then have that:
<disp-formula id="eqn13">
<graphic xlink:href="573602v1_eqn13.gif" mimetype="image" mime-subtype="gif"/>
</disp-formula>
where <italic>v</italic> = ⌊<italic>pL</italic>⌊ + 1. Therefore, we can conclude that for this model of the Mixed rule and for the modified consensus rule,
<disp-formula id="eqn14">
<graphic xlink:href="573602v1_eqn14.gif" mimetype="image" mime-subtype="gif"/>
</disp-formula></p>
<p>Testing these predictions numerically shows that they work well for the modified consensus but that the constant multiplying <italic>L</italic><sup>−1/2</sup> is slightly off for the Mixed rule. We attribute that to the fact that the initial distribution of states is not exactly binomial (<xref rid="figAS1" ref-type="fig">fig. S1 (b)</xref>) for this rule even though on average the states are still equally distributed forming a French flag and guaranteeing the convergence of this rule’s fitness to 1.</p>
<p>Similarly for the Bubble rule, we now have <italic>b</italic> and <italic>r</italic> distributed as ℬ(<italic>L</italic>, 1/3) (<xref rid="figAS1" ref-type="fig">fig. S1 (c)-(e)</xref>). Therefore
<disp-formula id="ueqn1">
<graphic xlink:href="573602v1_ueqn1.gif" mimetype="image" mime-subtype="gif"/>
</disp-formula>
and using <xref ref-type="disp-formula" rid="eqn13">eq. (13)</xref> and its approximation again, one can show that:
<disp-formula id="eqn15">
<graphic xlink:href="573602v1_eqn15.gif" mimetype="image" mime-subtype="gif"/>
</disp-formula></p>
<p>Moving on to the model for the Landscaping rule, we can trace some parallels. Assuming the position of the leftmost black state is <italic>x</italic>, both amounts <italic>r</italic> and <italic>b</italic> have the same distribution and that is <italic>r</italic> = <italic>b</italic> = (<italic>L</italic>−<italic>x</italic>)/3 + <italic>q</italic> with <italic>q</italic> distributed as ℬ(<italic>x</italic>, 1/3). Therefore, plugging this into <xref ref-type="disp-formula" rid="eqn4">eq. (4)</xref> and taking the expected value we find:
<disp-formula id="eqn16">
<graphic xlink:href="573602v1_eqn16.gif" mimetype="image" mime-subtype="gif"/>
</disp-formula>
with the indices on the expectation value indicating the variables of the corresponding probability distribution added for clarity. Using a conditional expectation value on <italic>x</italic> we get:
<disp-formula id="eqn17">
<graphic xlink:href="573602v1_eqn17.gif" mimetype="image" mime-subtype="gif"/>
</disp-formula></p>
<p>The inner expectation is the MAD of a binomial variable without the normalizing factor of <italic>x</italic>, similar to what we had before. Using the closed formula from before (<xref ref-type="disp-formula" rid="eqn13">eq. (13)</xref>) for the first term of the expectation, we can get a lower bound to the expression. Additionally, based on the fact that the non-normalized MAD[<italic>x</italic>] is a concave, increasing function in <italic>x</italic>, we can get an upper bound by calculating the MAD for 4, since <inline-formula><inline-graphic xlink:href="573602v1_inline16.gif" mimetype="image" mime-subtype="gif"/></inline-formula>[<italic>x</italic>] &lt; 4:
<disp-formula id="eqn18">
<graphic xlink:href="573602v1_eqn18.gif" mimetype="image" mime-subtype="gif"/>
</disp-formula>
with <inline-formula><inline-graphic xlink:href="573602v1_inline10.gif" mimetype="image" mime-subtype="gif"/></inline-formula> being distributed as ℬ(<inline-formula><inline-graphic xlink:href="573602v1_inline17.gif" mimetype="image" mime-subtype="gif"/></inline-formula>[<italic>x</italic>], 1/3). These bounds prove that for this model of the Landscaping rule
<disp-formula id="eqn19">
<graphic xlink:href="573602v1_eqn19.gif" mimetype="image" mime-subtype="gif"/>
</disp-formula>
with a coefficient between 8/27 and 128/81.</p>
<sec id="s5a">
<title>Time to steady state</title>
<p>We computationally calculated the scaling coefficients of the mean times to steady state for the 4-state rules described, as shown in <xref rid="fig6S1" ref-type="fig">fig. S1</xref>. Here, we develop an intuitive explanation for their values.</p>
<p>The mean time to steady state of the Mixed rule scales as <italic>T</italic><sub><italic>ss</italic></sub> ≈ 1.0<italic>L</italic>. This scaling can be understood as the time it takes for the leftmost red state to reach the red boundary (on average 2<italic>L/</italic>3 steps since the state moves one position at a time) plus the time it takes for the last blue state seeded by the bulldozer to sort into place (on average <italic>L/</italic>3 since it is seeded at the red boundary and has to move to the blue boundary).</p>
<p>In the case of the Landscaping rule, the scaling coefficient is 1.67 and a similar intuitive explanation applies. This time, the leftmost black state is the bulldozer and needs to travel the whole length of the system to finish the patterning process. In addition, the last blue state seeded by this hidden bulldozer would need to travel on average 2<italic>L/</italic>3 steps. Overall, then, the pattern formation would take on average 5<italic>L/</italic>3 time steps.</p>
<p>Finally, for the Bubble rule, the scaling coefficient estimated was 0.74. Naively, one would think that the sorting mechanism of the Bubble rule would take on average 2/3<italic>L</italic> time steps, because that would be the average time for the rightmost blue state or the leftmost red state to move to its respective boundary position. However, because of the resolution module needed to solve the ambiguities of sorting, this process is delayed. While the red states in the resolution module just keep moving to the right as a black state, the blue state contained in the black state is delayed by exactly 1 time step, since it leaves the black state vertically instead of diagonally (<xref rid="fig4" ref-type="fig">fig. 4d</xref>). To understand how long the pattern formation process takes, then, we need to estimate into how many resolution modules the leftmost blue state enters during its sorting. First, whether or not a blue and a red state with only whites or blues in between need to be resolved is a matter of parity. If the states are at an even distance, they will clash and need to be resolved; if they are at an odd distance, they will just be swapped when directly neighboring and do not need the resolution module. Now, as the red states are propagating to the right, any initially neighboring red states need to create a gap between them in order to continue their sorting. Therefore, red states being direct neighbors or next nearest neighbors will be in the same parity, preventing the second one from needing to use a resolution module no matter where the leftmost blue state starts. Taking that into account, the number of resolution modules into which the rightmost blue state enters can be estimated as the number of red states it meets (on average <italic>L/</italic>3) times the probability that that red state is at least 3 positions away from the previous one ((2/3)<sup>2</sup>) times the probability that that red state is in the right parity (1/2). Overall, then, the number of resolution modules is on average 2<italic>L/</italic>27 and the mean time to steady state for this rule is 2<italic>L/</italic>3 + 2<italic>L/</italic>27 = 20<italic>L/</italic>27 ≈ 0.74<italic>L</italic>, as found numerically (cf. <xref rid="fig6S1" ref-type="fig">fig. S1</xref>).</p>
<fig id="figAS1" position="float" fig-type="figure">
<label>Appendix 5 - supplementary figure S1.</label>
<caption><p>Distribution of different states after the 2<italic>L</italic> steps for <italic>L</italic> = 99 of the Consensus (a), Mixed (b) and Bubble (c-e) rule. Empirical distributions where sampled from 100000 samples, binomial distributions plotted with indicated probability <italic>p</italic> (see Analytical models). Although in some cases the binomial appears to be extremely close to the empirical distribution, the Kolmogorov-Smirnov-Tests fail in all cases (<italic>p</italic> &lt;&lt; 0.001).</p></caption>
<graphic xlink:href="573602v1_figAS1.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
</sec>
</app>
</app-group>
</back>
<sub-article id="sa0" article-type="editor-report">
<front-stub>
<article-id pub-id-type="doi">10.7554/eLife.94699.1.sa2</article-id>
<title-group>
<article-title>eLife Assessment</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<name>
<surname>Nahmad</surname>
<given-names>Marcos</given-names>
</name>
<role specific-use="editor">Reviewing Editor</role>
<aff>
<institution-wrap>
<institution>Center for Research and Advanced Studies of the National Polytechnic Institute</institution>
</institution-wrap>
<city>Mexico City</city>
<country>Mexico</country>
</aff>
</contrib>
</contrib-group>
<kwd-group kwd-group-type="evidence-strength">
<kwd>Convincing</kwd>
</kwd-group>
<kwd-group kwd-group-type="claim-importance">
<kwd>Important</kwd>
</kwd-group>
</front-stub>
<body>
<p>This <bold>important</bold> study uses cellular automata and evolution algorithms to offer an alternative to long-range signalling models of developmental patterning. The computational evidence that local rules suffice to produce a robust and global pattern is <bold>convincing</bold>. With some additional insights that connect the theoretical findings back to real biological examples, this work could be of interest to the broad community of developmental and systems biologists.</p>
</body>
</sub-article>
<sub-article id="sa1" article-type="referee-report">
<front-stub>
<article-id pub-id-type="doi">10.7554/eLife.94699.1.sa1</article-id>
<title-group>
<article-title>Reviewer #1 (Public Review):</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<anonymous/>
<role specific-use="referee">Reviewer</role>
</contrib>
</contrib-group>
</front-stub>
<body>
<p>Summary:</p>
<p>In this article, Kremser et al set off to explore how local interactions between cells can drive pattern formation by focusing on the French flag problem whereby an initially homogeneous system breaks axial symmetry to form three distinct regions of different cell fates. The authors use a cellular automata model together with evolution searches on possible rules that determine cell state and tissue level patterning. It is assumed that three cell states are possible and that at each time iteration each cell updates its fate according to the current state of itself and its neighbours. The authors use a computational procedure based on evolution algorithms to identify &quot;fit&quot; update rules that can successfully drive patterning into three distinct domains and go on to provide insights with regards to the function of these rules as well as their properties such as robustness and patterning dynamics. The article is generally well-written, the results seem solid, and the analysis and methods are thorough and generally well-explained. A main concern is the lack of connection between the biology that motivated the analysis and the results, this could be improved in the discussion by making the methods somewhat more concise to allow space to make links back to potential biological mechanisms when the results are presented. We raise some general points and some more specific questions and suggestions for clarification below that we hope will help improve the MS and make it more accessible to a wider audience.</p>
<p>General points:</p>
<p>• Although the authors motivate their work on the premise that biological patterns at the tissue level often are driven by local cell-cell interactions, by the end of the analysis any possible connection to the underlying biology is lost. For example, it would have been useful to discuss how the rules that evolved to dominate the patterning process in the results section could be implemented by cells. Is there a connection that could be made back to Notch signalling and its multiple ligands or to morphogens that diffuse only locally? Would the large number of rules possible in the cellular automata context reflect transcriptional feedback? This is an important point to bring the work &quot;home&quot;. At the moment, it feels like a nice computational analysis of cellular automata but the links to the systems that motivate the work are lost in the process.</p>
<p>• When growth is considered (p.14-15) a discussion of timescales seems pertinent. Often patterning takes place at a timescale faster than cell division so the system could be allowed to reach a steady state before a new division event takes place. What are the time scales of updating the phenotype compared with the time scales of division in the model and in relevant biological systems? How would different limiting cases impact conclusions, e.g. new cells added and pattern allowed to reach steady state before more growth versus cells added while patterning dynamics are still updating?</p>
<p>• An interesting question is whether certain elements of rules (out of the 27 possible elements for the system with 3 states) are more or less likely to appear together in an evolved final rule. This may give a mechanistic understanding of what combinations of elements are likely to drive the optimal pattern and which combinations are avoided altogether.</p>
</body>
</sub-article>
<sub-article id="sa2" article-type="referee-report">
<front-stub>
<article-id pub-id-type="doi">10.7554/eLife.94699.1.sa0</article-id>
<title-group>
<article-title>Reviewer #2 (Public Review):</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<anonymous/>
<role specific-use="referee">Reviewer</role>
</contrib>
</contrib-group>
</front-stub>
<body>
<p>Summary:</p>
<p>In this paper, the authors seek to identify strategies that can be used to generate robust one-dimensional large-scale patterns through the sequential application of only local, unchanging, space-independent rules. This is an important general question in developmental biology.</p>
<p>Strengths:</p>
<p>The authors do a nice job of laying out the problem, which they explore through cellular automaton (CA) modeling. The modeling framework is well described, as are the methods used for computational identification of effective (most &quot;fit&quot;) strategies. As many biologists are unfamiliar with CA models, the clarity of description offered by these authors is especially important, as is the attention that was paid to useful visualization of results.</p>
<p>Ultimately, the authors use their approach to converge on certain generic strategies for achieving robust patterns. In the case when there are only three states (no hidden or transient states) available to cells, they rationalize the consensus strategy that emerges to involve a combination of &quot;sorting&quot; and &quot;bulldozer&quot; modules, which are relatively easy to rationalize. In cases involving a fourth state, a more complicated set of strategies arise and are considered.</p>
<p>As a pure modeling paper, I find the work to be very well done, and the conclusions are well supported by the data and analyses. In terms of the long-term importance of this approach to biologists studying pattern formation, I see this paper as primarily laying a foundation for taking the next step, which is moving into two (or three dimensions). Clearly, the complexity of rules becomes much greater, but one may expect some big qualitative differences to show up in higher dimensions, where simple strategies like sorting and bulldozing cannot work quite as simply. It will be interesting to see where this leads.</p>
<p>Weaknesses:</p>
<p>Ultimately, the relevance of this work to biology rests with its ability to provide insight into important biological problems. In terms of explaining the challenging nature of generating long-range patterns using short-range rules, I think the authors do a good job. However, they could do a better job of relating the results of the work back to biology. For example, are there examples of &quot;sorting module&quot; and &quot;bulldozer module&quot; behavior in biology? Could they be involved in explaining actual biological patterns?</p>
<p>It also would have been helpful for the authors to generalize more about the way in which their CA rules achieve global patterns with other patterning mechanisms. For example, in a Wolpert positional information model, patterning information is distributed over space in a steady-state gradient. In the CA model, no information spreads more than one cell at any one time point, but over time information still spreads, so in a sense a stationary spatial gradient has been traded for a moving spatial discontinuity. Because the discontinuity moves without decrement, any stationary state ends up being determined by the boundaries of the system, which goes a long way to explaining the robustness they observe, as well as why the result is quite sensitive to growth (which keeps changing the boundary).</p>
</body>
</sub-article>
</article>