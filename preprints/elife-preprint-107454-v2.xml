<?xml version="1.0" ?><!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.3 20210610//EN"  "JATS-archivearticle1-mathml3.dtd"><article xmlns:ali="http://www.niso.org/schemas/ali/1.0/" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article" dtd-version="1.3" xml:lang="en">
<front>
<journal-meta>
<journal-id journal-id-type="nlm-ta">elife</journal-id>
<journal-id journal-id-type="publisher-id">eLife</journal-id>
<journal-title-group>
<journal-title>eLife</journal-title>
</journal-title-group>
<issn publication-format="electronic" pub-type="epub">2050-084X</issn>
<publisher>
<publisher-name>eLife Sciences Publications, Ltd</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">107454</article-id>
<article-id pub-id-type="doi">10.7554/eLife.107454</article-id>
<article-id pub-id-type="doi" specific-use="version">10.7554/eLife.107454.2</article-id>
<article-version-alternatives>
<article-version article-version-type="publication-state">reviewed preprint</article-version>
<article-version article-version-type="preprint-version">1.2</article-version>
</article-version-alternatives>
<article-categories><subj-group subj-group-type="heading">
<subject>Computational and Systems Biology</subject>
</subj-group>
</article-categories>
<title-group>
<article-title>OpenSpliceAI: An efficient, modular implementation of SpliceAI enabling easy retraining on non-human species</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-0099-0692</contrib-id>
<name>
<surname>Chao</surname>
<given-names>Kuan-Hao</given-names>
</name>
<xref ref-type="aff" rid="a1">1</xref>
<xref ref-type="aff" rid="a2">2</xref>
<xref ref-type="author-notes" rid="n1">†</xref>
<email>kh.chao@cs.jhu.edu</email>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-2381-0607</contrib-id>
<name>
<surname>Mao</surname>
<given-names>Alan</given-names>
</name>
<xref ref-type="aff" rid="a1">1</xref>
<xref ref-type="aff" rid="a2">2</xref>
<xref ref-type="aff" rid="a3">3</xref>
<xref ref-type="author-notes" rid="n1">†</xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-0468-5698</contrib-id>
<name>
<surname>Liu</surname>
<given-names>Anqi</given-names>
</name>
<xref ref-type="aff" rid="a1">1</xref>
</contrib>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-8859-7432</contrib-id>
<name>
<surname>Salzberg</surname>
<given-names>Steven L</given-names>
</name>
<xref ref-type="aff" rid="a1">1</xref>
<xref ref-type="aff" rid="a2">2</xref>
<xref ref-type="aff" rid="a3">3</xref>
<xref ref-type="aff" rid="a4">4</xref>
<email>salzberg@jhu.edu</email>
</contrib>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-0762-8637</contrib-id>
<name>
<surname>Pertea</surname>
<given-names>Mihaela</given-names>
</name>
<xref ref-type="aff" rid="a1">1</xref>
<xref ref-type="aff" rid="a2">2</xref>
<xref ref-type="aff" rid="a3">3</xref>
<email>mpertea@jhu.edu</email>
</contrib>
<aff id="a1"><label>1</label><institution-wrap><institution-id institution-id-type="ror">https://ror.org/00za53h95</institution-id><institution>Department of Computer Science, Johns Hopkins University</institution></institution-wrap>, <city>Baltimore</city>, <country country="US">United States</country></aff>
<aff id="a2"><label>2</label><institution-wrap><institution-id institution-id-type="ror">https://ror.org/00za53h95</institution-id><institution>Center for Computational Biology, Johns Hopkins University</institution></institution-wrap>, <city>Baltimore</city>, <country country="US">United States</country></aff>
<aff id="a3"><label>3</label><institution-wrap><institution-id institution-id-type="ror">https://ror.org/00za53h95</institution-id><institution>Department of Biomedical Engineering, Johns Hopkins University</institution></institution-wrap>, <city>Baltimore</city>, <country country="US">United States</country></aff>
<aff id="a4"><label>4</label><institution-wrap><institution-id institution-id-type="ror">https://ror.org/00za53h95</institution-id><institution>Department of Biostatistics, Johns Hopkins University</institution></institution-wrap>, <city>Baltimore</city>, <country country="US">United States</country></aff>
</contrib-group>
<contrib-group content-type="section">
<contrib contrib-type="editor">
<name>
<surname>Koo</surname>
<given-names>Peter</given-names>
</name>
<role>Reviewing Editor</role>
<aff>
<institution-wrap>
<institution>Cold Spring Harbor Laboratory</institution>
</institution-wrap>
<city>Cold Spring Harbor</city>
<country>United States of America</country>
</aff>
</contrib>
<contrib contrib-type="senior_editor">
<name>
<surname>Weigel</surname>
<given-names>Detlef</given-names>
</name>
<role>Senior Editor</role>
<aff>
<institution-wrap>
<institution>Max Planck Institute for Biology Tübingen</institution>
</institution-wrap>
<city>Tübingen</city>
<country>Germany</country>
</aff>
</contrib>
</contrib-group>
<author-notes>
<fn id="n1" fn-type="equal"><label>†</label><p>These authors contributed equally</p></fn>
<fn fn-type="coi-statement"><p>Competing interests: No competing interests declared</p></fn>
</author-notes>
<pub-date date-type="original-publication" iso-8601-date="2025-07-22">
<day>22</day>
<month>07</month>
<year>2025</year>
</pub-date>
<pub-date date-type="update" iso-8601-date="2025-09-09">
<day>09</day>
<month>09</month>
<year>2025</year>
</pub-date>
<volume>14</volume>
<elocation-id>RP107454</elocation-id>
<history>
<date date-type="sent-for-review" iso-8601-date="2025-05-06">
<day>06</day>
<month>05</month>
<year>2025</year>
</date>
</history>
<pub-history>
<event>
<event-desc>Preprint posted</event-desc>
<date date-type="preprint" iso-8601-date="2025-03-23">
<day>23</day>
<month>03</month>
<year>2025</year>
</date>
<self-uri content-type="preprint" xlink:href="https://doi.org/10.1101/2025.03.20.644351"/>
</event>
<event>
<event-desc>Reviewed preprint v1</event-desc>
<date date-type="reviewed-preprint" iso-8601-date="2025-07-22">
<day>22</day>
<month>07</month>
<year>2025</year>
</date>
<self-uri content-type="reviewed-preprint" xlink:href="https://doi.org/10.7554/eLife.107454.1"/>
<self-uri content-type="editor-report" xlink:href="https://doi.org/10.7554/eLife.107454.1.sa4">eLife Assessment</self-uri>
<self-uri content-type="referee-report" xlink:href="https://doi.org/10.7554/eLife.107454.1.sa3">Reviewer #1 (Public review):</self-uri>
<self-uri content-type="referee-report" xlink:href="https://doi.org/10.7554/eLife.107454.1.sa2">Reviewer #2 (Public review):</self-uri>
<self-uri content-type="referee-report" xlink:href="https://doi.org/10.7554/eLife.107454.1.sa1">Reviewer #3 (Public review):</self-uri>
<self-uri content-type="author-comment" xlink:href="https://doi.org/10.7554/eLife.107454.1.sa0">Author response:</self-uri>
</event>
</pub-history>
<permissions>
<copyright-statement>© 2025, Chao et al</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>Chao et al</copyright-holder>
<ali:free_to_read/>
<license xlink:href="https://creativecommons.org/licenses/by/4.0/">
<ali:license_ref>https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
<license-p>This article is distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution License</ext-link>, which permits unrestricted use and redistribution provided that the original author and source are credited.</license-p>
</license>
</permissions>
<self-uri content-type="pdf" xlink:href="elife-preprint-107454-v2.pdf"/>
<abstract>
<title>Abstract</title><p>The SpliceAI deep learning system is currently one of the most accurate methods for identifying splicing signals directly from DNA sequences. However, its utility is limited by its reliance on older software frameworks and human-centric training data. Here we introduce OpenSpliceAI, a trainable, open-source version of SpliceAI implemented in PyTorch to address these challenges. OpenSpliceAI supports both training from scratch and transfer learning, enabling seamless retraining on species-specific datasets and mitigating human-centric biases. Our experiments show that it achieves faster processing speeds and lower memory usage than the original SpliceAI code, allowing large-scale analyses of extensive genomic regions on a single GPU. Additionally, OpenSpliceAI’s flexible architecture makes for easier integration with established machine learning ecosystems, simplifying the development of custom splicing models for different species and applications. We demonstrate that OpenSpliceAI’s output is highly concordant with SpliceAI. <italic>In silico</italic> mutagenesis (ISM) analyses confirm that both models rely on similar sequence features, and calibration experiments demonstrate similar score probability estimates.</p>
</abstract>
<funding-group>
<award-group id="funding-1">
<funding-source>
<institution-wrap>
<institution-id institution-id-type="ror">https://ror.org/01cwqze88</institution-id>
<institution>National Institutes of Health</institution>
</institution-wrap>
</funding-source>
<award-id>R01-HG006677</award-id>
</award-group>
<award-group id="funding-1a">
<funding-source>
<institution-wrap>
<institution-id institution-id-type="ror">https://ror.org/01cwqze88</institution-id>
<institution>National Institutes of Health</institution>
</institution-wrap>
</funding-source>
<award-id>R35-GM130151</award-id>
</award-group>
<award-group id="funding-1b">
<funding-source>
<institution-wrap>
<institution-id institution-id-type="ror">https://ror.org/01cwqze88</institution-id>
<institution>National Institutes of Health</institution>
</institution-wrap>
</funding-source>
<award-id>R35-GM156470</award-id>
</award-group>
<award-group id="funding-2">
<funding-source>
<institution-wrap>
<institution-id institution-id-type="ror">https://ror.org/021nxhr62</institution-id>
<institution>National Science Foundation</institution>
</institution-wrap>
</funding-source>
<award-id>DBI2412449</award-id>
</award-group>
<award-group id="funding-2a">
<funding-source>
<institution-wrap>
<institution-id institution-id-type="ror">https://ror.org/021nxhr62</institution-id>
<institution>National Science Foundation</institution>
</institution-wrap>
</funding-source>
<award-id>OAC 1920103</award-id>
</award-group>
</funding-group>
<custom-meta-group>
<custom-meta specific-use="meta-only">
<meta-name>publishing-route</meta-name>
<meta-value>prc</meta-value>
</custom-meta>
</custom-meta-group>
</article-meta>
<notes>
<fn-group content-type="summary-of-updates">
<title>Summary of Updates:</title>
<fn fn-type="update"><p>We have updated the Results section titled &quot;Comparing OSAIMANE and SpliceAI via variant effects of in silico mutagenesis&quot; to include a new ISM analysis and updated supplemental figures.</p></fn>
</fn-group>
</notes>
</front>
<body>
<sec id="s1">
<title>Introduction</title>
<p>Predicting splice sites within primary DNA sequences has a wide range of uses, including understanding gene regulation, identifying alternative protein isoforms, and detecting sequence variants that affect splicing (<xref ref-type="bibr" rid="c7">Black, 2000</xref>; <xref ref-type="bibr" rid="c10">Braunschweig et al., 2013</xref>; <xref ref-type="bibr" rid="c54">Wagner et al., 2023</xref>, <xref ref-type="bibr" rid="c54">2023</xref>; <xref ref-type="bibr" rid="c58">Xiong et al., 2015</xref>). Splicing is a complex and tightly regulated process that enables the production of multiple protein isoforms from a single gene, contributing to cellular complexity, adaptability and diversity across different cells and tissues (<xref ref-type="bibr" rid="c8">Blencowe, 2006</xref>; <xref ref-type="bibr" rid="c23">Johnson et al., 2003</xref>; <xref ref-type="bibr" rid="c55">Wang et al., 2008</xref>).</p>
<p>Aberrant splicing regulation can contribute to a wide range of diseases, including some types of cancer (<xref ref-type="bibr" rid="c9">Bonnal et al., 2020</xref>; <xref ref-type="bibr" rid="c24">Jung et al., 2015</xref>; <xref ref-type="bibr" rid="c29">Lee and Abdel-Wahab, 2016</xref>; <xref ref-type="bibr" rid="c52">Supek et al., 2014</xref>; <xref ref-type="bibr" rid="c53">Sveen et al., 2016</xref>), neurodegenerative disorders (<xref ref-type="bibr" rid="c30">Li et al., 2021</xref>; <xref ref-type="bibr" rid="c39">Mills and Janitz, 2012</xref>; <xref ref-type="bibr" rid="c44">Nikom and Zheng, 2023</xref>), cardiovascular diseases (<xref ref-type="bibr" rid="c18">Gotthardt et al., 2023</xref>; <xref ref-type="bibr" rid="c37">Martí-Gómez et al., 2022</xref>), metabolic syndromes (<xref ref-type="bibr" rid="c14">Dlamini et al., 2017</xref>; <xref ref-type="bibr" rid="c40">Moore et al., 2010</xref>), and various genetic conditions (<xref ref-type="bibr" rid="c50">Segal and Widom, 2009</xref>; <xref ref-type="bibr" rid="c58">Xiong et al., 2015</xref>). Notably, Duchenne muscular dystrophy (<xref ref-type="bibr" rid="c1">Aartsma-Rus et al., 2002</xref>; <xref ref-type="bibr" rid="c38">Mcclorey et al., 2005</xref>) and spinal muscular atrophy (<xref ref-type="bibr" rid="c13">Burnett et al., 2009</xref>; <xref ref-type="bibr" rid="c33">Lorson et al., 1999</xref>; <xref ref-type="bibr" rid="c43">Naryshkin et al., 2014</xref>) are well-known examples of disorders arising from splicing defects. It has been estimated that 15% to 50% of disease-causing mutations in humans influence splice site selection (<xref ref-type="bibr" rid="c5">Baralle and Giudice, 2017</xref>; <xref ref-type="bibr" rid="c6">Barash et al., 2010</xref>; <xref ref-type="bibr" rid="c56">Wang and Cooper, 2007</xref>), underscoring the critical need for precise modeling of splicing regulation at the DNA level and accurate interpretation of model predictions.</p>
<p>Building on advancements in deep learning, particularly convolutional neural networks (CNNs), genomics researchers have made substantial progress in modeling complex, long-range dependencies in DNA sequences. These models have driven significant improvements in predictive accuracy across diverse applications, including regulatory grammar (<xref ref-type="bibr" rid="c4">Alipanahi et al., 2015</xref>; <xref ref-type="bibr" rid="c25">Kelley et al., 2018</xref>, <xref ref-type="bibr" rid="c26">2016</xref>; <xref ref-type="bibr" rid="c61">Zhou et al., 2018</xref>; <xref ref-type="bibr" rid="c62">Zhou and Troyanskaya, 2015</xref>), 3D genome organization (<xref ref-type="bibr" rid="c17">Fudenberg et al., 2020</xref>), mRNA stability (<xref ref-type="bibr" rid="c3">Agarwal and Kelley, 2022</xref>), and notably, splice site prediction (<xref ref-type="bibr" rid="c21">Jaganathan et al., 2019</xref>; <xref ref-type="bibr" rid="c51">Sokolova et al., 2024</xref>). Among these, SpliceAI (<xref ref-type="bibr" rid="c21">Jaganathan et al., 2019</xref>) stands out as the leading tool for splice site prediction, applying a deep residual CNN architecture to identify patterns dictating splicing mechanisms directly from primary sequences without relying on human-engineered features.</p>
<p>Despite its success, SpliceAI has limitations that hinder its broader application. The official implementation relies on an outdated version of TensorFlow (<xref ref-type="bibr" rid="c2">Abadi et al., 2016</xref>) and Keras, which may not function well with newer machine learning frameworks such as PyTorch (<xref ref-type="bibr" rid="c45">Paszke et al., 2019</xref>), which has been widely adopted in recent years. Additionally, SpliceAI’s use of human training data limits its performance on non- human species, suggesting that a retrained module could provide substantial advantages for those wishing to use it on model organisms or other species.</p>
<p>To address these limitations, we developed OpenSpliceAI, a trainable open-source implementation of SpliceAI in PyTorch. OpenSpliceAI supports both training from scratch and transfer-learning approaches, making it adaptable to species-specific datasets. As we show in our experiments below, OpenSpliceAI offers faster processing speed, reduced memory usage, and efficient GPU utilization, enabling analysis of long sequences and large datasets on a single GPU. In silico mutagenesis (ISM) analyses revealed the features that both SpliceAI and OpenSpliceAI rely on for making predictions. Calibration experiments showed that OpenSpliceAI models are well-calibrated, improving the reliability of splice site predictions.</p>
</sec>
<sec id="s2">
<title>Results</title>
<sec id="s2a">
<title>OpenSpliceAI: an open-source splice site prediction framework in Pytorch</title>
<p>Our new system, which we call OpenSpliceAI, is a suite of modular Python scripts that provide researchers with a user-friendly computational framework to study RNA splicing. OpenSpliceAI is an open-source version of SpliceAI, a highly accurate splice site prediction method (<xref ref-type="bibr" rid="c21">Jaganathan et al., 2019</xref>). By replacing TensorFlow and Keras with the more-efficient PyTorch framework, OpenSpliceAI offers improved performance, scalability, and compatibility with current machine learning workflows (see Discussion).</p>
<p>The framework faithfully replicates SpliceAI’s architecture while extending its functionality. It is important to note that the models produced by OpenSpliceAI and the original SpliceAI are not identical. Variations in weight initialization, data shuffling, batch normalization, and optimizer stochasticity introduce subtle differences between the models, as discussed in detail in the Discussion section. Additionally, we provide new modules for training the network, allowing for easy retraining on other species, which we show provides more accurate performance on those species. OpenSpliceAI supports custom model training on long DNA sequences and offers both training-from-scratch and transfer-learning approaches to adapt models to species- specific datasets. We also conducted experiments to analyze the effects of DNA mutations on OpenSpliceAI’s predicted scores for donor and acceptor sites, and show how to use it to identify cryptic splicing events, where a mutation can activate a normally dormant splice site.</p>
<p>To streamline its use, OpenSpliceAI offers six subcommands for data preprocessing, model training, transfer learning, calibration, prediction, and variant analysis (see <xref rid="fig1" ref-type="fig">Figure 1</xref>). Detailed functionalities of each module are described in Methods.</p>
<fig id="fig1" position="float" orientation="portrait" fig-type="figure">
<label>Figure 1</label>
<caption><title>Overview of the OpenSpliceAI design. This toolkit features six primary subcommands:</title><p><bold>(A)</bold> The “<monospace>create-data</monospace>” subcommand processes genome annotations in GFF/GTF format and genome sequences in FASTA format to produce one-hot encoded gene sequences (<monospace>X</monospace>) and corresponding labels (<monospace>Y</monospace>), both stored in HDF5 format. <bold>(B)</bold> The “<monospace>train</monospace>” subcommand utilizes the HDF5 files generated by “<monospace>create-data</monospace>” to train the SpliceAI model using PyTorch, resulting in a serialized model in PT format. This process also generates logs for training, testing, and validation. <bold>(C)</bold> The “<monospace>calibrate</monospace>” subcommand takes both training and test datasets along with a pre-trained model in PT format. It randomly allocates 10% of the training data as a validation (calibration) set, which is then used to adjust the model’s output probabilities so that they more accurately reflect the observed empirical probabilities during evaluation on the test set. <bold>(D)</bold> The “<monospace>transfer</monospace>” subcommand allows for model customization using a dataset from a different species, requiring a pre-trained model in PT format and HDF5 files for transfer learning and testing. <bold>(E)</bold> The “<monospace>predict</monospace>” subcommand enables users to predict splice site probabilities for sequences in given FASTA files. <bold>(F)</bold> The “<monospace>variant</monospace>” subcommand assesses the impact of potential SNPs and indels on splice sites using VCF format files, providing predicted cryptic splice sites.</p></caption>
<graphic xlink:href="644351v2_fig1.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
</sec>
<sec id="s2b">
<title>Training OpenSpliceAI with Human MANE annotation</title>
<p>Using the OpenSpliceAI framework, we trained a new Pytorch version of SpliceAI using protein-coding genes annotated in the RefSeq MANE v1.3 database (<ext-link ext-link-type="uri" xlink:href="https://ftp.ncbi.nlm.nih.gov/refseq/MANE/MANE_human/release_1.3/MANE.GRCh38.v1.3.refseq_genomic.gff.gz">https://ftp.ncbi.nlm.nih.gov/refseq/MANE/MANE_human/release_1.3/MANE.GRCh38.v1.3.refseq_genomic.gff.gz</ext-link>). MANE provides a standardized set of human gene annotations covering nearly all known protein-coding genes, with one transcript per gene, and ensures that the transcripts are represented identically in the RefSeq and Ensembl/GENCODE annotations of the GRCh38 human reference genome (<xref ref-type="bibr" rid="c41">Morales et al., 2022</xref>).</p>
<p>Gene sequences and splice site labels from MANE annotations were extracted and one-hot encoded into tensors for OpenSpliceAI training. Models were trained using flanking sequences of 80, 400, 2,000, and 10,000 nucleotides, with five models trained for each sequence length (see <xref rid="fig2" ref-type="fig">Figure 2A</xref>). OpenSpliceAI assigns a score to each position that is an estimate of the probability that the position is a donor site, acceptor site, or neither (see <xref rid="fig2" ref-type="fig">Figure 2B</xref> and Methods). In this setup, “OpenSpliceAI” refers to the reimplemented framework, “OSAI” refers to the model, and “OSAI<sub>MANE</sub>” denotes the model trained specifically with the MANE annotation. “SpliceAI-Keras” denotes the original published SpliceAI model, which was trained using the canonical transcripts from GENCODE version V24lift37 from the hg19/GRCh37 reference genome.</p>
<fig id="fig2" position="float" orientation="portrait" fig-type="figure">
<label>Figure 2</label>
<caption><p><bold>(A)</bold> Schematic overview of OpenSpliceAI’s approach. Gene sequences are first extracted from the genome FASTA file and one-hot encoded (<italic>X</italic>). Splice sites are identified and labeled using the annotation file (<italic>Y</italic>). The resulting paired data (<italic>X</italic>, <italic>Y</italic>) for each gene is then compiled for model training (80% of the sequences) and testing (20% of the sequences). <bold>(B)</bold> Workflow of the OSAIMANE 10,000 model. Input sequences are one-hot encoded and padded with 5,000 Ns ([0,0,0,0]) on each side, totaling 10,000 Ns. The model processes the input and outputs, for each position, the probability of that position being a donor site, an acceptor site, or neither. <bold>(C-D)</bold> Performance comparison between OSAIMANE and SpliceAI-Keras on splicing donor and acceptor sites, trained with 80nt, 400nt, 2,000nt, and 10,000nt flanking sequences. Evaluation metrics include top-1 accuracy for both donor and acceptor sites. Blue curves represent SpliceAI-Keras, while orange curves represent OSAIMANE. Each dot represents the average score with error bars indicating ± one standard error. Performance is compared across test datasets from human. <bold>(E)</bold> Benchmarking results for elapsed time, average memory usage, and GPU peak memory for the <monospace>prediction</monospace> submodule.</p></caption>
<graphic xlink:href="644351v2_fig2.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
<p>To compare the performance of OSAI<sub>MANE</sub> and SpliceAI-Keras, both models were evaluated on a held-out test set comprising genes from MANE annotations on GRCh38 chromosomes 1, 3, 5, 7, and 9. Paralogous genes were excluded to prevent data leakage by aligning the test set against the training sets of both models (Methods). OSAI<sub>MANE</sub> (<xref rid="fig2" ref-type="fig">Figure 2C-D</xref>, orange curve) showed performance comparable to SpliceAI-Keras (<xref rid="fig2" ref-type="fig">Figure 2C-D</xref>, blue curve) across metrics, including top-1 accuracy, area under the precision-recall curve (AUPRC), precision, recall, and F1 score for donor and acceptor splice sites (<xref rid="figs1" ref-type="fig">Figure S1</xref>, Methods). Results are presented as error bar plots showing the mean and ± one standard error for each metric.</p>
<p>The best-performing OSAI<sub>MANE</sub> model, trained with 10,000-nt flanking sequences, demonstrated slight yet consistent improvements over SpliceAI-Keras across all metrics (<xref rid="fig2" ref-type="fig">Figure 2</xref> and <xref rid="figs1" ref-type="fig">Figure S1</xref>). Specifically, it achieved a top-1 accuracy increase of 1.25% for donor sites and 1.56% for acceptor sites, an F1 score gain of 1.20% for donor sites and 1.04% for acceptor sites, and an AUPRC improvement of 1.90% for donor sites and 1.76% for acceptor sites.</p>
<p>Performance improved with longer flanking sequences, consistent with previous SpliceAI findings. The largest gains occurred between 80 and 400 nt, with accuracy increasing by 62% for donor sites and 74% for acceptor sites. In comparison, improvements were smaller between 400 nt and 2000 nt (3.2% for donors and 2.5% for acceptors) and between 2000 nt and 10,000 nt (3.8% for donors and 4.2% for acceptors). Cross- species evaluations with mouse (<xref rid="figs2" ref-type="fig">Figure S2</xref>), honeybee (<xref rid="figs3" ref-type="fig">Figure S3</xref>), zebrafish (<xref rid="figs4" ref-type="fig">Figure S4</xref>), and Arabidopsis (<xref rid="figs5" ref-type="fig">Figure S5</xref>) test sets confirmed comparable performance across species.</p>
<p>OpenSpliceAI supports both targeted splice site prediction and genome-wide predictions across full chromosomes. Its variant submodule enables researchers to assess the splicing impacts of specific variants, such as acceptor and donor site gains or losses, using pre-trained models. Our performance benchmarks of the <monospace>predict</monospace> (<xref rid="fig2" ref-type="fig">Figure 2E</xref> and <xref rid="figs6" ref-type="fig">Figure S6A-F</xref>) and <monospace>variant</monospace> (<xref rid="figs6" ref-type="fig">Figure S6G-L</xref>) submodules demonstrate that OSAI outperforms SpliceAI in processing speed, memory usage, and GPU efficiency (see Discussion).</p>
</sec>
<sec id="s2c">
<title>Retraining models with different species using OpenSpliceAI framework</title>
<p>To assess whether SpliceAI can generalize across different species and to demonstrate the ease of retraining models with OpenSpliceAI, we selected four model organisms representing diverse taxa: a mammal (mouse, <italic>Mus musculus</italic>), an insect (honeybee, <italic>Apis mellifera</italic>), a freshwater fish (zebrafish, <italic>Danio rerio</italic>), and a flowering plant (thale cress, <italic>Arabidopsis thaliana</italic>). Using OpenSpliceAI with the same training hyperparameters as the human model, we trained species-specific models that we designated OSAI<sub>Mouse</sub>, OSAI<sub>Zebrafish</sub>, OSAI<sub>Honeybee</sub>, and OSAI<sub>Arabidopsis</sub> (see <xref rid="tbl1" ref-type="table">Table 1</xref> and Supplemental Note S1-S5).</p>
<table-wrap id="tbl1" orientation="portrait" position="float">
<label>Table 1.</label>
<caption><title>Genome assembly and annotation details for species used for OpenSpliceAI training and transfer-learning in this study.</title><p>Note: For each species, the table includes the GenBank accession number, assembly name, ftp sites for assembly and annotation downloads, and annotation release dates.</p></caption>
<graphic xlink:href="644351v2_tbl1.tif" mime-subtype="tiff" mimetype="image"/>
</table-wrap>
<p>Training and test sets for each species were generated using the “<monospace>create-data</monospace>” submodule (Methods). Due to differences in genome sizes across species, we report the number of protein-coding genes used for training and testing in each model (<xref rid="fig3" ref-type="fig">Figure 3A</xref>), along with statistics on the ratio of canonical to non-canonical splice sites (<xref rid="figs7" ref-type="fig">Figure S7A</xref>) and intron length distributions (<xref rid="figs7" ref-type="fig">Figure S7B</xref>) for human-MANE and the four other selected species. To ensure that the test sets did not contain paralogs of the training sets, OpenSpliceAI aligns them using minimap2 (<xref ref-type="bibr" rid="c31">Li, 2018</xref>) and excludes test sequences with over 80% similarity and coverage to the training sequences, and enforces a 20% sequence diversity threshold (see Methods). In its original paper, SpliceAI was evaluated on a test set containing genes from human chromosomes 1, 3, 5, 7, and 9, which the Ensembl database (<ext-link ext-link-type="uri" xlink:href="http://grch37.ensembl.org/biomart/martview">http://grch37.ensembl.org/biomart/martview</ext-link>) classifies as free of paralogs. However, applying our paralog removal criteria, we found that 0.71% of the MANE transcripts from these chromosomes were paralogous to training set sequences. In other species, the proportion of removed paralogous sequences was 3.86% for mouse, 31.97% for zebrafish, 0.08% for honeybee, and 2.26% for <italic>Arabidopsis</italic> (<xref rid="fig3" ref-type="fig">Figure 3B</xref>).</p>
<fig id="fig3" position="float" orientation="portrait" fig-type="figure">
<label>Figure 3</label>
<caption><p><bold>(A)</bold> The number of protein-coding genes in the training and test sets, along with the count of paralogous genes removed for each species: Human-MANE, mouse, zebrafish, honeybee, and <italic>Arabidopsis.</italic> <bold>(B)</bold> Scatter plots of DNA sequence alignments between testing and training sets for Human-MANE, mouse, honeybee, zebrafish, and <italic>Arabidopsis</italic>. Each dot represents an alignment, with the x-axis showing alignment identity and the y-axis showing alignment coverage. Alignments exceeding 80% for both identity and coverage are highlighted in the red-shaded region and excluded from the test sets. <bold>(C-F)</bold> Performance comparisons of OSAIs trained on species-specific datasets (mouse, zebrafish, honeybee and <italic>Arabidopsis</italic>) versus SpliceAI-Keras, original published SpliceAI models, trained on human data. The orange curves represent OSAI metrics, while the blue curves show SpliceAI-Keras metrics. Each subplot <bold>(C-F)</bold> includes F1 score evaluated separately for donor and acceptor sites.</p></caption>
<graphic xlink:href="644351v2_fig3.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
<p>As we did with OSAI<sub>MANE</sub>, we retrained each species model five times using different random seeds (10– 14) and evaluated performance based on top-1 accuracy, F1 scores, precision, recall, and AUPRC for donor and acceptor sites. The results for OSAI<sub>Mouse</sub>, OSAI<sub>Zebrafish</sub>, OSAI<sub>Honeybee</sub>, and OSAI<sub>Arabidopsis</sub> are shown in <xref rid="fig3" ref-type="fig">Figure 3</xref> and Figures S8–S11. We calculated the average percentage improvement across all flanking sequence sizes for donor and acceptor sites under four flanking sequence lengths. On average, OSAI outperformed SpliceAI-Keras by 2% in mouse, 54% in honeybee, 19% in zebrafish, and 57% in <italic>Arabidopsis</italic>.</p>
<p>The human and mouse genomes share a majority of their protein-coding genes (<xref ref-type="bibr" rid="c42">Mouse Genome Sequencing Consortium, 2002</xref>). This conserved evolutionary relationship likely explains the comparable performance of OSAI<sub>Mouse</sub> and SpliceAI-Keras. In contrast, OSAIs that had been retrained substantially outperformed SpliceAI-Keras in more distantly related species, particularly in honeybee, zebrafish, and <italic>Arabidopsis</italic> (see Discussion).</p>
</sec>
<sec id="s2d">
<title>Adapting OSAIMANE to different species via transfer learning</title>
<p>Transfer learning can improve model performance by leveraging knowledge from related source domains (<xref ref-type="bibr" rid="c63">Zhuang et al., 2021</xref>). In the context of splice site prediction, we tested whether OSAI<sub>MANE</sub>, initially trained on human splice annotations, could be effectively adapted to predict splice sites across other species.</p>
<p>We evaluated four species – <italic>M. musculus</italic>, <italic>A. mellifera</italic>, <italic>D. rerio</italic>, and <italic>A. thaliana</italic> – by fine-tuning five distinct pre-trained OSAI<sub>MANE</sub> models for each species. For every species, each pre-trained model was fine-tuned using the same training and test datasets, yielding five transfer-trained variants. These variants – collectively referred to as OSAI<sub>Mouse</sub>-transfer, OSAI<sub>Honeybee</sub>-transfer, OSAI<sub>Zebrafish</sub>-transfer, and OSAI<sub>Arabidopsis</sub>-transfer – were directly compared with models trained from scratch (OSAI<sub>Mouse</sub>, OSAI<sub>Honeybee</sub>, OSAI<sub>Zebrafish</sub>, and OSAI<sub>Arabidopsis</sub>) to assess the benefits of transfer learning. For each species, we trained transfer-learned models using flanking sequences of 80 nt, 400 nt, 2,000 nt, and 10,000 nt. We then compared the performance of transfer-trained and scratch-trained models by evaluating top-1 accuracy for donor and acceptor splice site predictions across four lengths of flanking sequences: 80, 400, 2000, and 10000 nt (<xref rid="fig4" ref-type="fig">Figure 4A-D</xref>). Full results, including top-1 accuracy, F1 score, and AUPRC for donor and acceptor splice sites are provided in supplementary Figures S12–S15.</p>
<fig id="fig4" position="float" orientation="portrait" fig-type="figure">
<label>Figure 4</label>
<caption><title>Performance comparison of scratch-trained and transfer-trained OSAIs across species and sequence lengths.</title><p><bold>(A-D)</bold> Top- 1 accuracy for donor and acceptor splice sites of 80 nt, 400 nt, 2,000 nt, and 10,000 nt models, comparing OSAIMouse (scratch- trained) and OSAIMouse-transferred (transfer-trained) models over epochs 1 to 10 on the test dataset. <bold>(E-H)</bold> Top-1 accuracy after one epoch of training versus after ten epochs for both scratch-trained and transfer-trained models across the same sequence lengths. Each plot represents one species and its corresponding transfer-trained model: <bold>(E)</bold> OSAIMouse vs. OSAIMouse-transferred, <bold>(F)</bold> OSAIZebrafish vs. OSAIZebrafish-transferred, <bold>(G)</bold> OSAIArabidopsis vs. OSAIArabidopsis-transferred, and <bold>(H)</bold> OSAIHoneybee vs. OSAIHoneybee- transferred.</p></caption>
<graphic xlink:href="644351v2_fig4.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
<p>Across all configurations, transfer-trained models consistently outperformed scratch-trained models in both accuracy and training stability, as evidenced by higher top-1 accuracies and lower standard errors across the five pre-trained models. Notably, transfer-trained models achieved near-optimal performance after just one epoch, while scratch-trained models required ten epochs to reach comparable results and showed substantial performance gaps between one and ten epochs (<xref rid="fig4" ref-type="fig">Figure 4E–H</xref>). Moreover, transfer learning also solved a convergence issue for one data set: in the <italic>A. thaliana</italic> scratch-training experiments using 10k flanking sequences, the CosineAnnealingWarmRestarts scheduler led to unstable optimization. Although switching to MultiStepLR with learning rate decay improved stability, convergence still took a very long time. Notably, transfer learning did not display this problem. See the Methods section for training parameters.</p>
<p>After ten epochs, transfer-trained models slightly outperformed their scratch-trained counterparts for <italic>Arabidopsis</italic> and honeybee, the two species with the smallest genome sizes among those tested. These results suggests that pretraining improves generalization, particularly for compact genomes.</p>
</sec>
<sec id="s2e">
<title>Calibrating OpenSpliceAI models</title>
<p>Model calibration helps align predicted probabilities with the true likelihood of observed outcomes, thereby mitigating the risk of overconfident or underconfident predictions. Here, we applied class-wise temperature scaling, a single-parameter variant of Platt scaling, to adjust each class’s predicted probabilities without altering the model’s classification performance (see Methods). We calibrated OSAI<sub>MANE</sub> models on the validation set and subsequently evaluated them on the test set.</p>
<p>We then compared OSAI<sub>MANE</sub> models before and after calibration using reliability diagrams (<xref rid="fig5" ref-type="fig">Figure 5A</xref> and <xref rid="figs16" ref-type="fig">Figure S16</xref>), which show reliability curves for non-splice, acceptor, and donor sites of OSAI<sub>MANE</sub> trained with flanking sequence lengths of 80, 400, 2000, and 10,000 nt, with the calibration temperature (<italic>T</italic>s) in the legend. Calibration quality was quantified using negative log-likelihood (NLL) loss and expected calibration error (ECE). For each species, metrics were averaged over five calibrated models, and the results indicated slight improvements in both measures following calibration (<xref rid="fig5" ref-type="fig">Figure 5B</xref>, <xref rid="figs17" ref-type="fig">Figure S17</xref>–<xref rid="figs18" ref-type="fig">S18</xref>; see Methods). Temperature parameters greater than one indicated overconfidence, whereas values below one indicated underconfidence. After calibration, score distributions for donor and acceptor sites shifted slightly away from extreme values (1 and 0), resulting in smoother probability distributions (<xref rid="fig5" ref-type="fig">Figure 5C</xref>).</p>
<fig id="fig5" position="float" orientation="portrait" fig-type="figure">
<label>Figure 5</label>
<caption><p><bold>(A)</bold> Calibration results for OSAIMANE across non-splice sites, acceptor sites, and donor sites. Models trained with different flanking sequence lengths are represented by color: 80 nt (blue), 400 nt (green), 2,000 nt (orange), and 10,000 nt (red). Dotted curves in lighter colors denote pre-calibration results, while solid curves in darker shades show post-calibration results. <bold>(B)</bold> Expected calibration error (ECE) on the validation set (top) and test set (bottom), comparing the OSAIMANE’s performance before (blue bars) and after (orange bars) calibration. For each flanking sequence OSAIMANE, five calibration experiments were performed, with the mean loss and <italic>±</italic> one standard error. <bold>(C)</bold> Two-dimensional calibration map for OSAIMANE, illustrating how raw predicted probabilities for acceptor (x-axis) and donor (y-axis) sites are transformed after calibration. Arrows indicate the shift from pre- to post-calibration states in two-dimensional probability space, resulting in a smoother probability distribution.</p></caption>
<graphic xlink:href="644351v2_fig5.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
<p>We observed similar outcomes when calibrating OSAIs on mouse (<xref rid="figs19" ref-type="fig">Figure S19</xref>), honeybee (<xref rid="figs20" ref-type="fig">Figure S20</xref>), zebrafish (<xref rid="figs21" ref-type="fig">Figure S21</xref>), and <italic>Arabidopsis</italic> (<xref rid="figs22" ref-type="fig">Figure S22</xref>). We observed very small changes after calibration across phylogenetically diverse species, suggesting that OpenSpliceAI’s training regimen yielded well-calibrated models, although it is possible that a different calibration algorithm might produce further improvements in performance.</p>
</sec>
<sec id="s2f">
<title>Comparing OSAIMANE and SpliceAI via variant effects of <italic>in silico</italic> mutagenesis</title>
<p>A crucial finding of <xref ref-type="bibr" rid="c21">Jaganathan et al., 2019</xref> was that SpliceAI was capable of capturing non-local effects of genomic mutations on splice site location and strength. In order to show that OSAI<sub>MANE</sub> has the same capabilities, we recreated several of their studies, as well as a large-scale <italic>in silico</italic> mutagenesis (ISM) experiment aimed at elucidating the model’s learned splice site recognition pattern.</p>
<p>First, we recreated the experiment from Jaganathan <italic>et al</italic>. in which they mutated every base in a window around exon 9 of the U2SURP gene and calculated its impact on the predicted probability of the acceptor site. We repeated this experiment on exon 2 of the DST gene, again using both SpliceAI and OSAI<sub>MANE</sub>. In both cases, we found a strong similarity between the resultant patterns between SpliceAI and OSAI<sub>MANE</sub>, as shown in <xref rid="fig6" ref-type="fig">Figure 6A</xref>. To evaluate concordance more broadly, we randomly selected 100 donor and 100 acceptor sites and performed the same ISM experiment on each site. The Pearson correlation between SpliceAI and OSAI<sub>MANE</sub> yielded an overall median correlation of 0.857 (see Methods; additional DNA logos in <xref rid="figs23" ref-type="fig">Figure S23</xref>).</p>
<fig id="fig6" position="float" orientation="portrait" fig-type="figure">
<label>Figure 6</label>
<caption><p><bold>(A)</bold> Plot of importance scores for nucleotides near the acceptor site of exon 9 of U2SURP (top) and DST (bottom), for both SpliceAI and OSAIMANE. The importance score is calculated by taking the average decrease in acceptor site score across the three possible point mutations at a given base position. <bold>(B)</bold> Plot of the impact of each possible point mutation within 80 bp of a donor (top) site or acceptor (bottom) site, for both SpliceAI and OSAIMANE. The impact is the raw decrease in predicted splice site score after mutating a given base to a different one. <bold>(C)</bold> Visualization of cryptic splicing variants being predicted for the MYBPC3 gene (top), with an acceptor site gain and loss event, from SpliceAI’s original analysis, and the OPA1 gene (bottom), where a cryptic exon inclusion event was recently reported (<xref ref-type="bibr" rid="c48">Qian et al., 2021</xref>). <bold>(D)</bold> Predicted splice sites for the entire CFTR gene, with the corresponding predicted probability distribution by base position plotted below, for both SpliceAI and OSAIMANE.</p></caption>
<graphic xlink:href="644351v2_fig6.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
<p>To characterize the local sequence features that both models focus on, we computed the average decrease in predicted splice-site probability resulting from each of the three possible single-nucleotide substitutions at every position within 80bp for 100 donor and 100 acceptor sites randomly sampled from the test set (Chromosomes 1, 3, 5, 7, and 9). <xref rid="fig6" ref-type="fig">Figure 6B</xref> shows the average decrease in splice site strength for each mutation in the format of a DNA logo, for both tools. Pearson correlation analysis of the position weight matrices (PWMs) per base (<xref ref-type="bibr" rid="c19">Gupta et al., 2007</xref>) yielded a similarity of 0.996 for the donor and 0.997 for the acceptor between OSAI<sub>MANE</sub> and SpliceAI DNA logos, demonstrating high similarity between the two tools, with the strongest signals observed for mutations at the donor/acceptor sites outside the canonical GT/AG dinucleotide motif. The acceptor sites additionally show relatively higher sensitivity to A and G just upstream of the acceptor site, which is expected due to the CT-richness of the polypyrimidine tracts common in this region (<xref ref-type="bibr" rid="c36">Majewski and Ott, 2002</xref>).</p>
<p>Jaganathan <italic>et al</italic>. also demonstrated SpliceAI’s ability to predict cryptic splicing mutations – intronic mutations that create alternatively spliced transcripts. We recreated their experiment in which they investigated a MYBPC3 intron mutation associated with cardiomyopathy. Both OSAI<sub>MANE</sub> and SpliceAI predict very similar changes in the location and strength of acceptor site gain and loss events (<xref rid="fig6" ref-type="fig">Figure 6C</xref>). We then extended this experiment by examining an intronic splicing mutation in the OPA1 gene which has been shown to cause alternative splicing of a cryptic pseudoexon upstream (<xref ref-type="bibr" rid="c48">Qian et al., 2021</xref>). Again, both OSAI<sub>MANE</sub> and SpliceAI correctly predicted this event with similarly high accuracy.</p>
<p>We then replicated Jaganathan <italic>et al</italic>.’s experiment on the CFTR gene, in which they showed that SpliceAI predicted all of the splice sites accurately without any false positives. Using the full gene sequence from the GRCh38 assembly and a score threshold of 0.5, we found that OSAI<sub>MANE</sub> and SpliceAI predict the exact same set of donor and acceptor sites, and accurately capture all but the first donor site, using the MANE Select annotation as reference (<xref rid="fig6" ref-type="fig">Figure 6D</xref>).</p>
</sec>
</sec>
<sec id="s3">
<title>Discussion</title>
<p>We developed OpenSpliceAI to be a modular Python toolkit designed as an open-source implementation of SpliceAI, to which we added several key enhancements. The framework replicates the core logic of the SpliceAI model while optimizing prediction efficiency and variant effect analysis, such as acceptor and donor gains or losses, using pre-trained models. Our benchmarks show substantial computational advantages over SpliceAI, with faster processing, lower memory usage, and improved GPU efficiency (<xref rid="fig2" ref-type="fig">Figure 2B</xref> and <xref rid="figs6" ref-type="fig">Figure S6</xref>). These improvements are driven by our optimized PyTorch implementation that employs dynamic computation graphs and on-demand GPU memory allocation – allowing memory to be allocated and freed as needed – in contrast to SpliceAI’s static, Keras-based TensorFlow approach, which pre-allocates memory for the worst-case input size. In SpliceAI, this rigid memory allocation leads to high memory overhead and frequent out-of-memory errors when handling large datasets through large loop iteration prediction. Additionally, OpenSpliceAI leverages streamlined data handling and enhanced parallelization through batch prediction and multiprocessing, automatically distributing tasks across available threads. Together, these features prevent the memory pitfalls common in SpliceAI and make OpenSpliceAI a more scalable and efficient solution for large-scale genomic analysis (see Supplemental Note S6).</p>
<p>It is important to note that even though OpenSpliceAI and SpliceAI share the same model architecture, the released trained models are not identical. The variability observed between our models and the original SpliceAI – and even among successive training runs using the same code and data – can be attributed to several sources of inherent randomness. First, weight initialization is performed randomly for many layers, which means that different initial weights can lead to distinct convergence paths and final model parameters. Second, the process of data shuffling alters the composition of mini-batches during training, impacting both the training dynamics and the statistics computed in batch normalization layers. Although batch normalization is deterministic for a fixed mini-batch, its reliance on batch statistics introduces variability due to the random sampling of data. Finally, OpenSpliceAI employs the AdamW optimizer (<xref ref-type="bibr" rid="c34">Loshchilov and Hutter, 2019</xref>), which incorporates exponential moving averages of the first and second moments of the gradients. This mechanism serves a momentum-like role, contributing to an adaptive learning process that is inherently stochastic. Moreover, subtle differences in the order of operations or floating-point arithmetic, particularly in distributed computing environments, can further amplify this stochastic behavior. Together, these factors contribute to the observed non-deterministic behavior, resulting in slight discrepancies between our trained models and the original SpliceAI, as well as among successive training sessions under identical conditions.</p>
<p>OpenSpliceAI empowers researchers to adapt the framework to many other species by including modules that enable easy retraining. For closely related species such as mouse, our retrained model demonstrated comparable or slightly better precision than the human-based SpliceAI model. For more distant species such as <italic>Arabidopsis thaliana</italic>, whose genomic structure differs substantially from humans, retraining OpenSpliceAI yields much greater improvements in accuracy. Our initial release includes models trained on the human MANE genome annotation and four additional species: mouse, zebrafish, honeybee, and <italic>A. thaliana</italic>. We also evaluated pretraining on mouse (OSAI<sub>Mouse</sub>), honeybee (OSAI<sub>Honeybee</sub>), zebrafish (OSAI<sub>Zebrafish</sub>), and Arabidopsis (OSAI<sub>Arabidopsis</sub>) followed by fine-tuning on the human MANE dataset. While cross-species pretraining substantially accelerated convergence during fine-tuning, the final human splicing- prediction accuracy was comparable to that of a model trained from scratch on human data. This result indicates that our architecture seems to capture all relevant splicing features from human training data alone and thus gains little or no benefit from cross-species transfer learning in this context (see <xref rid="figs24" ref-type="fig">Figure S24</xref>).</p>
<p>OpenSpliceAI also includes modules for transfer learning, allowing researchers to initialize models with weights learned on other species. In our transfer learning experiments, models transferred from human to other species displayed faster convergence and higher stability, with potential for increased accuracy. We also incorporate model calibration via temperature scaling, providing better alignment between predicted probabilities and empirical distributions.</p>
<p>The ISM study revealed that OSAI<sub>MANE</sub> and SpliceAI made predictions using very similar sets of motifs (<xref rid="fig6" ref-type="fig">Figure 6B</xref>). Across several experiments, we note that SpliceAI exhibits an inherent bias near the starts and ends of transcripts which are padded with flanking N’s (as was done in the original study), predicting donor and acceptor sites in these boundaries with an extremely high signal that disappears when the sequence is padded with the actual genomic sequence. For example, the model correctly predicted the first donor site of the CFTR gene when the gene’s boundaries were flanked with N’s; however, when replaced those N’s with the actual DNA sequence upstream of the gene boundary, the signal all but disappeared, as seen in <xref rid="fig6" ref-type="fig">Figure 6D</xref>. This suggests a bias resulting from the way the model is trained. In our ISM benchmarks, we thus chose not to use flanking N’s unless explicitly recreating a study from the original SpliceAI paper.</p>
<p>Additionally, we note that both the SpliceAI and OSAI<sub>MANE</sub> “models” are the averaged result of five individual models, each initialized with slightly different weights. During the prediction process, each individual model was found to have discernably different performance. By averaging their outputs leveraging the deep-ensemble approach (<xref ref-type="bibr" rid="c15">Fort et al., 2019</xref>; <xref ref-type="bibr" rid="c28">Lakshminarayanan et al., 2017</xref>), the overall performance of both SpliceAI and OpenSpliceAI improved while reducing sensitivity to local variations. In essence, this method normalizes the inherent randomness of the individual models, resulting in predictions that are more robust and better represent the expected behavior, ultimately yielding improved average performance across large datasets. OpenSpliceAI’s “<monospace>predict</monospace>” module averages across all five models by default, but it also supports prediction using a single model.</p>
<p>In summary, OpenSpliceAI is a fully open-source, accessible, and computationally efficient deep learning system for splice site prediction. Its modular architecture, enhanced performance, and adaptability to diverse species make it a powerful tool for advancing research on gene regulation and splicing across diverse species.</p>
<sec id="s3a">
<title>Online Methods</title>
<p>OpenSpliceAI is designed with modular subcommands that allow users to preprocess genomic data into training and test sets, train models, perform model calibration, make efficient predictions, and conduct variant analysis. The following sections summarize the usage and technical implementation of each subcommand.</p>
<sec id="s3a1">
<title>OpenSpliceAI <monospace>create-data</monospace> subcommand</title>
<p>The <monospace>create-data</monospace> subcommand converts standard genomics data formats into a machine-readable form suitable for training machine learning models. It processes genomic sequences (FASTA) and genome annotations (GFF/GTF) to produce gene sequences and splice site labels stored in Hierarchical Data Format version 5 (HDF5).</p>
<p>In this standard supervised sequence-to-sequence machine learning framework, a dataset comprising input features (<italic>X</italic>s) and corresponding labels (<italic>Y</italic>s) is constructed. Here, <italic>X</italic> represents the one-hot-encoded pre- mRNA sequences, which serve as the input variables for prediction, while <italic>Y</italic> denotes the labels, specifically the donor and acceptor splice sites derived from the genome annotations.</p>
<p>For each gene locus, the longest transcript is selected as the canonical transcript, consistent with the canonical-transcript-labeling approach of SpliceAI. By default, the “<monospace>--biotype</monospace>” argument is set to “protein-coding”, which means only protein-coding genes are included in the feature set and label set. Users can change this setting to “all” to include both protein-coding and non-coding genes.</p>
</sec>
<sec id="s3a2">
<title>Splitting gene sequences into training and testing sets</title>
<p>For generating datasets for OSAI<sub>MANE</sub>, OpenSpliceAI adopts SpliceAI’s chromosome-based partitioning strategy. In human datasets, the training set is defined by chromosomes 2, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, X, and Y, while the testing set is defined by chromosomes 1, 3, 5, 7, and 9. For non- human species, OpenSpliceAI defaults to a random splitting method (specified by the “<monospace>--split-method</monospace>” parameter). In this approach, the algorithm first computes the total chromosome length, randomly shuffles the chromosomes, and then iteratively assigns them to the training or testing set until the desired split ratio (defaulting to 80% training) is achieved, with any remaining chromosomes allocated to the test set.</p>
</sec>
<sec id="s3a3">
<title>Pseudogenes and paralogous gene sequences removal</title>
<p>To ensure the integrity and accuracy of model testing, pseudogenes – segments of DNA that resemble functional genes but are incapable of coding for a protein – are removed from the test dataset. This is accomplished by filtering out genes in the GFF file that either have “pseudogene” as the feature type in the third column or specify “pseudogene”, “transcribed_pseudogene”, or “processed_pseudogene” for the “gene_biotype” or “biotype” fields.</p>
<p>The removal of paralogous genes is also critical, as sequence similarity between training and test sets can lead to data leakage. OpenSpliceAI performs DNA sequence alignment to detect paralogous sequences. Specifically, OpenSpliceAI uses mappy, a Python wrapper for minimap2 (<xref ref-type="bibr" rid="c31">Li, 2018</xref>), to align test sequences to the training set, applying the “<monospace>--asm20</monospace>” argument to allow a sequence divergence of up to 20%. Following alignment, OpenSpliceAI examines each result and excludes any test sequence that shows more than 80% sequence similarity and 80% coverage compared to any sequence in the training set.</p>
</sec>
<sec id="s3a4">
<title>One-hot encoding scheme</title>
<p>The one-hot encoding procedure for the input sequence for model training, testing, and prediction uses the following representation: 𝐴 = [1, 0, 0, 0], 𝐶 = [0, 1, 0, 0], 𝐺 = [0, 0, 1, 0], <italic>T</italic> (𝑜𝑟 𝑈) = [0, 0, 0, 1] . Any ambiguous nucleotide (denoted as N or other non-standard symbols) is encoded as [0, 0, 0, 0]. The encoding of the labels for model training uses the scheme: none-splice site = [1, 0, 0], acceptor site = [0, 1, 0], donor site = [0, 0, 1], padding = [0, 0, 0]. The predictions use the same scheme, where the three output channels sum to one, representing a probability score.</p>
</sec>
<sec id="s3a5">
<title>Gene sequence segmentation for one-hot encoded features (𝑿s) and labels (𝒀s)</title>
<p>Following the approach used by SpliceAI, OpenSpliceAI divides gene sequences into overlapping segments, each spanning 15,000 nucleotides. Each segment comprises a central region of 5,000 nucleotides, flanked on both sides by 5,000-nucleotide extensions, thereby providing essential upstream and downstream context. A step size of 5,000 nucleotides is used to ensure comprehensive coverage with overlapping windows. For instance, a gene that is 22,000 nucleotides long is partitioned into five segments. Each segment is represented as a tensor with dimensions (15,000, 4); when a segment lacks sufficient nucleotides, the remaining positions are padded with ’N’ bases to maintain uniform tensor dimensions. Notably, the final segment may contain fewer real nucleotides – only 2,000 in this example – with the deficit filled by padding. Thus, the one-hot-encoded feature matrix (<italic>X</italic>) for the gene has a shape of (5, 15,000, 4), while the corresponding label tensor (<italic>Y</italic>), which focuses on the central 5,000 nucleotides, has a shape of (5, 5,000, 3). The batch size is set to 100 by default, meaning that OpenSpliceAI concatenates the first dimension of each tensor from 100 genes into a single matrix and performs the same concatenation for the label tensor matrix.</p>
</sec>
<sec id="s3a6">
<title>Selecting splice sites for inclusion in dataset labels (𝒀s)</title>
<p>Even with curated annotations, some splice sites in the annotation file may still be misannotated. To improve the accuracy of splice site labeling, OpenSpliceAI provides a “<monospace>--canonical-only</monospace>” argument that restricts analysis to canonical splice sites. By default, this option is disabled, so all splice sites in the annotation file are evaluated. These include the U2-snRNP-type motifs “GT-AG” and “GC-AG” (<xref ref-type="bibr" rid="c12">Brow, 2002</xref>) and the U12-snRNP-type motifs “GT-AG” and “AT-AC” (<xref ref-type="bibr" rid="c16">Frilander and Steitz, 1999</xref>; <xref ref-type="bibr" rid="c46">Patel and Steitz, 2003</xref>; <xref ref-type="bibr" rid="c57">Wassarman and Steitz, 1992</xref>).</p>
</sec>
<sec id="s3a7">
<title>OpenSpliceAI <monospace>train</monospace> subcommand</title>
<p>After the training and test sets are created, this subcommand takes the HDF5 outputs from the <monospace>create- data</monospace> subcommand and enables users to train their OpenSpliceAI model. Users can train different OpenSpliceAI models with various flanking sequence lengths, including 80 nt, 400 nt, 2,000 nt, and 10,000 nt.</p>
</sec>
<sec id="s3a8">
<title>OpenSpliceAI adaptive learning</title>
<p>OpenSpliceAI uses the AdamW optimizer (<xref ref-type="bibr" rid="c34">Loshchilov and Hutter, 2019</xref>) with a default learning rate of 0.001. The training dataset is further split into 90:10 for training and validation. By default, OpenSpliceAI trains a model for 10 epochs, with an early stopping patience of 2.</p>
<p>The “<monospace>--scheduler</monospace>” argument enables users to choose between two built-in PyTorch learning rate schedulers – MultiStepLR and CosineAnnealingWarmRestarts (<xref ref-type="bibr" rid="c35">Loshchilov and Hutter, 2016</xref>)– to dynamically adjust the learning rate during training. By default, OpenSpliceAI employs “MultiStepLR” with a learning rate of 0.001, beginning with a 0.5 decay from the 6th epoch, the same approach used in the SpliceAI model.</p>
<p>As detailed in the Results section, training the OSAI model on <italic>Arabidopsis</italic> data using the MultiStepLR scheduler resulted in a more stable training process. In contrast, all other OpenSpliceAI models, except OSAI<sub>Arabidopsis</sub>, were trained using the “CosineAnnealingWarmRestarts” scheduler, configured with “<monospace>T_0=5</monospace>”, “<monospace>T_mult=1</monospace>”, “<monospace>eta_min=1e-5</monospace>”, and “<monospace>last_epoch=-1</monospace>”. This scheduler gradually reduces the learning rate from an initial value of 1e-3 to a minimum of 1e-5 in a smooth, wave-like (cosine) pattern over each cycle. The parameter “<monospace>T_0=5</monospace>” sets the initial period for the cosine decay, meaning the learning rate completes one full cycle – from the starting rate down to “<monospace>eta_min</monospace>” and back – within 5 epochs. After the first cycle, the learning rate “restarts” at its initial value, creating a “warm restart”.</p>
</sec>
<sec id="s3a9">
<title>OpenSpliceAI loss function</title>
<p>By default, OpenSpliceAI uses the categorical cross-entropy loss function (<xref rid="eqn1" ref-type="disp-formula">Equation 1</xref>) to compute the loss at every nucleotide position in the input DNA sequence. This loss function measures the discrepancy between the predicted probability distribution and the true distribution for each position, which is standard practice for multi-class classification tasks. Alternatively, users can opt for the focal loss (<xref rid="eqn2" ref-type="disp-formula">Equation 2</xref>) (<xref ref-type="bibr" rid="c32">Lin et al., 2018</xref>).</p>
<p>Focal loss enhances the standard cross-entropy loss by adding a modulating term, (1 − <italic>P<sub>class</sub></italic>)<sup><italic>γ</italic></sup>, where <italic>P<sub>class</sub></italic> represents the model’s predicted probability for the correct class. This term down-weights the loss assigned to well-classified examples, allowing the model to concentrate more on the misclassified or harder-to- classify cases. For instance, setting γ to 2 amplifies the focus on challenging predictions, which is particularly beneficial in scenarios with class imbalance or when the signal in the data is subtle. This dynamic weighting of loss can enhance overall model accuracy.
<disp-formula id="eqn1">
<graphic xlink:href="644351v2_eqn1.gif" mime-subtype="gif" mimetype="image"/>
</disp-formula>
</p>
<disp-formula id="eqn2">
<graphic xlink:href="644351v2_eqn2.gif" mime-subtype="gif" mimetype="image"/>
</disp-formula>
</sec>
<sec id="s3a10">
<title>OpenSpliceAI <monospace>transfer</monospace> subcommand</title>
<p>Instead of training a model entirely from scratch, users can leverage transfer learning to adapt a human- trained model for a target species using the <monospace>transfer</monospace> subcommand. This process resembles standard model training but starts from a pre-trained model specified with the “<monospace>--pretrained-model</monospace>” argument. We recommend OSAI<sub>MANE</sub> as the pre-trained base model. Once the pre-trained weights are loaded, the <monospace>transfer</monospace> subcommand enables flexible fine-tuning. Users can either unfreeze all layers (using the “<monospace>-- unfreeze-all</monospace>” flag) or selectively train the final layers (with “<monospace>--unfreeze</monospace> &lt;INT&gt; ”) to adapt the model more effectively to the target species data. In addition, similar to the <monospace>train</monospace> subcommand, the <monospace>transfer</monospace> subcommand integrates adaptive learning rate scheduling and early stopping to optimize convergence and prevent overfitting, all while using the same loss function configuration.</p>
<p>While transfer learning employs the same underlying OpenSpliceAI architecture, optimizer, scheduler, and loss function as training from scratch, it differs primarily in its initialization step, which is based on a fully trained model. For optimal results, we recommend selecting species with high-quality genome assemblies and comprehensive annotations, such as <italic>Homo sapiens</italic>. This approach substantially reduces training time and can improve accuracy on the target species. See Figures S12–S15 for further details.</p>
</sec>
<sec id="s3a11">
<title>OpenSpliceAI <monospace>calibrate</monospace> subcommand</title>
<p>One improvement in OpenSpliceAI over SpliceAI is the incorporation of model calibration, which refines model-predicted probabilities to align more closely with actual outcome likelihoods. This is achieved by calibrating the model’s output so that a prediction with a probability of 0.6, for example, accurately reflects a 60% chance of being correct. The <monospace>calibrate</monospace> subcommand evaluates scores around this value, identifies deviations from expected probabilities, and applies non-linear adjustments to correct the score distribution without altering the model’s performance. After the OpenSpliceAI model was trained, we used the validation dataset to calibrate the model and evaluated the calibrated results using the test dataset. Such calibration is crucial in predictive modeling, particularly for classification, as it ensures that predicted probabilities are consistent with observed outcomes. Uncalibrated models can be overconfident or underconfident, potentially compromising decision-making quality.</p>
<p>There are various methods for calibrating models, including Platt Scaling (<xref ref-type="bibr" rid="c47">Platt, 1999</xref>), isotonic regression (<xref ref-type="bibr" rid="c59">Zadrozny and Elkan, 2002</xref>), and histogram binning (<xref ref-type="bibr" rid="c60">Zadrozny and Elkan, 2001</xref>). Here, we implemented class-wise temperature scaling, a variant of Platt Scaling often used in knowledge distillation and statistical mechanics (<xref ref-type="bibr" rid="c20">Hinton et al., 2015</xref>; <xref ref-type="bibr" rid="c22">Jaynes, 1957</xref>). Temperature scaling is a post-hoc adjustment that modifies model output probabilities to more accurately reflect true class likelihoods.</p>
</sec>
</sec>
<sec id="s3b">
<title>OpenSpliceAI calibration optimization procedure</title>
<p>For model calibration in OpenSpliceAI, we froze the trained OpenSpliceAI model weights and augment the network with a class-specific temperature scaling layer. Instead of using a single scalar temperature parameter, we employ a vector of temperature parameters <italic>T</italic> = [<italic>T</italic><sub>0</sub>, <italic>T</italic><sub>1</sub>, <italic>T</italic><sub>2</sub>] corresponding to the non-splice site, acceptor site, and donor site, respectively. This design allows each class’s logit to be scaled individually, thereby addressing the inherent class imbalance and the sparsity of splice site signals. The logits are divided by their corresponding temperature parameters before applying the softmax function (<xref ref-type="bibr" rid="c11">Bridle, 1989</xref>), thereby aligning the predicted probabilities with the empirical likelihoods.</p>
<p>The temperature vector <italic>T</italic> was optimized using the Adam optimizer (<xref ref-type="bibr" rid="c27">Kingma and Ba, 2014</xref>) with an initial learning rate of 0.01 for its adaptive capabilities. To further enhance convergence, we employ PyTorch’s ReduceLROnPlateau scheduler, which reduces the learning rate by a factor of 0.1 if the validation loss does not improve over two consecutive epochs. In addition, early stopping was implemented with a patience of two epochs and a minimum improvement threshold (delta) of 10<sup>-6</sup>. If the validation loss did not decrease by at least 10<sup>-6</sup> over two epochs, optimization halts early, ensuring calibration efficiency and preventing overfitting.</p>
<p>Temperature scaling modifies the logits <italic>z</italic> (the raw outputs of the model before the softmax function) by scaling them with <italic>T</italic> (<xref rid="eqn3" ref-type="disp-formula">Equation 3</xref>). The adjusted logits <italic>z</italic>′ are computed as:
<disp-formula id="eqn3">
<graphic xlink:href="644351v2_eqn3.gif" mime-subtype="gif" mimetype="image"/>
</disp-formula></p>
<p>where <italic>z</italic> represents the original logits. The calibrated probabilities <inline-formula><inline-graphic xlink:href="644351v2_inline1.gif" mime-subtype="gif" mimetype="image"/></inline-formula> are then obtained by applying the softmax function (<xref rid="eqn4" ref-type="disp-formula">Equation 4</xref>):
<disp-formula id="eqn4">
<graphic xlink:href="644351v2_eqn4.gif" mime-subtype="gif" mimetype="image"/>
</disp-formula></p>
<p>A higher temperature <italic>T</italic> &gt; 1 spreads out the probability distribution, reducing confidence, while a lower temperature <italic>T</italic> &lt; 1 sharpens it, increasing confidence. To optimize calibration, we use the negative log- likelihood (NLL) loss function defined as (<xref rid="eqn5" ref-type="disp-formula">Equation 5</xref>):
<disp-formula id="eqn5">
<graphic xlink:href="644351v2_eqn5.gif" mime-subtype="gif" mimetype="image"/>
</disp-formula>
Where 𝑁 is the number of samples, 𝐶 is the number of classes, in our case, acceptor site, donor site, and non-splice site. 𝐼<sub>),+</sub> is the indicator function, which equals 1 if sample 𝑖 belongs to class 𝑐 and 0 otherwise.</p>
<p><inline-formula><inline-graphic xlink:href="644351v2_inline2.gif" mime-subtype="gif" mimetype="image"/></inline-formula> is the model’s predicted probability of the sample 𝑖 belongs to class 𝑐. A lower NLL indicates that the predicted probabilities are more closely aligned with the true labels, reflecting better calibration and overall model performance.</p>
<p>The optimal temperature <italic>T</italic><sup>∗</sup> is determined by minimizing the NLL loss over the validation dataset (<xref rid="eqn6" ref-type="disp-formula">Equation 6</xref>):
<disp-formula id="eqn6">
<graphic xlink:href="644351v2_eqn6.gif" mime-subtype="gif" mimetype="image"/>
</disp-formula>
where y are the true labels.</p>
<p>The temperature parameter <italic>T</italic> was initialized to one and constrained between 0.05 and 5.0 to prevent extreme scaling. We employed gradient-based optimization to minimize the cross-entropy loss (nn.CrossEntropyLoss, i.e., NLL loss) on the validation set while keeping the original model weights fixed.</p>
<sec id="s3b1">
<title>OpenSpliceAI calibration evaluation</title>
<p>The first metric, which we used for temperature optimization, is NLL (<xref rid="eqn5" ref-type="disp-formula">Equation 5</xref>), which measures the match between predicted probabilities and the true labels; lower NLL values indicate better calibration.</p>
<p>We also evaluated the temperature-scaled new probabilities using the Expected Calibration Error (ECE) (<xref rid="eqn7" ref-type="disp-formula">Equation 7</xref>). ECE quantifies the discrepancy between confidence estimates and actual accuracy over a range of probability bins. It does so by partitioning the predictions into 𝑀 bins, by default OpenSpliceAI sets to 30, and computing the weighted average of the absolute differences between the confidence (predicted probability) and accuracy within each bin. The ECE is defined as:
<disp-formula id="eqn7">
<graphic xlink:href="644351v2_eqn7.gif" mime-subtype="gif" mimetype="image"/>
</disp-formula>
𝐵<sub>3</sub>is the set of indices of samples whose predicted probabilities fall into the m<sup>th</sup> bin; |𝐵<sub>3</sub>| is the number of samples in the m<sup>th</sup> bin; 𝑁 is the total number of samples; 𝑎𝑐(𝐵<sub>3</sub>) is the average accuracy in the m<sup>th</sup> bin (<xref rid="eqn8" ref-type="disp-formula">Equation 8</xref>).
<disp-formula id="eqn8">
<graphic xlink:href="644351v2_eqn8.gif" mime-subtype="gif" mimetype="image"/>
</disp-formula>
𝑐𝑜𝑛f(𝐵<sub>3</sub>) is the average confidence in the m<sup>th</sup> bin (<xref rid="eqn9" ref-type="disp-formula">Equation 9</xref>), where <inline-formula><inline-graphic xlink:href="644351v2_inline3.gif" mime-subtype="gif" mimetype="image"/></inline-formula> is the predicted class for sample 𝑖, where <inline-formula><inline-graphic xlink:href="644351v2_inline4.gif" mime-subtype="gif" mimetype="image"/></inline-formula> is the predicted probability associated with the predicted class <inline-formula><inline-graphic xlink:href="644351v2_inline5.gif" mime-subtype="gif" mimetype="image"/></inline-formula>.
<disp-formula id="eqn9">
<graphic xlink:href="644351v2_eqn9.gif" mime-subtype="gif" mimetype="image"/>
</disp-formula>
An ECE of 0 indicates perfect calibration, where confidence and accuracy are aligned across all bins.</p>
</sec>
<sec id="s3b2">
<title>OpenSpliceAI reliability curve and confidence interval</title>
<p>We generated calibration curves for each class using the <monospace>calibration_curve</monospace> function from scikit-learn, employing 30 bins with a uniform binning strategy. For input, the logits and labels were reshaped into two- dimensional tensors. This function calculates the mean predicted probability and the true frequency of the positive class within each bin. To visualize the uncertainty in these estimates, we computed confidence intervals for each bin using the normal approximation method (<xref ref-type="bibr" rid="c49">Raschka, 2018</xref>)(<xref rid="eqn10" ref-type="disp-formula">Equation 10</xref>, <xref rid="eqn11" ref-type="disp-formula">11</xref>, and <xref rid="eqn12" ref-type="disp-formula">12</xref>):
<disp-formula id="eqn10">
<graphic xlink:href="644351v2_eqn10.gif" mime-subtype="gif" mimetype="image"/>
</disp-formula>
<disp-formula id="eqn11">
<graphic xlink:href="644351v2_eqn11.gif" mime-subtype="gif" mimetype="image"/>
</disp-formula>
<disp-formula id="eqn12">
<graphic xlink:href="644351v2_eqn12.gif" mime-subtype="gif" mimetype="image"/>
</disp-formula>
</p>
<p>where <inline-formula><inline-graphic xlink:href="644351v2_inline6.gif" mime-subtype="gif" mimetype="image"/></inline-formula> is the empirical probability and 𝑛 is the number of samples in the bin. <xref rid="eqn10" ref-type="disp-formula">Equation 10</xref> defines the standard error (SE) of the estimated parameter. For a 95% confidence level, 𝑧 is set to 1.96. <xref rid="eqn11" ref-type="disp-formula">Equations 11</xref> and <xref rid="eqn12" ref-type="disp-formula">12</xref> provide the lower and upper bounds of the confidence interval, respectively (See Figures S16–S22 for all reliability curve results).</p>
</sec>
<sec id="s3b3">
<title>OpenSpliceAI <monospace>predict</monospace> subcommand</title>
<p>After the OpenSpliceAI model is trained, users can execute this subcommand to predict splice sites in DNA sequences provided in FASTA format. This command also supports limiting predictions to protein-coding genes by using a GFF annotation file for the given genome. It outputs the results in BED format, collecting all probable donor and acceptor site locations into separate files.</p>
</sec>
<sec id="s3b4">
<title>OpenSpliceAI data pre-processing</title>
<p>Depending on the inputs of the subcommand, OpenSpliceAI will extract the input sequences differently. If only a FASTA file is provided, OpenSpliceAI will collect all sequences within the file for prediction. If a FASTA and GFF file are both provided, OpenSpliceAI will extract all features of type ‘gene’ from the GFF file and use those coordinates to extract sequences from the FASTA file for prediction.</p>
<p>To aid in memory management, OpenSpliceAI splits any sequence with length greater than the “split- threshold” (default: 1,500,000 bases), into chunks that are no longer than this threshold. This parameter can be adjusted and ensures that each chunk can be loaded entirely into memory during the one-hot encoding process. Additionally, to optimize speed, if the total length of sequences in the FASTA file is below the “hdf_threshold” (default: 5,000 bases), the tool bypasses HDF5 compression and processes the input directly as text, achieving a slight performance speedup.</p>
<p>After all sequences are collected, the tool pre-processes the inputs using a method similar to that employed during training, but without handling any true labels. Each sequence is split into overlapping windows of size 5000 + “flanking_size”, where the overlap is equal to half of the “flanking_size”. No clipping is allowed for the input, so if the final subsequence is shorter than 5000 + “flanking_size”, it is right-padded with N’s. Similarly, the first subsequence is left-padded with “flanking_size” / 2 N’s. If a sequence is split according to the “split_threshold”, it is divided so that adjacent subsequences share an overlap equal to half the ‘flanking_size’, preventing N-padding from interfering with predictions. This ensures that the model predicts every single base of the provided input sequences.</p>
<p>After window-based splitting, all 5000 + ‘flanking_size’ subsequences generated from the input FASTA entry are grouped together and one-hot encoded in parallel, yielding an entry with dimensions (N, 5000 + ‘flanking_size’, 4), where N is the number of subsequences generated from the given FASTA entry. These entries are further grouped into chunks of size ‘chunk_size’ (default 100), which ensures that they are processed together, reshaping the input to size (&lt;=‘chunk_size’, N, 5000 + ‘flanking_size’, 4). The resultant chunks are saved together as an HDF5-compressed file.</p>
</sec>
<sec id="s3b5">
<title>OpenSpliceAI prediction algorithm design</title>
<p>To dynamically manage memory and optimize speed, OpenSpliceAI offers two modes of prediction: standard and turbo, which is controlled by the ‘predict_all’ flag. In standard mode, predictions for all bases are stored (which can be memory-intensive) and written to a BED file. In contrast, turbo mode skips storing individual predictions and directly converts them to a BED file without storing them, reducing memory usage. By default, turbo mode is enabled (See <xref rid="figs25" ref-type="fig">Figure S25</xref>).</p>
<p>To start the prediction process, OpenSpliceAI first loads the appropriate pre-trained models. Like SpliceAI, each pre-trained OpenSpliceAI model can include multiple individual models that are averaged to produce a final, higher-quality prediction. Users can specify either a single model file or a directory containing multiple models, in which case the tool automatically averages predictions from all provided models. Depending on the user’s system, OpenSpliceAI selects the best available computing device for model loading and prediction, prioritizing CUDA, MPS, CPU in that order.</p>
<p>OpenSpliceAI performs batch prediction with parallelized prediction, significantly reducing prediction time. The ‘batch_size’ parameter is determined based on the ‘flanking_size’ and the computing device used. Chunked sequences are loaded into a PyTorch DataLoader object, which batches the one-hot-encoded chunk into dimension (&lt;=‘batch_size’, 4, 5000 + ‘flanking_size’). Each batch is processed through all provided models, producing averaged, batched predictions, which are then accumulated by chunk and flattened to reconstruct the full input sequence (FASTA entry) of dimension (&lt;=‘split_threshold’, 3). The second dimension represents predictions for whether each base position is a donor site, acceptor site, or neither.</p>
<p>OpenSpliceAI’s memory handling varies based on the prediction mode. In standard mode, the output tensor is periodically flushed to a file, controlled by the ‘flush_predict_threshold’ parameter, which specifies how many sequences are stored in memory before flushing to an HDF5 file. Predictions are then converted into a BED file that explicitly identifies donor and acceptor sites. In turbo mode, the prediction and BED-file- writing steps are performed simultaneously, and the raw tensor predictions for each base are discarded from memory rather than saved. This substantially reduces memory and processing time.</p>
</sec>
<sec id="s3b6">
<title>OpenSpliceAI prediction outputs</title>
<p>The prediction step generates two BED files – one for donor sites and one for acceptor sites – containing the coordinates and scores of all splice sites that exceed a specified score threshold (set by the ‘threshold’ parameter, default 0.5). The tool automatically extracts relevant information from input files to determine splice site coordinates in the BED file. If not enough annotation data is provided (e.g., the FASTA header does not have transcript start and end coordinates and no annotation file is provided), the coordinates are reported relative to the FASTA sequence, with position 0 corresponding to the first nucleotide. If an annotation file is provided, the tool extracts protein-coding gene loci and calculates the coordinates of splice sites within each locus.</p>
</sec>
<sec id="s3b7">
<title>OpenSpliceAI <monospace>variant</monospace> subcommand</title>
<p>The ’variant’ subcommand reimplements SpliceAI’s publicly-available utility (<xref ref-type="bibr" rid="c21">Jaganathan et al., 2019</xref>) to evaluate the effects of genetic variants on the location and strength of splice sites. It does so by comparing predictions made on wild-type and mutant sequences to determine the impact of single nucleotide polymorphisms (SNPs) and insertions or deletions (INDELs) on the resulting mRNA transcript. The tool outputs “delta” scores for four events: donor site gain, donor site loss, acceptor site gain, and acceptor site loss, along with the most probable position of each event relative to the mutation. It accepts a variant call format (VCF) file as input and returns an output VCF file annotated with the delta scores and positions.</p>
<p>This subcommand supports variant effect prediction using both PyTorch and Keras models to maintain compatibility with upstream workflows. However, PyTorch-based models are strongly recommended for faster prediction and lower memory overhead.</p>
</sec>
<sec id="s3b8">
<title>OpenSpliceAI variant delta score calculation</title>
<p>The “delta” score is defined similarly to <xref ref-type="bibr" rid="c21">Jaganathan et al., 2019</xref>, and refers to the maximum change in splicing score within a fixed window on each side of the mutation. By default, the window size is 50, meaning it will consider the donor and acceptor scores for the 101 positions around the variant. Supposing the array of donor and acceptor scores of the wild-type sequence are <italic>d<sub>ref</sub></italic> and <italic>a<sub>alt</sub></italic>, and those of the mutated sequence are <italic>d<sub>alt</sub></italic> and <italic>a<sub>alt</sub></italic>, then the delta scores (DS) are calculated as follows (<xref rid="eqn13" ref-type="disp-formula">Equation 13</xref>-<xref rid="eqn16" ref-type="disp-formula">16</xref>):
<disp-formula id="eqn13">
<graphic xlink:href="644351v2_eqn13.gif" mime-subtype="gif" mimetype="image"/>
</disp-formula>
</p>
<disp-formula id="eqn14">
<graphic xlink:href="644351v2_eqn14.gif" mime-subtype="gif" mimetype="image"/>
</disp-formula>
<disp-formula id="eqn15">
<graphic xlink:href="644351v2_eqn15.gif" mime-subtype="gif" mimetype="image"/>
</disp-formula>
<disp-formula id="eqn16">
<graphic xlink:href="644351v2_eqn16.gif" mime-subtype="gif" mimetype="image"/>
</disp-formula>
<p>In <xref ref-type="bibr" rid="c21">Jaganathan et al., 2019</xref>, the term ’delta score’ specifically refers to the maximum value among the four events. However, we do not use this score in our output. Instead, the output VCF file reports separate scores for each of the four events.</p>
</sec>
<sec id="s3b9">
<title>OpenSpliceAI splice site variant scoring process</title>
<p>The ’variant’ tool of OpenSpliceAI takes as input a VCF file, a reference genome in FASTA format, the model, the flanking size, and a custom annotation file. It annotates each variant in the provided VCF with four delta scores and four corresponding “delta positions,” which represent the relative nucleotide location of each delta score. By default, the delta position is ±50, with negative values indicating positions upstream of the variant and positive values downstream. Variants outside of genes defined by the annotation file, those that are less than ‘flanking_size’ from the ends of the chromosome, and deletions greater than 2 x ‘distance’ are excluded from annotation. The tool returns a VCF file with OpenSpliceAI annotations for all valid variants (<xref rid="figs26" ref-type="fig">Figure S26</xref>).</p>
</sec>
<sec id="s3b10">
<title>OSAIMANE training</title>
<p>We generated training and test datasets using the <monospace>create-data</monospace> subcommand. Following the SpliceAI approach, chromosomes 1, 3, 5, 7, and 9 were held out for testing. Paralogous genes were stringently removed from the test dataset based on sequence alignment results between the training and test sets (see Methods: Pseudogenes and paralogous gene sequences removal). The “<monospace>--canonical-only</monospace>” argument was used to label only donor and acceptor sites in U2-snRNP-type and U12-snRNP-type introns.</p>
<p>Next, we trained OSAI<sub>MANE</sub> with the <monospace>train</monospace> subcommand, employing a cosine annealing scheduler (“<monospace>-- scheduler CosineAnnealingWarmRestarts</monospace>”) and a categorical cross-entropy loss function (“<monospace>--loss cross_entropy_loss</monospace>”) over 10 epochs (“<monospace>--epochs 10</monospace>”).</p>
<p>We trained OSAI<sub>MANE</sub> with four different flanking sequence lengths: 80, 400, 2,000, and 10,000 nt. For each flanking sequence length, five models were trained with different random seeds to enable ensemble score predictions, following the SpliceAI-Keras approach. Model performance was evaluated on the held-out chromosomes (1, 3, 5, 7, and 9) using top-k accuracy, AUPRC, overall accuracy, precision, recall, and F1 score for both donor and acceptor sites.</p>
</sec>
<sec id="s3b11">
<title>Commands to train OSAIMANE</title>
<p>The following commands reproduce the creation of OSAI<sub>MANE</sub> using the OpenSpliceAI framework. To do so, an annotation GFF file, specifically the Human RefSeq MANE v1.3 annotation (<ext-link ext-link-type="uri" xlink:href="https://ftp.ncbi.nlm.nih.gov/refseq/MANE/MANE_human/release_1.3/MANE.GRCh38.v1.3.refseq_genomic.gff.gz">https://ftp.ncbi.nlm.nih.gov/refseq/MANE/MANE_human/release_1.3/MANE.GRCh38.v1.3.refseq_genomic.gff.gz</ext-link>), and a genome FASTA file, the GRCh38.p14 genome (<ext-link ext-link-type="uri" xlink:href="https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/001/405/GCF_000001405.40_GRCh38.p14/GCF_000001405.40_GRCh38.p14_genomic.fna.gz">https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/001/405/GCF_000001405.40_GRCh38.p14/GCF_000001405.40_GRCh38.p14_genomic.fna.gz</ext-link>), are required.</p>
<p>Creating training and test dataset:
<fig id="ufig1" position="float" orientation="portrait" fig-type="figure">
<graphic xlink:href="644351v2_ufig1.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
</p>
<p>Training OSAI<sub>MANE</sub>
<fig id="ufig2" position="float" orientation="portrait" fig-type="figure">
<graphic xlink:href="644351v2_ufig2.tif" mime-subtype="tiff" mimetype="image"/>
</fig></p>
<p>Calibrating OSAI<sub>MANE</sub> (optional)
<fig id="ufig3" position="float" orientation="portrait" fig-type="figure">
<graphic xlink:href="644351v2_ufig3.tif" mime-subtype="tiff" mimetype="image"/>
</fig></p>
<p>Similar to training OSAI<sub>MANE</sub>, the OpenSpliceAI framework can also be used to train species-specific models using different genomes and genome annotations. See Supplemental Note S2-S5 for more details.</p>
</sec>
<sec id="s3b12">
<title>Hardware resources for training in this study</title>
<p>OpenSpliceAI study was conducted on the Rockfish cluster. For data preprocessing, OpenSpliceAI was run with a single thread on a 24-core Intel Xeon Cascade Lake 6248R processor, with a base frequency of 3.0GHz and a 1 TB NVMe local drive. The five OpenSpliceAI models – OSAI<sub>MANE</sub>, OSAI<sub>Mouse</sub>, OSAI<sub>Zebrafish</sub>, OSAI<sub>Honeybee</sub>, and OSAI<sub>Arabidopsis</sub> – were each trained with a single Nvidia A100 GPU with 40 GB of memory and 192 GB of DDR4 memory. Slurm jobs were submitted with “--mem=64G”.</p>
</sec>
<sec id="s3b13">
<title>Model architecture and training hyperparameters</title>
<p>Building on SpliceAI’s model architecture, we re-implemented the deep residual convolutional neural network using PyTorch to improve flexibility and extensibility (see <xref rid="figs27" ref-type="fig">Figure S27</xref>; <ext-link ext-link-type="uri" xlink:href="https://github.com/Kuanhao-Chao/OpenSpliceAI/blob/main/openspliceai/train_base/spliceai.py">https://github.com/Kuanhao-Chao/OpenSpliceAI/blob/main/openspliceai/train_base/spliceai.py</ext-link>). The network processes an input tensor of shape (batch size, input length, 4) that encodes one-hot nucleotide sequences. Four different flanking sequence lengths – 80, 400, 2,000, and 10,000 nucleotides – are used to train four separate models, providing flexibility in capturing splicing signals at varying genomic contexts.</p>
<p>At the core of OpenSpliceAI, an initial 1D convolution (mapping from 4 channels to <italic>L</italic> channels) projects the nucleotide embedding into a higher-dimensional feature space. The resulting features pass through a series of ResidualUnit blocks, each consisting of two dilated convolutional layers with LeakyReLU (𝛼 = 0.1) activation and batch normalization. These dilated convolutional layers employ increasing dilation rates (𝐴𝑅 vector) and kernel sizes (𝑊 vector) to enlarge the receptive field without requiring extremely deep networks. Every fourth residual block is followed by a Skip layer that merges skip-connection features via a 1D convolution, ensuring better gradient flow and stabilizing training.</p>
<p>To accommodate the shrinking of the sequence length necessitated by large receptive fields, we employ a Cropping1D layer that removes extra padding introduced by convolutional dilation. Specifically, the amount of cropping 𝐶<italic>L</italic> is computed as twice the sum of 𝐴𝑅 × (𝑊 − 1). By slicing out 𝐶<italic>L</italic>/2 nucleotides from each end of the sequence, the Cropping1D layer aligns the network output with the desired prediction length. The final layer is a 1D convolution mapping the output features into three channels – representing probabilities for the donor site, acceptor site, or neither. We apply a softmax activation over these three positions at each nucleotide, yielding position-wise splice site prediction probabilities. See <xref rid="tbl2" ref-type="table">Table 2</xref> for a summary of the model architectures trained with four different flanking sequence lengths.</p>
<table-wrap id="tbl2" orientation="portrait" position="float">
<label>Table 2.</label>
<caption><title>Summary of the four OpenSpliceAI model architectures, each trained with a distinct flanking sequence length (80, 400, 2,000, and 10,000 nucleotides).</title><p>The table lists the kernel sizes (W), dilation rates (AR), number of residual and skip blocks, and total cropping length (CL).</p></caption>
<graphic xlink:href="644351v2_tbl2.tif" mime-subtype="tiff" mimetype="image"/>
</table-wrap>
<p>While model training is performed with fixed-length sequences (for example, 15,000 nucleotides to produce 5,000 prediction positions), the dilated convolutional structure and final Cropping1D layer allow each trained model to process variable-length sequences at inference time. Specifically, any sequence longer than the network’s receptive field can be fed to the network, which will output predictions aligned to the valid region (i.e., the input length minus the cropping region). For flanking regions, users can either pad with Ns or include relevant upstream and downstream genomic context. Memory permitting, this design grants flexibility in analyzing genomic segments of varying lengths in a single pass, without the need to retrain separate models for each new sequence length.</p>
<p>In total, these architectural components allow OpenSpliceAI to capture sequence contexts spanning up to 10,000 nucleotides. By varying kernel sizes, dilation rates, and cropping, the model can learn both local and long-range patterns important for accurate identification of canonical splice signals.</p>
<p>For model training, we introduced enhancements to the adaptive learning rate schedule. Specifically, we set a maximum learning rate for the initial 10 epochs and implemented an early stopping criterion to prevent overfitting. The adaptive learning rate decreases by a factor of 0.5 starting from the 6th epoch in the original implementation. Additionally, we incorporated the CosineAnnealingWarmRestarts scheduler to enable periodic learning rate restarts, which can help escape local minima and improve convergence.</p>
</sec>
<sec id="s3b14">
<title>Evaluation metrics on model performance</title>
<p>To evaluate both scratch-trained and transfer-trained models, we used outputs from the “<monospace>create-data</monospace>” subcommand derived from a test set that included only protein-coding genes and excluded paralogous sequences. For consistency with the SpliceAI study, we held out the same chromosomes for testing. For other species, we reserved approximately 20% of the data for testing and used the remaining 80% for training. These datasets were then used to assess (1) the original SpliceAI models, (2) all OSAI models trained from scratch, and (3) all OSAI models fine-tuned from OSAI<sub>MANE</sub>.</p>
</sec>
<sec id="s3b15">
<title>Top-k accuracy</title>
<p>In line with the definition used in the SpliceAI paper, we evaluate the model’s performance using the top-k accuracy metric. This metric is computed by examining each dimension of the model’s predictions. For each DNA sequence of length <italic>L</italic>, the model outputs an <italic>L</italic> × 3 matrix: the first channel indicates non-splice sites, the second indicates acceptor splice sites, and the third indicates donor splice sites.</p>
<p>Top-k splice site accuracy evaluation is computed as follows: For a gene sequence of length <italic>L</italic>, containing 10 true donor splice sites (<inline-formula><inline-graphic xlink:href="644351v2_inline7.gif" mime-subtype="gif" mimetype="image"/></inline-formula>) and 10 true acceptor splice sites (<inline-formula><inline-graphic xlink:href="644351v2_inline8.gif" mime-subtype="gif" mimetype="image"/></inline-formula>), the model generates probability scores for donor and acceptor sites across the sequence. For top-k accuracy, the <inline-formula><inline-graphic xlink:href="644351v2_inline9.gif" mime-subtype="gif" mimetype="image"/></inline-formula> highest-scoring predictions are extracted per class (donor/acceptor), where <inline-formula><inline-graphic xlink:href="644351v2_inline10.gif" mime-subtype="gif" mimetype="image"/></inline-formula> for each splice site type. Class-specific accuracy is calculated as follows (<xref rid="eqn17" ref-type="disp-formula">Equation 17</xref>):
<disp-formula id="eqn17">
<graphic xlink:href="644351v2_eqn17.gif" mime-subtype="gif" mimetype="image"/>
</disp-formula>
where <inline-formula><inline-graphic xlink:href="644351v2_inline11.gif" mime-subtype="gif" mimetype="image"/></inline-formula> denotes the 𝑖-th ranked prediction for the class, <inline-formula><inline-graphic xlink:href="644351v2_inline12.gif" mime-subtype="gif" mimetype="image"/></inline-formula> is the set of true splice sites for the class, and I is an indicator function.</p>
<p>For 𝑘 = 1, this evaluates whether true splice sites are present among the top 10 donor and top 10 acceptor predictions (20 total). Accuracy is defined as the proportion of true sites correctly identified within this subset. For 𝑘 = 2, the evaluation expands to the top 20 predictions per class (40 total). This metric quantifies the model’s ability to prioritize true splice sites within ranked candidate positions</p>
</sec>
<sec id="s3b16">
<title>Accuracy, precision, recall, F1-score, and AUPRC</title>
<p>Unlike top-k accuracy, which requires knowing the number of ground-truth splice sites, we can determine the predicted class for each position based on the highest probability across each dimension and evaluate predictions as true positives (TP), true negatives (TN), false positives (FP), or false negatives (FN) based on a preset threshold. After labelling each site in a given sequence, we calculate accuracy, precision, recall, F1- score, and AUPRC with the threshold 0.5 for the sequence prediction. For example, for donor sites, the metrics are calculated as follows (<xref rid="eqn18" ref-type="disp-formula">Equation 18</xref>-<xref rid="eqn20" ref-type="disp-formula">20</xref>):
<disp-formula id="eqn18">
<graphic xlink:href="644351v2_eqn18.gif" mime-subtype="gif" mimetype="image"/>
</disp-formula>
</p>
<disp-formula id="eqn19">
<graphic xlink:href="644351v2_eqn19.gif" mime-subtype="gif" mimetype="image"/>
</disp-formula>
<disp-formula id="eqn20">
<graphic xlink:href="644351v2_eqn20.gif" mime-subtype="gif" mimetype="image"/>
</disp-formula>
</sec>
<sec id="s3b17">
<title>Benchmarking SpliceAI-Keras and OSAIMANE</title>
<p>To compare OSAI<sub>MANE</sub> with SpliceAI (<xref ref-type="bibr" rid="c21">Jaganathan et al., 2019</xref>), we benchmarked the computational efficiency and performance of both tools across various metrics in two tasks: large-scale prediction (using the ‘predict’ module) and variant effect prediction (using the ‘variant’ module). The results are shown in <xref rid="fig2" ref-type="fig">Figure 2G, H</xref>.</p>
</sec>
<sec id="s3b18">
<title>Time and CPU/GPU memory profiling</title>
<p>The SpliceAI-Keras and OSAI<sub>MANE</sub> were benchmarked using the Scalene profiling tool (<ext-link ext-link-type="uri" xlink:href="https://github.com/plasma-umass/scalene">https://github.com/plasma-umass/scalene</ext-link>), a Python-specific profiler which handles CPU, GPU, and memory profiling and evaluates code line-by-line. We measured the following metrics: elapsed CPU time, peak CPU memory, peak GPU memory, percentage of CPU time in low-level C code, CPU memory growth rate, and average memory usage. The first three metrics are visualized in <xref rid="fig2" ref-type="fig">Figure 2E</xref>, while the remaining are presented in the <xref rid="figs6" ref-type="fig">Figure S6</xref>.</p>
</sec>
<sec id="s3b19">
<title>Predict benchmark design</title>
<p>The objective of this benchmark was to provide a fair comparison of the computational efficiency of SpliceAI and OSAI<sub>MANE</sub>, with the key difference being that SpliceAI is implemented in Keras (<ext-link ext-link-type="uri" xlink:href="https://github.com/keras-team/keras">https://github.com/keras-team/keras</ext-link>) and OSAI<sub>MANE</sub> is implemented in PyTorch (<ext-link ext-link-type="uri" xlink:href="https://github.com/pytorch/pytorch">https://github.com/pytorch/pytorch</ext-link>). While SpliceAI includes a variant effect prediction utility, it lacks a dedicated tool for large-scale predictions. To address this, we extracted the core Keras-wrapped prediction code from SpliceAI’s variant tool and integrated it into our ‘predict’ utility, which has our specific data pre- processing and BED file generation . We call this tool “SpliceAI-Keras.”</p>
<p>For this experiment, we randomly sampled 1,000 protein-coding genes from MANE and benchmarked the tools on increasingly large subsets of the genes. The prediction task is to identify all splice sites within the gene locus.</p>
<p>With the Scalene profiler active, we ran both SpliceAI-Keras and OSAI<sub>MANE</sub> with the ‘predict’ subcommand across all five models (per default usage), extracting the averaged predictions, and repeated the process for a total of 5 trials. We further benchmarked every model size (80, 400, 2000, and 10k bp flanking size). The graph visualizations depict the mean metrics as a solid line, while the shaded region represents the variance between trials.</p>
<p>If the computation encountered an out-of-memory error that caused the prediction to stall, we discarded that trial. Note that running Scalene also requires dedicated memory usage, which was not included in the graphs. Some input sizes yielded no successful trials for SpliceAI-Keras, reflected in missing datapoints.</p>
</sec>
<sec id="s3b20">
<title>Variant benchmark design</title>
<p>We compared SpliceAI ‘variant’ tool (<ext-link ext-link-type="uri" xlink:href="https://github.com/Illumina/SpliceAI">https://github.com/Illumina/SpliceAI</ext-link>) with OpenSpliceAI ‘variant’ command (in default mode) in an analogous manner to the ‘predict’ benchmark. This experiment compared every model size across both SpliceAI-Keras and OSAI<sub>MANE</sub>, for 5 trials. For the input VCF file, we used the Mills and 1000 Genomes Project gold standard dataset of known indels in GRCh38, provided by the Broad Institute (<ext-link ext-link-type="uri" xlink:href="https://storage.googleapis.com/genomics-public-data/resources/broad/hg38/v0/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz">https://storage.googleapis.com/genomics-public-data/resources/broad/hg38/v0/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz</ext-link>). We randomly sampled 1,000 indels and benchmark on increasingly large subsets of this data. The resultant graph is shown in <xref rid="figs6" ref-type="fig">Figure S6G–L</xref>.</p>
</sec>
</sec>
<sec id="s3c">
<title><italic>In Silico</italic> Mutagenesis analysis</title>
<p>The <italic>in silico</italic> mutagenesis (ISM) study compares the prediction patterns of OSAI<sub>MANE</sub> with SpliceAI (<xref ref-type="bibr" rid="c21">Jaganathan et al., 2019</xref>) to demonstrate their similarity and biological relevance. The ISM experiments investigate the effect of mutations on predicted splicing patterns, and we replicate several key experiments from <xref ref-type="bibr" rid="c21">Jaganathan et al., 2019</xref> to illustrate this.</p>
<sec id="s3c1">
<title>Importance score</title>
<p>For assessing the impact of a mutation in a given base position on the strength of the splice site, we calculate an “importance score” as follows (<xref rid="eqn21" ref-type="disp-formula">Equation 21</xref>):
<disp-formula id="eqn21">
<graphic xlink:href="644351v2_eqn21.gif" mime-subtype="gif" mimetype="image"/>
</disp-formula>
Where <italic>S<sub>ref</sub></italic> denotes the splice site score of the wild-type sequence, and <italic>S<sub>A</sub></italic>, <italic>S<sub>C</sub></italic>, <italic>S<sub>G</sub></italic>, and <italic>S<sub>T</sub></italic> denote the splice site’s score with each of the corresponding base substitutions. The importance score reflects the decrease in the predicted strength of the splice site when the target nucleotide is mutated and can be regarded as the significance of the target base in contributing towards the activation of the splice site (<xref rid="eqn20" ref-type="disp-formula">Equation 20</xref>).</p>
</sec>
<sec id="s3c2">
<title>Single-nucleotide variation in short exons</title>
<p>Pursuant to the protocol of <xref ref-type="bibr" rid="c21">Jaganathan et al., 2019</xref>, we investigate the importance of various base positions around two known short exons in the human genome, U2SURP exon 9 and DST exon 2. We evaluate the scores using both SpliceAI-Keras and OSAI<sub>MANE</sub> to compare the predicted splicing patterns. The findings are summarized in <xref rid="fig6" ref-type="fig">Figure 6A</xref>.</p>
<p>For each example, we extract the entire exon as well as part of the intronic region upstream and downstream of the exon to illustrate the full range of base positions. We then mutate each base of the input sequence to the three possible single nucleotide variations at that position. For the reference sequence and each mutated sequence, we collect the acceptor site score and calculate an importance score for that position. We finally visualize the acceptor site importance scores, corresponding to the vertical size of the DNA logo of the reference sequence.</p>
<p>Note that for the U2SURP investigation, we use the same input sequence as <xref ref-type="bibr" rid="c21">Jaganathan et al., 2019</xref>, which is extracted from the hg19 assembly, to ensure reproducibility. The DST exon used is updated with the more recent GRCh38 assembly. DST was selected to ensure representation across the train and test datasets. Additionally, we note that the DST gene is on the reverse strand, but we display the forward strand (the strand that the splicing models use as input) in our visualization for ease of comparison. Lastly, for this experiment and all subsequent ISM studies, we extract an additional 10,000 bp around the input sequence (as opposed to N-padding) and use the SpliceAI-10k and OSAI<sub>MANE</sub>-10k models to perform prediction.</p>
</sec>
<sec id="s3c3">
<title>Concordance evaluation of ISM importance scores between OSAIMANE and SpliceAI</title>
<p>To assess agreement between OSAI<sub>MANE</sub> and SpliceAI across a broad set of splice sites, we applied our ISM procedure to 100 randomly chosen donor sites and 100 randomly chosen acceptor sites. For each site, we extracted a 5,001 nt window centered on the annotated splice junction and, at every coordinate within that window, substituted the reference base with each of the three alternative nucleotides. We recorded the change in predicted splice-site probability for each mutation and then averaged these Δ-scores at each position to produce a 5,001-score ISM importance profile per site.</p>
<p>Next, for each splice site we computed the Pearson correlation coefficient between the paired importance profiles from ensembled OSAI<sub>MANE</sub> and ensembled SpliceAI. The median correlation was 0.857 for all splice sites. Ten additional zoom-in representative splice site DNA logo comparisons are provided in <xref rid="figs23" ref-type="fig">Supplementary Figure S23</xref>.</p>
</sec>
<sec id="s3c4">
<title>Batch mutagenesis for donor and acceptor site motif recognition</title>
<p>To establish a more representative idea of the splicing pattern around splice sites, we scale up the ISM experiment across multiple donor and acceptor sites. The data consists of 100 randomly sampled donor and 100 randomly sampled acceptor sites from the testing dataset (Chromosomes 1, 3, 5, 7, and 9). Each sequence is 400 bp with the donor and acceptor splicing motifs located at the midpoint of the sequence.</p>
<p>For each position in the sequence, we mutate the base to every other base and measure the decrease in the strength of the central splice site score. Again, the measurement is taken as the average across all five models for both SpliceAI-Keras and OSAI<sub>MANE</sub> (10k model size). We consider each point mutation separately here. We repeat this for every sequence and take the average result across the 100 samples.</p>
<p>Finally, we display the averaged scores in a DNA logo (<xref rid="fig6" ref-type="fig">Figure 6B</xref>), where the vertical size of a base denotes the magnitude of decrease in splice site strength when the original base at that position is mutated to that base. We show the central 80 base positions in our visualization for readability.</p>
<p>We note that SpliceAI-Keras runs many orders of magnitude slower than OSAI<sub>MANE</sub>. In order to speed up the computation, we split up the input into ten smaller batches of 10 transcripts each and process them in parallel on a GPU cluster. The results are aggregated, then averaged.</p>
</sec>
<sec id="s3c5">
<title>Cryptic splicing mutation analysis</title>
<p>To reproduce another key experiment from <xref ref-type="bibr" rid="c21">Jaganathan et al., 2019</xref> (<xref rid="fig2" ref-type="fig">Figure 2A</xref>), we selected a specific G to A point mutation in intron 14 of the MYBPC3 gene which results in a cryptic splicing variant. We further select another example of a cryptic splicing variant which is validated <italic>in vitro</italic>, from <xref ref-type="bibr" rid="c48">Qian et al., 2021</xref>. This A to G point mutation occurs deep in intron 16 of OPA1 and was shown to have the highest aberrant-only splicing in minigene assays, with the inclusion of an entire cryptic exon upstream of the mutation.</p>
<p>For each variant, we score the wild-type sequence and the mutated sequence and calculate the change in donor and acceptor scores for all bases around the mutation (specifically at the expected locations of cryptic splice site gain), for both SpliceAI-Keras and OSAI<sub>MANE</sub>. We visualize the most significant splice site gain or loss events, along with their raw splice site scores, in <xref rid="fig6" ref-type="fig">Figure 6C</xref>.</p>
<p>Because the sequence near the acceptor site differs in the MYBPC3 gene between the hg19 assembly (used in <xref ref-type="bibr" rid="c21">Jaganathan et al., 2019</xref>) and GRCh38 assembly, we opted to retain the hg19 annotation for this example, for the purpose of reproducing SpliceAI’s results.</p>
</sec>
<sec id="s3c6">
<title>Full prediction of the CFTR gene</title>
<p>We finally reproduce the full prediction of splice sites in the CFTR gene using both SpliceAI-Keras and OSAI<sub>MANE</sub>. Notably different, however, is the fact that we are using the updated GRCh38 assembly, and that we use a fixed score threshold of 0.5 (default for ‘predict’) to identify splice sites.</p>
<p>We extract the full CFTR gene and run both tools, taking the averaged score across all five models for each tool. The findings are summarized in <xref rid="fig6" ref-type="fig">Figure 6D</xref>. The exon plot displays the reference MANE annotation with the locations of the predicted donor and acceptor sites marked in color. The histogram below visualizes the corresponding donor and acceptor score distributions.</p>
<p>We further note that we extract the true 10k DNA flanking sequence around the gene (as opposed to N- padding), which is why our results do not appear to exactly replicate the original study from <xref ref-type="bibr" rid="c21">Jaganathan et al., 2019</xref>.</p>
</sec>
</sec>
<sec id="s3d" sec-type="data-availability">
<title>Data and Code Availability</title>
<p>OpenSpliceAI is implemented as a Python package, using PyTorch framework. OpenSpliceAI project is freely available on github at: <ext-link ext-link-type="uri" xlink:href="https://github.com/Kuanhao-Chao/OpenSpliceAI">https://github.com/Kuanhao-Chao/OpenSpliceAI</ext-link>, and is available on PyPi: <ext-link ext-link-type="uri" xlink:href="https://pypi.org/project/openspliceai/">https://pypi.org/project/openspliceai/</ext-link>. The OpenSpliceAI documentation is available at: <ext-link ext-link-type="uri" xlink:href="https://ccb.jhu.edu/openspliceai/">https://ccb.jhu.edu/openspliceai/</ext-link>.</p>
</sec>
<sec id="s3e">
<title>Author Contribution</title>
<p>K.C., S.L.S., and M.P. designed the research.</p>
<p>K.C. and A.M. co-developed the OpenSpliceAI framework.</p>
<p>K.C., A.M., A.L., S.L.S., and M.P. analyzed the results.</p>
<p>K.C. trained OpenSpliceAI models and conducted experiments comparing OSAI to SpliceAI.</p>
<p>K.C. conducted transfer learning experiments.</p>
<p>A. M. and K.C. conducted the ISM experiments.</p>
<p>K.C. and A.M. wrote the OpenSpliceAI documentation.</p>
<p>K.C., A. M., A.L., S.L.S., and M.P. wrote the manuscript.</p>
</sec>
</sec>

</body>
<back>
<sec>
<fig id="figs1" position="float" orientation="portrait" fig-type="figure">
<label>Figure S1.</label>
<caption><title>Comparison of splice site prediction performance between SpliceAI-Keras (blue) and OSAI<sub>MANE</sub> (orange) across human (<italic>Homo sapiens</italic>) datasets with varying flanking sequence lengths.</title><p>The plots display donor (5′) and acceptor (3′) splice site prediction metrics using 80, 400, 2000, and 10,000 nt of flanking context. OSAI<sub>MANE</sub> was trained using the RefSeq MANE v1.3 database(<ext-link ext-link-type="uri" xlink:href="https://ftp.ncbi.nlm.nih.gov/refseq/MANE/MANE_human/release_1.3/MANE.GRCh38.v1.3.refseq_genomic.gff.gz">https://ftp.ncbi.nlm.nih.gov/refseq/MANE/MANE_human/release_1.3/MANE.GRCh38.v1.3.refseq_genomic.gff.gz</ext-link>) and GRCh38.p14 genome. <bold>(A)</bold> Donor Top-1: measures the percentage of times the model’s most confident prediction exactly matches the true donor site label. <bold>(B)</bold> Donor AUPRC: Area Under the Precision–Recall Curve for donor site predictions. <bold>(C)</bold> Donor Accuracy: proportion of correct donor site calls among all predictions. <bold>(D)</bold> Donor Precision: the fraction of predicted donor sites that are correct. <bold>(E)</bold> Donor Recall: the fraction of true donor sites that are correctly predicted. <bold>(F)</bold> Donor F1: the harmonic mean of precision and recall for donor sites. <bold>(G)</bold> Acceptor Top-1: measures the percentage of times the model’s most confident prediction exactly matches the true acceptor site label. <bold>(H)</bold> Acceptor AUPRC: Area Under the Precision–Recall Curve for acceptor site predictions. <bold>(I)</bold> Acceptor Accuracy: proportion of correct acceptor site calls among all predictions. <bold>(J)</bold> Acceptor Precision: the fraction of predicted acceptor sites that are correct. <bold>(K)</bold> Acceptor Recall: the fraction of true acceptor sites that are correctly predicted. <bold>(L)</bold> Acceptor F1: the harmonic mean of precision and recall for acceptor sites. Each panel illustrates that increasing the flanking sequence length generally enhances model performance, with both SpliceAI-Keras and OpenSpliceAI achieving high accuracy and F1 scores at 10,000 nt. Each data point represents the mean across five independently trained models, with error bars indicating the standard deviation.</p></caption>
<graphic xlink:href="644351v2_figs1.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
<fig id="figs2" position="float" orientation="portrait" fig-type="figure">
<label>Figure S2.</label>
<caption><title>Comparison of splice site prediction performance between SpliceAI-Keras (blue) and OSAI<sub>MANE</sub> (orange) across house mouse (<italic>Mus musculus</italic>) datasets with varying flanking sequence lengths.</title><p>The plots display donor (5′) and acceptor (3′) splice site prediction metrics using 80, 400, 2000, and 10,000 nt of flanking context. OSAI<sub>MANE</sub> was trained using the RefSeq MANE v1.3 database(<ext-link ext-link-type="uri" xlink:href="https://ftp.ncbi.nlm.nih.gov/refseq/MANE/MANE_human/release_1.3/MANE.GRCh38.v1.3.refseq_genomic.gff.gz">https://ftp.ncbi.nlm.nih.gov/refseq/MANE/MANE_human/release_1.3/MANE.GRCh38.v1.3.refseq_genomic.gff.gz</ext-link>) and GRCh38.p14 genome. The house mouse datasets are curated from RefSeq GRCm39 annotation (<ext-link ext-link-type="uri" xlink:href="https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/001/635/GCF_000001635.27_GRCm39/GCF_000001635.27_GRCm39_genomic.gff.gz">https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/001/635/GCF_000001635.27_GRCm39/GCF_000001635.27_GRCm39_genomic.gff.gz</ext-link>) and GRCm39 genome. <bold>(A)</bold> Donor Top-1: measures the percentage of times the model’s most confident prediction exactly matches the true donor site label. <bold>(B)</bold> Donor AUPRC: Area Under the Precision–Recall Curve for donor site predictions. <bold>(C)</bold> Donor Accuracy: proportion of correct donor site calls among all predictions. <bold>(D)</bold> Donor Precision: the fraction of predicted donor sites that are correct. <bold>(E)</bold> Donor Recall: the fraction of true donor sites that are correctly predicted. <bold>(F)</bold> Donor F1: the harmonic mean of precision and recall for donor sites. <bold>(G)</bold> Acceptor Top-1: measures the percentage of times the model’s most confident prediction exactly matches the true acceptor site label. <bold>(H)</bold> Acceptor AUPRC: Area Under the Precision–Recall Curve for acceptor site predictions. <bold>(I)</bold> Acceptor Accuracy: proportion of correct acceptor site calls among all predictions. <bold>(J)</bold> Acceptor Precision: the fraction of predicted acceptor sites that are correct. <bold>(K)</bold> Acceptor Recall: the fraction of true acceptor sites that are correctly predicted. <bold>(L)</bold> Acceptor F1: the harmonic mean of precision and recall for acceptor sites. Each panel illustrates that increasing the flanking sequence length generally enhances model performance, with both SpliceAI-Keras and OpenSpliceAI achieving high accuracy and F1 scores at 10,000 nt. Each data point represents the mean across five independently trained models, with error bars indicating the standard deviation.</p></caption>
<graphic xlink:href="644351v2_figs2.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
<fig id="figs3" position="float" orientation="portrait" fig-type="figure">
<label>Figure S3.</label>
<caption><title>Comparison of splice site prediction performance between SpliceAI-Keras (blue) and OSAI<sub>MANE</sub> (orange) across honeybee (<italic>Apis mellifera</italic>) datasets with varying flanking sequence lengths.</title><p>The plots display donor (5′) and acceptor (3′) splice site prediction metrics using 80, 400, 2000, and 10,000 nt of flanking context. OSAI<sub>MANE</sub> was trained using the RefSeq MANE v1.3 database(<ext-link ext-link-type="uri" xlink:href="https://ftp.ncbi.nlm.nih.gov/refseq/MANE/MANE_human/release_1.3/MANE.GRCh38.v1.3.refseq_genomic.gff.gz">https://ftp.ncbi.nlm.nih.gov/refseq/MANE/MANE_human/release_1.3/MANE.GRCh38.v1.3.refseq_genomic.gff.gz</ext-link>) and GRCh38.p14 genome. The honeybee datasets are curated from RefSeq Amel_HAv3.1 annotation (<ext-link ext-link-type="uri" xlink:href="https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/003/254/395/GCF_003254395.2_Amel_HAv3.1/GCF_003254395.2_Amel_HAv3.1_genomic.gff.gz">https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/003/254/395/GCF_003254395.2_Amel_HAv3.1/GCF_003254395.2_Amel_HAv3.1_genomic.gff.gz</ext-link>) and Amel_HAv3.1 genome. <bold>(A)</bold> Donor Top-1: measures the percentage of times the model’s most confident prediction exactly matches the true donor site label. <bold>(B)</bold> Donor AUPRC: Area Under the Precision–Recall Curve for donor site predictions. <bold>(C)</bold> Donor Accuracy: proportion of correct donor site calls among all predictions. <bold>(D)</bold> Donor Precision: the fraction of predicted donor sites that are correct. <bold>(E)</bold> Donor Recall: the fraction of true donor sites that are correctly predicted. <bold>(F)</bold> Donor F1: the harmonic mean of precision and recall for donor sites. <bold>(G)</bold> Acceptor Top-1: measures the percentage of times the model’s most confident prediction exactly matches the true acceptor site label. <bold>(H)</bold> Acceptor AUPRC: Area Under the Precision–Recall Curve for acceptor site predictions. <bold>(I)</bold> Acceptor Accuracy: proportion of correct acceptor site calls among all predictions. <bold>(J)</bold> Acceptor Precision: the fraction of predicted acceptor sites that are correct. <bold>(K)</bold> Acceptor Recall: the fraction of true acceptor sites that are correctly predicted. <bold>(L)</bold> Acceptor F1: the harmonic mean of precision and recall for acceptor sites. Each panel illustrates that increasing the flanking sequence length generally enhances model performance, with both SpliceAI-Keras and OpenSpliceAI achieving high accuracy and F1 scores at 10,000 nt. Each data point represents the mean across five independently trained models, with error bars indicating the standard deviation.</p></caption>
<graphic xlink:href="644351v2_figs3.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
<fig id="figs4" position="float" orientation="portrait" fig-type="figure">
<label>Figure S4.</label>
<caption><title>Comparison of splice site prediction performance between SpliceAI-Keras (blue) and OSAI<sub>MANE</sub> (orange) across zebrafish (<italic>Danio rerio</italic>) datasets with varying flanking sequence lengths.</title><p>The plots display donor (5′) and acceptor (3′) splice site prediction metrics using 80, 400, 2000, and 10,000 nt of flanking context. OSAI<sub>MANE</sub> was trained using the RefSeq MANE v1.3 database(<ext-link ext-link-type="uri" xlink:href="https://ftp.ncbi.nlm.nih.gov/refseq/MANE/MANE_human/release_1.3/MANE.GRCh38.v1.3.refseq_genomic.gff.gz">https://ftp.ncbi.nlm.nih.gov/refseq/MANE/MANE_human/release_1.3/MANE.GRCh38.v1.3.refseq_genomic.gff.gz</ext-link>) and GRCh38.p14 genome. The zebrafish datasets are curated from RefSeq GRCz11 annotation (<ext-link ext-link-type="uri" xlink:href="https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/002/035/GCF_000002035.6_GRCz11/GCF_000002035.6_GRCz11_genomic.gff.gz">https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/002/035/GCF_000002035.6_GRCz11/GCF_000002035.6_GRCz11_genomic.gff.gz</ext-link>) and GRCz11 genome. <bold>(A)</bold> Donor Top-1: measures the percentage of times the model’s most confident prediction exactly matches the true donor site label. <bold>(B)</bold> Donor AUPRC: Area Under the Precision–Recall Curve for donor site predictions. <bold>(C)</bold> Donor Accuracy: proportion of correct donor site calls among all predictions. <bold>(D)</bold> Donor Precision: the fraction of predicted donor sites that are correct. <bold>(E)</bold> Donor Recall: the fraction of true donor sites that are correctly predicted. <bold>(F)</bold> Donor F1: the harmonic mean of precision and recall for donor sites. <bold>(G)</bold> Acceptor Top-1: measures the percentage of times the model’s most confident prediction exactly matches the true acceptor site label. <bold>(H)</bold> Acceptor AUPRC: Area Under the Precision–Recall Curve for acceptor site predictions. <bold>(I)</bold> Acceptor Accuracy: proportion of correct acceptor site calls among all predictions. <bold>(J)</bold> Acceptor Precision: the fraction of predicted acceptor sites that are correct. <bold>(K)</bold> Acceptor Recall: the fraction of true acceptor sites that are correctly predicted. <bold>(L)</bold> Acceptor F1: the harmonic mean of precision and recall for acceptor sites. Each panel illustrates that increasing the flanking sequence length generally enhances model performance, with both SpliceAI-Keras and OpenSpliceAI achieving high accuracy and F1 scores at 10,000 nt. Each data point represents the mean across five independently trained models, with error bars indicating the standard deviation.</p></caption>
<graphic xlink:href="644351v2_figs4.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
<fig id="figs5" position="float" orientation="portrait" fig-type="figure">
<label>Figure S5.</label>
<caption><title>Comparison of splice site prediction performance between SpliceAI-Keras (blue) and OSAI<sub>MANE</sub> (orange) across <italic>Arabidopsis thaliana</italic> datasets with varying flanking sequence lengths.</title><p>The plots display donor (5′) and acceptor (3′) splice site prediction metrics using 80, 400, 2000, and 10,000 nt of flanking context. OSAI<sub>MANE</sub> was trained using the RefSeq MANE v1.3 database(<ext-link ext-link-type="uri" xlink:href="https://ftp.ncbi.nlm.nih.gov/refseq/MANE/MANE_human/release_1.3/MANE.GRCh38.v1.3.refseq_genomic.gff.gz">https://ftp.ncbi.nlm.nih.gov/refseq/MANE/MANE_human/release_1.3/MANE.GRCh38.v1.3.refseq_genomic.gff.gz</ext-link>) and GRCh38.p14 genome. The <italic>Arabidopsis thaliana</italic> datasets are curated from RefSeq TAIR10.1 annotation (<ext-link ext-link-type="uri" xlink:href="https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/001/735/GCF_000001735.4_TAIR10.1/GCF_000001735.4_TAIR10.1_genomic.gff.gz">https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/001/735/GCF_000001735.4_TAIR10.1/GCF_000001735.4_TAIR10.1_genomic.gff.gz</ext-link>) and TAIR10.1 genome. <bold>(A)</bold> Donor Top-1: measures the percentage of times the model’s most confident prediction exactly matches the true donor site label. <bold>(B)</bold> Donor AUPRC: Area Under the Precision–Recall Curve for donor site predictions. <bold>(C)</bold> Donor Accuracy: proportion of correct donor site calls among all predictions. <bold>(D)</bold> Donor Precision: the fraction of predicted donor sites that are correct. <bold>(E)</bold> Donor Recall: the fraction of true donor sites that are correctly predicted. <bold>(F)</bold> Donor F1: the harmonic mean of precision and recall for donor sites. <bold>(G)</bold> Acceptor Top-1: measures the percentage of times the model’s most confident prediction exactly matches the true acceptor site label. <bold>(H)</bold> Acceptor AUPRC: Area Under the Precision–Recall Curve for acceptor site predictions. <bold>(I)</bold> Acceptor Accuracy: proportion of correct acceptor site calls among all predictions. <bold>(J)</bold> Acceptor Precision: the fraction of predicted acceptor sites that are correct. <bold>(K)</bold> Acceptor Recall: the fraction of true acceptor sites that are correctly predicted. <bold>(L)</bold> Acceptor F1: the harmonic mean of precision and recall for acceptor sites. Each panel illustrates that increasing the flanking sequence length generally enhances model performance, with both SpliceAI-Keras and OpenSpliceAI achieving high accuracy and F1 scores at 10,000 nt. Each data point represents the mean across five independently trained models, with error bars indicating the standard deviation.</p></caption>
<graphic xlink:href="644351v2_figs5.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
<fig id="figs6" position="float" orientation="portrait" fig-type="figure">
<label>Figure S6.</label>
<caption><title>Comparison of runtime and memory metrics for ‘<monospace>predict</monospace>’ (panels A–F) and ‘<monospace>variant</monospace>’ (panels G–L) in OSAI<sub>MANE</sub> models with different flanking sequences.</title><p>Each corresponding pair of panels displays the same metric for the two methods as a function of increasing input size. <bold>(A, G)</bold> Overall Elapsed Time: Total elapsed CPU time to complete processing. <bold>(B, H)</bold> Average Memory Usage: Mean CPU memory consumption (in MB) during execution, reflecting the typical memory footprint. <bold>(C, I)</bold> Peak Memory Usage: Maximum CPU memory recorded (in MB) at any point. <bold>(D, J)</bold> Peak GPU Memory: Maximum GPU memory recorded (in MB) at any point. <bold>(E, K)</bold> Memory Growth Rate: The average rate of memory increase during runtime, which indicates how the constant of memory usage increases with larger inputs. <bold>(F, L)</bold> CPU Utilization Profile: Percentage of time spent in native C execution (as opposed to interpreted Python code), reflecting the runtime that is being used by compiled, low-level routines.</p></caption>
<graphic xlink:href="644351v2_figs6.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
<fig id="figs7" position="float" orientation="portrait" fig-type="figure">
<label>Figure S7.</label>
<caption><title>Splice site motif count and intron length distributions across five species.</title><p><bold>(A)</bold> Canonical vs. Non- Canonical Donor and Acceptor Splice Sites. Bar plots depict the total number of donor (blue, orange) and acceptor (green, red) sites across Human (MANE), Mouse, Zebrafish, Honeybee, and <italic>Arabidopsis</italic> genomes, subdivided into canonical (GT/AG) and non-canonical motifs. Percentages above each bar indicate the proportion of sites using canonical motifs in each species. <bold>(B)</bold> Splice Junction (Intron) Length Distributions. Kernel density curves illustrate the distribution of intron lengths in each genome (colored as in the legend). Differences in the breadth and peak of each distribution highlight notable cross-species variation in intron size. <bold>(C)</bold> Scatter plots of DNA sequence alignments between validation and training sets for Human-MANE, mouse, honeybee, zebrafish, and <italic>Arabidopsis</italic>. Each dot represents an alignment, with the x-axis showing alignment identity and the y-axis showing alignment coverage. Alignments exceeding 80% for both identity and coverage are highlighted in the red-shaded region and excluded from the test sets.</p></caption>
<graphic xlink:href="644351v2_figs7.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
<fig id="figs8" position="float" orientation="portrait" fig-type="figure">
<label>Figure S8.</label>
<caption><title>Splice site prediction metrics for the mouse (<italic>Mus musculus</italic>) across varying flanking sequence lengths.</title><p>Plots compare performance of SpliceAI-Keras (blue) and OSAI<sub>Mouse</sub> (orange) on donor (5′) and acceptor (3′) splice site predictions using 80, 400, 2000, and 10,000 nt of flanking context. OSAI<sub>Mouse</sub> was trained with RefSeq GRCm39 annotation(<ext-link ext-link-type="uri" xlink:href="https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/001/635/GCF_000001635.27_GRCm39/GCF_000001635.27_GRCm39_genomic.gff.gz">https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/001/635/GCF_000001635.27_GRCm39/GCF_000001635.27_GRCm39_genomic.gff.gz</ext-link>) and GRCm39 genome. <bold>(A)</bold> Donor Top-1: measures the percentage of times the model’s most confident prediction exactly matches the true donor site label. <bold>(B)</bold> Donor AUPRC: Area Under the Precision–Recall Curve for donor site predictions. <bold>(C)</bold> Donor Accuracy: proportion of correct donor site calls among all predictions. <bold>(D)</bold> Donor Precision: the fraction of predicted donor sites that are correct. <bold>(E)</bold> Donor Recall: the fraction of true donor sites that are correctly predicted. <bold>(F)</bold> Donor F1: the harmonic mean of precision and recall for donor sites. <bold>(G)</bold> Acceptor Top-1: measures the percentage of times the model’s most confident prediction exactly matches the true acceptor site label. <bold>(H)</bold> Acceptor AUPRC: Area Under the Precision–Recall Curve for acceptor site predictions. <bold>(I)</bold> Acceptor Accuracy: proportion of correct acceptor site calls among all predictions. <bold>(J)</bold> Acceptor Precision: the fraction of predicted acceptor sites that are correct. <bold>(K)</bold> Acceptor Recall: the fraction of true acceptor sites that are correctly predicted. <bold>(L)</bold> Acceptor F1: the harmonic mean of precision and recall for acceptor sites. Each panel illustrates that increasing the flanking sequence length generally enhances model performance, with both SpliceAI-Keras and OpenSpliceAI achieving high accuracy and F1 scores at 10,000 nt. Each data point represents the mean across five independently trained models, with error bars indicating the standard deviation.</p></caption>
<graphic xlink:href="644351v2_figs8.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
<fig id="figs9" position="float" orientation="portrait" fig-type="figure">
<label>Figure S9.</label>
<caption><title>Splice site prediction metrics for the honeybee (<italic>Apis mellifera</italic>) across varying flanking sequence lengths.</title><p>Plots compare performance of SpliceAI-Keras (blue) and OSAI<sub>Honeybee</sub> (orange) on donor (5′) and acceptor (3′) splice site predictions using 80, 400, 2000, and 10,000 nt of flanking context. OSAI<sub>Honeybee</sub> was trained with RefSeq Amel_HAv3.1 annotation (<ext-link ext-link-type="uri" xlink:href="https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/003/254/395/GCF_003254395.2_Amel_HAv3.1/GCF_003254395.2_Amel_HAv3.1_genomic.gff.gz">https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/003/254/395/GCF_003254395.2_Amel_HAv3.1/GCF_003254395.2_Amel_HAv3.1_genomic.gff.gz</ext-link>) and Amel_HAv3.1 genome. <bold>(A)</bold> Donor Top-1: measures the percentage of times the model’s most confident prediction exactly matches the true donor site label. <bold>(B)</bold> Donor AUPRC: Area Under the Precision–Recall Curve for donor site predictions. <bold>(C)</bold> Donor Accuracy: proportion of correct donor site calls among all predictions. <bold>(D)</bold> Donor Precision: the fraction of predicted donor sites that are correct. <bold>(E)</bold> Donor Recall: the fraction of true donor sites that are correctly predicted. <bold>(F)</bold> Donor F1: the harmonic mean of precision and recall for donor sites. <bold>(G)</bold> Acceptor Top-1: measures the percentage of times the model’s most confident prediction exactly matches the true acceptor site label. <bold>(H)</bold> Acceptor AUPRC: Area Under the Precision–Recall Curve for acceptor site predictions. <bold>(I)</bold> Acceptor Accuracy: proportion of correct acceptor site calls among all predictions. <bold>(J)</bold> Acceptor Precision: the fraction of predicted acceptor sites that are correct. <bold>(K)</bold> Acceptor Recall: the fraction of true acceptor sites that are correctly predicted. <bold>(L)</bold> Acceptor F1: the harmonic mean of precision and recall for acceptor sites. Each panel illustrates that increasing the flanking sequence length generally enhances model performance, with both SpliceAI-Keras and OpenSpliceAI achieving high accuracy and F1 scores at 10,000 nt. Each data point represents the mean across five independently trained models, with error bars indicating the standard deviation.</p></caption>
<graphic xlink:href="644351v2_figs9.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
<fig id="figs10" position="float" orientation="portrait" fig-type="figure">
<label>Figure S10.</label>
<caption><title>Splice site prediction metrics for the zebrafish (<italic>Danio rerio</italic>) across varying flanking sequence lengths. Plots compare performance of SpliceAI-Keras (blue) and OSAI<sub>Zebrafish</sub> (orange) on donor (5′) and acceptor (3′) splice site predictions using 80, 400, 2000, and 10,000 nt of flanking context.</title><p>OSAI<sub>Zebrafish</sub> was trained with RefSeq GRCz11 annotation (<ext-link ext-link-type="uri" xlink:href="https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/002/035/GCF_000002035.6_GRCz11/GCF_000002035.6_GRCz11_genomic.gff.gz">https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/002/035/GCF_000002035.6_GRCz11/GCF_000002035.6_GRCz11_genomic.gff.gz</ext-link>) and GRCz11 genome. <bold>(A)</bold> Donor Top-1: measures the percentage of times the model’s most confident prediction exactly matches the true donor site label. <bold>(B)</bold> Donor AUPRC: Area Under the Precision–Recall Curve for donor site predictions. <bold>(C)</bold> Donor Accuracy: proportion of correct donor site calls among all predictions. <bold>(D)</bold> Donor Precision: the fraction of predicted donor sites that are correct. <bold>(E)</bold> Donor Recall: the fraction of true donor sites that are correctly predicted. <bold>(F)</bold> Donor F1: the harmonic mean of precision and recall for donor sites. <bold>(G)</bold> Acceptor Top-1: measures the percentage of times the model’s most confident prediction exactly matches the true acceptor site label. <bold>(H)</bold> Acceptor AUPRC: Area Under the Precision–Recall Curve for acceptor site predictions. <bold>(I)</bold> Acceptor Accuracy: proportion of correct acceptor site calls among all predictions. <bold>(J)</bold> Acceptor Precision: the fraction of predicted acceptor sites that are correct. <bold>(K)</bold> Acceptor Recall: the fraction of true acceptor sites that are correctly predicted. <bold>(L)</bold> Acceptor F1: the harmonic mean of precision and recall for acceptor sites. Each panel illustrates that increasing the flanking sequence length generally enhances model performance, with both SpliceAI-Keras and OpenSpliceAI achieving high accuracy and F1 scores at 10,000 nt. Each data point represents the mean across five independently trained models, with error bars indicating the standard deviation.</p></caption>
<graphic xlink:href="644351v2_figs10.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
<fig id="figs11" position="float" orientation="portrait" fig-type="figure">
<label>Figure S11.</label>
<caption><title>Splice site prediction metrics for the <italic>Arabidopsis thaliana</italic> across varying flanking sequence lengths. Plots compare performance of SpliceAI-Keras (blue) and OSAI<sub>Arabidopsis</sub> (orange) on donor (5′) and acceptor (3′) splice site predictions using 80, 400, 2000, and 10,000 nt of flanking context.</title><p>OSAI<sub>Arabidopsis</sub> was trained with RefSeq TAIR10.1 annotation (<ext-link ext-link-type="uri" xlink:href="https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/001/735/GCF_000001735.4_TAIR10.1/GCF_000001735.4_TAIR10.1_genomic.gff.gz">https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/001/735/GCF_000001735.4_TAIR10.1/GCF_000001735.4_TAIR10.1_genomic.gff.gz</ext-link>) and TAIR10.1 genome. <bold>(A)</bold> Donor Top-1: measures the percentage of times the model’s most confident prediction exactly matches the true donor site label. <bold>(B)</bold> Donor AUPRC: Area Under the Precision–Recall Curve for donor site predictions. <bold>(C)</bold> Donor Accuracy: proportion of correct donor site calls among all predictions. <bold>(D)</bold> Donor Precision: the fraction of predicted donor sites that are correct. <bold>(E)</bold> Donor Recall: the fraction of true donor sites that are correctly predicted. <bold>(F)</bold> Donor F1: the harmonic mean of precision and recall for donor sites. <bold>(G)</bold> Acceptor Top-1: measures the percentage of times the model’s most confident prediction exactly matches the true acceptor site label. <bold>(H)</bold> Acceptor AUPRC: Area Under the Precision–Recall Curve for acceptor site predictions. <bold>(I)</bold> Acceptor Accuracy: proportion of correct acceptor site calls among all predictions. <bold>(J)</bold> Acceptor Precision: the fraction of predicted acceptor sites that are correct. <bold>(K)</bold> Acceptor Recall: the fraction of true acceptor sites that are correctly predicted. <bold>(L)</bold> Acceptor F1: the harmonic mean of precision and recall for acceptor sites. Each panel illustrates that increasing the flanking sequence length generally enhances model performance, with both SpliceAI-Keras and OpenSpliceAI achieving high accuracy and F1 scores at 10,000 nt. Each data point represents the mean across five independently trained models, with error bars indicating the standard deviation.</p></caption>
<graphic xlink:href="644351v2_figs11.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
<fig id="figs12" position="float" orientation="portrait" fig-type="figure">
<label>Figure S12.</label>
<caption><title>Transfer learning from OSAI<sub>MANE</sub> was leveraged to evaluate performance metrics for splice site prediction in mouse (<italic>Mus musculus</italic>) across four flanking sequence lengths (80, 400, 2,000, and 10,000 nucleotides) and two splice site types (acceptor and donor).</title><p>Each row corresponds to a unique flanking length–splice site combination, and each column depicts a distinct evaluation metric (Top-1 accuracy, F1, and AUPRC). Blue and red curves represent the mean performance (± standard deviation) of five models trained from scratch and five models fine-tuned from OSAI<sub>MANE</sub>, respectively. The x-axis indicates the training epoch, and the y-axis denotes the corresponding metric value. Subplot titles specify the flanking length, splice site type, and metric. Overall, fine-tuned models converge more rapidly, reaching stable performance as early as the first epoch, whereas models trained from scratch require additional epochs to stabilize.</p></caption>
<graphic xlink:href="644351v2_figs12.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
<fig id="figs13" position="float" orientation="portrait" fig-type="figure">
<label>Figure S13.</label>
<caption><title>Transfer learning from OSAI<sub>MANE</sub> was leveraged to evaluate performance metrics for splice site prediction in honeybee (<italic>Apis mellifera</italic>) across four flanking sequence lengths (80, 400, 2,000, and 10,000 nucleotides) and two splice site types (acceptor and donor).</title><p>Each row corresponds to a unique flanking length–splice site combination, and each column depicts a distinct evaluation metric (Top-1 accuracy, F1, and AUPRC). Blue and red curves represent the mean performance (± standard deviation) of five models trained from scratch and five models fine-tuned from OSAI<sub>MANE</sub>, respectively. The x-axis indicates the training epoch, and the y-axis denotes the corresponding metric value. Subplot titles specify the flanking length, splice site type, and metric. Overall, fine-tuned models converge more rapidly, reaching stable performance as early as the first epoch, whereas models trained from scratch require additional epochs to stabilize.</p></caption>
<graphic xlink:href="644351v2_figs13.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
<fig id="figs14" position="float" orientation="portrait" fig-type="figure">
<label>Figure S14.</label>
<caption><title>Transfer learning from OSAI<sub>MANE</sub> was leveraged to evaluate performance metrics for splice site prediction in zebrafish (<italic>Danio rerio</italic>) across four flanking sequence lengths (80, 400, 2,000, and 10,000 nucleotides) and two splice site types (acceptor and donor).</title><p>Each row corresponds to a unique flanking length–splice site combination, and each column depicts a distinct evaluation metric (Top-1 accuracy, F1, and AUPRC). Blue and red curves represent the mean performance (± standard deviation) of five models trained from scratch and five models fine-tuned from OSAI<sub>MANE</sub>, respectively. The x-axis indicates the training epoch, and the y-axis denotes the corresponding metric value. Subplot titles specify the flanking length, splice site type, and metric. Overall, fine-tuned models converge more rapidly, reaching stable performance as early as the first epoch, whereas models trained from scratch require additional epochs to stabilize.</p></caption>
<graphic xlink:href="644351v2_figs14.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
<fig id="figs15" position="float" orientation="portrait" fig-type="figure">
<label>Figure S15.</label>
<caption><title>Transfer learning from OSAI<sub>MANE</sub> was leveraged to evaluate performance metrics for splice site prediction in <italic>Arabidopsis thaliana</italic> across four flanking sequence lengths (80, 400, 2,000, and 10,000 nucleotides) and two splice site types (acceptor and donor).</title><p>Each row corresponds to a unique flanking length–splice site combination, and each column depicts a distinct evaluation metric (Top-1 accuracy, F1, and AUPRC). Blue and red curves represent the mean performance (± standard deviation) of five models trained from scratch and five models fine-tuned from OSAI<sub>MANE</sub>, respectively. The x-axis indicates the training epoch, and the y-axis denotes the corresponding metric value. Subplot titles specify the flanking length, splice site type, and metric. Overall, fine-tuned models converge more rapidly, reaching stable performance as early as the first epoch, whereas models trained from scratch require additional epochs to stabilize.</p></caption>
<graphic xlink:href="644351v2_figs15.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
<fig id="figs16" position="float" orientation="portrait" fig-type="figure">
<label>Figure S16.</label>
<caption><title>Calibration results for human MANE splice site classification at four flanking sequence sizes.</title><p><bold>(A, C, E, G)</bold> Reliability (calibration) curves for flanking sequence sizes of 80, 400, 2000, and 10,000 nucleotides, respectively. Each plot compares predicted probabilities (x-axis) to empirical probabilities (y- axis) for non-splice sites (left), acceptor sites (middle), and donor sites (right). The blue curves depict the reliability of the original OSAI<sub>MANE</sub> models, while the green curves show reliability after calibration. Shaded regions represent confidence intervals. The diagonal black line indicates perfect calibration, where predicted probabilities match observed frequencies exactly. <bold>(B, D, F, H)</bold> Temperature scaling maps for each corresponding flanking sequence size, illustrating how raw predicted probabilities for acceptor (x-axis) and donor (y-axis) sites are transformed after calibration. Arrows indicate the shift from pre- to post-calibration states in two-dimensional probability space.</p></caption>
<graphic xlink:href="644351v2_figs16.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
<fig id="figs17" position="float" orientation="portrait" fig-type="figure">
<label>Figure S17.</label>
<caption><title>Expected Calibration Error (ECE) on the validation (top) and test (bottom) sets.</title><p>Blue bars indicate model performance before calibration, and orange bars indicate performance after calibration. Results are shown for (A) Human-MANE, (B) mouse, (C) honeybee, (D) <italic>Arabidopsis</italic>, and (E) zebrafish.</p></caption>
<graphic xlink:href="644351v2_figs17.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
<fig id="figs18" position="float" orientation="portrait" fig-type="figure">
<label>Figure S18.</label>
<caption><title>Negative log likelihood (NLL) loss on the validation (top) and test (bottom) sets.</title><p>Blue bars indicate model performance before calibration, and orange bars indicate performance after calibration. Results are shown for (A) Human-MANE, (B) mouse, (C) honeybee, (D) <italic>Arabidopsis</italic>, and (E) zebrafish.</p></caption>
<graphic xlink:href="644351v2_figs18.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
<fig id="figs19" position="float" orientation="portrait" fig-type="figure">
<label>Figure S19.</label>
<caption><title>Calibration results for house mouse (<italic>Mus musculus</italic>) splice site classification at four flanking sequence sizes.</title><p><bold>(A, C, E, G)</bold> Reliability (calibration) curves for flanking sequence sizes of 80, 400, 2000, and 10,000 nucleotides, respectively. Each plot compares predicted probabilities (x-axis) to empirical probabilities (y-axis) for non-splice sites (left), acceptor sites (middle), and donor sites (right). The blue curves depict the reliability of the original OSAI<sub>Mouse</sub> models, while the green curves show reliability after calibration. Shaded regions represent confidence intervals. The diagonal black line indicates perfect calibration, where predicted probabilities match observed frequencies exactly. <bold>(B, D, F, H)</bold> Temperature scaling maps for each corresponding flanking sequence size, illustrating how raw predicted probabilities for acceptor (x-axis) and donor (y-axis) sites are transformed after calibration. Arrows indicate the shift from pre- to post-calibration states in two-dimensional probability space.</p></caption>
<graphic xlink:href="644351v2_figs19.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
<fig id="figs20" position="float" orientation="portrait" fig-type="figure">
<label>Figure S20.</label>
<caption><title>Calibration results for zebrafish (<italic>Danio rerio</italic>) splice site classification at four flanking sequence sizes.</title><p><bold>(A, C, E, G)</bold> Reliability (calibration) curves for flanking sequence sizes of 80, 400, 2000, and 10,000 nucleotides, respectively. Each plot compares predicted probabilities (x-axis) to empirical probabilities (y- axis) for non-splice sites (left), acceptor sites (middle), and donor sites (right). The blue curves depict the reliability of the original OSAI<sub>Zebrafish</sub> models, while the green curves show reliability after calibration. Shaded regions represent confidence intervals. The diagonal black line indicates perfect calibration, where predicted probabilities match observed frequencies exactly. <bold>(B, D, F, H)</bold> Temperature scaling maps for each corresponding flanking sequence size, illustrating how raw predicted probabilities for acceptor (x-axis) and donor (y-axis) sites are transformed after calibration. Arrows indicate the shift from pre- to post-calibration states in two-dimensional probability space.</p></caption>
<graphic xlink:href="644351v2_figs20.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
<fig id="figs21" position="float" orientation="portrait" fig-type="figure">
<label>Figure S21.</label>
<caption><title>Calibration results for honeybee (<italic>Apis mellifera</italic>) splice site classification at four flanking sequence sizes.</title><p><bold>(A, C, E, G)</bold> Reliability (calibration) curves for flanking sequence sizes of 80, 400, 2000, and 10,000 nucleotides, respectively. Each plot compares predicted probabilities (x-axis) to empirical probabilities (y-axis) for non-splice sites (left), acceptor sites (middle), and donor sites (right). The blue curves depict the reliability of the original OSAI<sub>Honeybee</sub> models, while the green curves show reliability after calibration. Shaded regions represent confidence intervals. The diagonal black line indicates perfect calibration, where predicted probabilities match observed frequencies exactly. <bold>(B, D, F, H)</bold> Temperature scaling maps for each corresponding flanking sequence size, illustrating how raw predicted probabilities for acceptor (x-axis) and donor (y-axis) sites are transformed after calibration. Arrows indicate the shift from pre- to post-calibration states in two-dimensional probability space.</p></caption>
<graphic xlink:href="644351v2_figs21.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
<fig id="figs22" position="float" orientation="portrait" fig-type="figure">
<label>Figure S22.</label>
<caption><title>Calibration results for <italic>Arabidopsis thaliana</italic> splice site classification at four flanking sequence sizes.</title><p><bold>(A, C, E, G)</bold> Reliability (calibration) curves for flanking sequence sizes of 80, 400, 2000, and 10,000 nucleotides, respectively. Each plot compares predicted probabilities (x-axis) to empirical probabilities (y- axis) for non-splice sites (left), acceptor sites (middle), and donor sites (right). The blue curves depict the reliability of the original OSAI<sub>Arabidopsis</sub> models, while the green curves show reliability after calibration. Shaded regions represent confidence intervals. The diagonal black line indicates perfect calibration, where predicted probabilities match observed frequencies exactly. <bold>(B, D, F, H)</bold> Temperature scaling maps for each corresponding flanking sequence size, illustrating how raw predicted probabilities for acceptor (x-axis) and donor (y-axis) sites are transformed after calibration. Arrows indicate the shift from pre- to post-calibration states in two-dimensional probability space.</p></caption>
<graphic xlink:href="644351v2_figs22.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
<fig id="figs23" position="float" orientation="portrait" fig-type="figure">
<label>Figure S23.</label>
<caption><title>Zoomed-in 160 bp DNA sequence logos derived from ISM importance-score profiles for representative donor <bold>(A–E)</bold> and acceptor <bold>(F–J)</bold> splice sites.</title><p>Logos were generated by mapping the ISM importance score at each position centered on the splice site to letter heights, with SpliceAI scores shown in the upper logo and OSAI<sub>MANE</sub> scores shown in the lower logo of each panel.</p></caption>
<graphic xlink:href="644351v2_figs23.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
<fig id="figs24" position="float" orientation="portrait" fig-type="figure">
<label>Figure S24.</label>
<caption><title>Cross-species transfer learning performance on human splice-site prediction.</title><p>Models pretrained on <bold>(A)</bold> <italic>Arabidopsis thaliana</italic> (OSAI<sub>Arabidopsis</sub>), <bold>(B)</bold> <italic>Apis mellifera</italic> (OSAI<sub>Honeybee</sub>), <bold>(C)</bold> <italic>Mus musculus</italic> (OSAI<sub>Mouse</sub>), and <bold>(D)</bold> <italic>Danio rerio</italic> (OSAI<sub>Zebrafish</sub>) were fine-tuned on the human MANE dataset (orange) and compared to a model trained from scratch on MANE (OSAI<sub>MANE</sub>, blue). Within each panel, the top row shows donor Top-K (left) and donor F1 (right) scores, and the bottom row shows acceptor Top-K (left) and acceptor F1 (right) scores. The x-axis indicates models trained with flanking sequence sizes of 80, 400, 2,000, and 10,000 bp.</p></caption>
<graphic xlink:href="644351v2_figs24.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
<fig id="figs25" position="float" orientation="portrait" fig-type="figure">
<label>Figure S25.</label>
<caption><title>Decision-making and workflow of the predict subcommand.</title><p>Required inputs include the FASTA file and PyTorch model, while optional inputs include a GFF annotation file and custom parameters. The outputs are two BED files corresponding to predicted donor and acceptor splice sites. Several intermediate files may be generated and useful to the user, including the HDF5-compressed datafile (raw sequences) and dataset (encoded inputs) for training.</p></caption>
<graphic xlink:href="644351v2_figs25.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
<fig id="figs26" position="float" orientation="portrait" fig-type="figure">
<label>Figure S26.</label>
<caption><title>Decision-making and workflow of the variant subcommand.</title><p>Required inputs include the VCF file, FASTA file, and annotation file, while optional inputs include the output path, splicing model, and distance, precision, and masking parameters. The output is a VCF file with the OpenSpliceAI delta scores of the variants. Note that both Keras and PyTorch models are supported in this tool, but PyTorch is recommended.</p></caption>
<graphic xlink:href="644351v2_figs26.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
<fig id="figs27" position="float" orientation="portrait" fig-type="figure">
<label>Figure S27.</label>
<caption><title>Overview of the OpenSpliceAI architectures trained with different flanking sequence lengths.</title><p><bold>(A)</bold> OpenSpliceAI-10k: Schematic of the model configured for 10 kb flanking regions. The input sequence is passed through an initial convolution layer (Conv1D), followed by 16 residual units, each incorporating skip connections. The final output is fed into a softmax function for splice site classification. <bold>(B)</bold> OpenSpliceAI-2k: Model variant with 2 kb flanking sequences, using a similar structure with 12 repeated residual units. <bold>(C)</bold> OpenSpliceAI-400: Model variant with 400 bp flanking sequences, using a similar structure with 8 repeated residual units. <bold>(D)</bold> OpenSpliceAI-80: The smallest variant, trained on 80 bp flanking sequences, using a similar structure with 4 repeated residual units. <bold>(E)</bold> Detailed view of the residual unit (RU) structure, highlighting the convolution, batch normalization, and skip connections. <bold>(F)</bold> Training setup: All models were trained using the AdamW optimizer, either a MultiStepLR or CosineAnnealingWarmRestarts learning rate scheduler, and cross-entropy or focal loss functions.</p></caption>
<graphic xlink:href="644351v2_figs27.tif" mime-subtype="tiff" mimetype="image"/>
</fig>
</sec>
<ack>
<title>Acknowledgements</title>
<p>We thank all the members of the Salzberg and Pertea Labs for their valuable discussions and insights.</p>
</ack> 
    <sec id="d1e1213" sec-type="additional-information">
        <title>Additional information</title>
        <sec id="s4">
            <title>Funding</title>
            <p>This research was supported in part by the U.S. National Institutes of Health under grants R01-HG006677, R35-GM130151, and R35-GM156470, and by the U.S. National Science Foundation under and DBI 2412449. Computational work was carried out at the Advanced Research Computing at Hopkins (ARCH) core facility, supported in part by NSF grant OAC 1920103.</p>
        </sec>
    </sec>
<sec id="additional-files" sec-type="supplementary-material">
<title>Additional files</title>
<supplementary-material id="d1e2475">
<label>Supplementary Figures</label>
<media xlink:href="supplements/644351_file09.pdf"/>
</supplementary-material>
<supplementary-material id="d1e2482">
<label>Supplemental Notes</label>
<media xlink:href="supplements/644351_file10.pdf"/>
</supplementary-material>
</sec>
    <sec id="nt1">
        <title>Note</title>
        <p>This reviewed preprint has been updated to correct level headings.</p>
    </sec>
<ref-list>
<title>References</title>
<ref id="c1"><label>1.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Aartsma-Rus</surname> <given-names>A</given-names></string-name>, <string-name><surname>Bremmer-Bout</surname> <given-names>M</given-names></string-name>, <string-name><surname>Janson</surname> <given-names>AAM</given-names></string-name>, <string-name><surname>Den Dunnen</surname> <given-names>JT</given-names></string-name>, <string-name><surname>Van Ommen</surname> <given-names>G-JB</given-names></string-name>, <string-name><surname>Van Deutekom</surname> <given-names>JCT</given-names></string-name></person-group>. <year>2002</year>. <article-title>Targeted exon skipping as a potential gene correction therapy for Duchenne muscular dystrophy</article-title>. <source>Neuromuscular Disorders</source> <volume>12</volume>:<fpage>S71</fpage>–<lpage>S77</lpage>. doi:<pub-id pub-id-type="doi">10.1016/S0960-8966(02)00086-X</pub-id></mixed-citation></ref>
<ref id="c2"><label>2.</label><mixed-citation publication-type="preprint"><person-group person-group-type="author"><string-name><surname>Abadi</surname> <given-names>M</given-names></string-name>, <string-name><surname>Agarwal</surname> <given-names>A</given-names></string-name>, <string-name><surname>Barham</surname> <given-names>P</given-names></string-name>, <string-name><surname>Brevdo</surname> <given-names>E</given-names></string-name>, <string-name><surname>Chen</surname> <given-names>Z</given-names></string-name>, <string-name><surname>Citro</surname> <given-names>C</given-names></string-name>, <string-name><surname>Corrado</surname> <given-names>GS</given-names></string-name>, <string-name><surname>Davis</surname> <given-names>A</given-names></string-name>, <string-name><surname>Dean</surname> <given-names>J</given-names></string-name>, <string-name><surname>Devin</surname> <given-names>M</given-names></string-name>, <string-name><surname>Ghemawat</surname> <given-names>S</given-names></string-name>, <string-name><surname>Goodfellow</surname> <given-names>I</given-names></string-name>, <string-name><surname>Harp</surname> <given-names>A</given-names></string-name>, <string-name><surname>Irving</surname> <given-names>G</given-names></string-name>, <string-name><surname>Isard</surname> <given-names>M</given-names></string-name>, <string-name><surname>Jia</surname> <given-names>Y</given-names></string-name>, <string-name><surname>Jozefowicz</surname> <given-names>R</given-names></string-name>, <string-name><surname>Kaiser</surname> <given-names>L</given-names></string-name>, <string-name><surname>Kudlur</surname> <given-names>M</given-names></string-name>, <string-name><surname>Levenberg</surname> <given-names>J</given-names></string-name>, <string-name><surname>Mane</surname> <given-names>D</given-names></string-name>, <string-name><surname>Monga</surname> <given-names>R</given-names></string-name>, <string-name><surname>Moore</surname> <given-names>S</given-names></string-name>, <string-name><surname>Murray</surname> <given-names>D</given-names></string-name>, <string-name><surname>Olah</surname> <given-names>C</given-names></string-name>, <string-name><surname>Schuster</surname> <given-names>M</given-names></string-name>, <string-name><surname>Shlens</surname> <given-names>J</given-names></string-name>, <string-name><surname>Steiner</surname> <given-names>B</given-names></string-name>, <string-name><surname>Sutskever</surname> <given-names>I</given-names></string-name>, <string-name><surname>Talwar</surname> <given-names>K</given-names></string-name>, <string-name><surname>Tucker</surname> <given-names>P</given-names></string-name>, <string-name><surname>Vanhoucke</surname> <given-names>V</given-names></string-name>, <string-name><surname>Vasudevan</surname> <given-names>V</given-names></string-name>, <string-name><surname>Viegas</surname> <given-names>F</given-names></string-name>, <string-name><surname>Vinyals</surname> <given-names>O</given-names></string-name>, <string-name><surname>Warden</surname> <given-names>P</given-names></string-name>, <string-name><surname>Wattenberg</surname> <given-names>M</given-names></string-name>, <string-name><surname>Wicke</surname> <given-names>M</given-names></string-name>, <string-name><surname>Yu</surname> <given-names>Y</given-names></string-name>, <string-name><surname>Zheng</surname> <given-names>X</given-names></string-name></person-group>. <year>2016</year>. <article-title>TensorFlow: Large-Scale Machine Learning on Heterogeneous Distributed Systems</article-title>. <source>arXiv</source>, doi:<pub-id pub-id-type="doi">10.48550/ARXIV.1603.04467</pub-id></mixed-citation></ref>
<ref id="c3"><label>3.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Agarwal</surname> <given-names>V</given-names></string-name>, <string-name><surname>Kelley</surname> <given-names>DR</given-names></string-name></person-group>. <year>2022</year>. <article-title>The genetic and biochemical determinants of mRNA degradation rates in mammals</article-title>. <source>Genome Biol</source> <volume>23</volume>:<fpage>245</fpage>. doi:<pub-id pub-id-type="doi">10.1186/s13059-022-02811-x</pub-id></mixed-citation></ref>
<ref id="c4"><label>4.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Alipanahi</surname> <given-names>B</given-names></string-name>, <string-name><surname>Delong</surname> <given-names>A</given-names></string-name>, <string-name><surname>Weirauch</surname> <given-names>MT</given-names></string-name>, <string-name><surname>Frey</surname> <given-names>BJ</given-names></string-name></person-group>. <year>2015</year>. <article-title>Predicting the sequence specificities of DNA- and RNA-binding proteins by deep learning</article-title>. <source>Nat Biotechnol</source> <volume>33</volume>:<fpage>831</fpage>–<lpage>838</lpage>. doi:<pub-id pub-id-type="doi">10.1038/nbt.3300</pub-id></mixed-citation></ref>
<ref id="c5"><label>5.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Baralle</surname> <given-names>FE</given-names></string-name>, <string-name><surname>Giudice</surname> <given-names>J</given-names></string-name></person-group>. <year>2017</year>. <article-title>Alternative splicing as a regulator of development and tissue identity</article-title>. <source>Nat Rev Mol Cell Biol</source> <volume>18</volume>:<fpage>437</fpage>–<lpage>451</lpage>. doi:<pub-id pub-id-type="doi">10.1038/nrm.2017.27</pub-id></mixed-citation></ref>
<ref id="c6"><label>6.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Barash</surname> <given-names>Y</given-names></string-name>, <string-name><surname>Calarco</surname> <given-names>JA</given-names></string-name>, <string-name><surname>Gao</surname> <given-names>W</given-names></string-name>, <string-name><surname>Pan</surname> <given-names>Q</given-names></string-name>, <string-name><surname>Wang</surname> <given-names>X</given-names></string-name>, <string-name><surname>Shai</surname> <given-names>O</given-names></string-name>, <string-name><surname>Blencowe</surname> <given-names>BJ</given-names></string-name>, <string-name><surname>Frey</surname> <given-names>BJ</given-names></string-name></person-group>. <year>2010</year>. <article-title>Deciphering the splicing code</article-title>. <source>Nature</source> <volume>465</volume>:<fpage>53</fpage>–<lpage>59</lpage>. doi:<pub-id pub-id-type="doi">10.1038/nature09000</pub-id></mixed-citation></ref>
<ref id="c7"><label>7.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Black</surname> <given-names>DL</given-names></string-name></person-group>. <year>2000</year>. <article-title>Protein Diversity from Alternative Splicing</article-title>. <source>Cell</source> <volume>103</volume>:<fpage>367</fpage>–<lpage>370</lpage>. doi:<pub-id pub-id-type="doi">10.1016/S0092-8674(00)00128-8</pub-id></mixed-citation></ref>
<ref id="c8"><label>8.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Blencowe</surname> <given-names>BJ</given-names></string-name></person-group>. <year>2006</year>. <article-title>Alternative Splicing: New Insights from Global Analyses</article-title>. <source>Cell</source> <volume>126</volume>:<fpage>37</fpage>–<lpage>47</lpage>. doi:<pub-id pub-id-type="doi">10.1016/j.cell.2006.06.023</pub-id></mixed-citation></ref>
<ref id="c9"><label>9.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Bonnal</surname> <given-names>SC</given-names></string-name>, <string-name><surname>López-Oreja</surname> <given-names>I</given-names></string-name>, <string-name><surname>Valcárcel</surname> <given-names>J</given-names></string-name></person-group>. <year>2020</year>. <article-title>Roles and mechanisms of alternative splicing in cancer — implications for care</article-title>. <source>Nat Rev Clin Oncol</source> <volume>17</volume>:<fpage>457</fpage>–<lpage>474</lpage>. doi:<pub-id pub-id-type="doi">10.1038/s41571-020-0350-x</pub-id></mixed-citation></ref>
<ref id="c10"><label>10.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Braunschweig</surname> <given-names>U</given-names></string-name>, <string-name><surname>Gueroussov</surname> <given-names>S</given-names></string-name>, <string-name><surname>Plocik</surname> <given-names>AM</given-names></string-name>, <string-name><surname>Graveley</surname> <given-names>BR</given-names></string-name>, <string-name><surname>Blencowe</surname> <given-names>BJ</given-names></string-name></person-group>. <year>2013</year>. <article-title>Dynamic Integration of Splicing within Gene Regulatory Pathways</article-title>. <source>Cell</source> <volume>152</volume>:<fpage>1252</fpage>–<lpage>1269</lpage>. doi:<pub-id pub-id-type="doi">10.1016/j.cell.2013.02.034</pub-id></mixed-citation></ref>
<ref id="c11"><label>11.</label><mixed-citation publication-type="confproc"><person-group person-group-type="author"><string-name><surname>Bridle</surname> <given-names>JS.</given-names></string-name></person-group> <year>1989</year>. <article-title>Training stochastic model recognition algorithms as networks can lead to maximum mutual information estimation of parameters</article-title>, <conf-name>Advances in Neural Information Processing Systems, NIPS’89</conf-name>. <publisher-loc>Cambridge, MA, USA</publisher-loc>: <publisher-name>MIT Press</publisher-name>. pp. <fpage>211</fpage>–<lpage>217</lpage>.</mixed-citation></ref>
<ref id="c12"><label>12.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Brow</surname> <given-names>DA</given-names></string-name></person-group>. <year>2002</year>. <article-title>Allosteric Cascade of Spliceosome Activation</article-title>. <source>Annu Rev Genet</source> <volume>36</volume>:<fpage>333</fpage>–<lpage>360</lpage>. doi:<pub-id pub-id-type="doi">10.1146/annurev.genet.36.043002.091635</pub-id></mixed-citation></ref>
<ref id="c13"><label>13.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Burnett</surname> <given-names>BG</given-names></string-name>, <string-name><surname>Muñoz</surname> <given-names>E</given-names></string-name>, <string-name><surname>Tandon</surname> <given-names>A</given-names></string-name>, <string-name><surname>Kwon</surname> <given-names>DY</given-names></string-name>, <string-name><surname>Sumner</surname> <given-names>CJ</given-names></string-name>, <string-name><surname>Fischbeck</surname> <given-names>KH</given-names></string-name></person-group>. <year>2009</year>. <article-title>Regulation of SMN Protein Stability</article-title>. <source>Molecular and Cellular Biology</source> <volume>29</volume>:<fpage>1107</fpage>–<lpage>1115</lpage>. doi:<pub-id pub-id-type="doi">10.1128/MCB.01262-08</pub-id></mixed-citation></ref>
<ref id="c14"><label>14.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Dlamini</surname> <given-names>Z</given-names></string-name>, <string-name><surname>Mokoena</surname> <given-names>F</given-names></string-name>, <string-name><surname>Hull</surname> <given-names>R</given-names></string-name></person-group>. <year>2017</year>. <article-title>Abnormalities in alternative splicing in diabetes: therapeutic targets</article-title>. <source>Journal of Molecular Endocrinology</source> <volume>59</volume>:<fpage>R93</fpage>–<lpage>R107</lpage>. doi:<pub-id pub-id-type="doi">10.1530/JME-17-0049</pub-id></mixed-citation></ref>
<ref id="c15"><label>15.</label><mixed-citation publication-type="preprint"><person-group person-group-type="author"><string-name><surname>Fort</surname> <given-names>S</given-names></string-name>, <string-name><surname>Hu</surname> <given-names>H</given-names></string-name>, <string-name><surname>Lakshminarayanan</surname> <given-names>B.</given-names></string-name></person-group> <year>2019</year>. <article-title>Deep Ensembles: A Loss Landscape Perspective</article-title>. <source>arXiv</source> doi:<pub-id pub-id-type="doi">10.48550/ARXIV.1912.02757</pub-id></mixed-citation></ref>
<ref id="c16"><label>16.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Frilander</surname> <given-names>MJ</given-names></string-name>, <string-name><surname>Steitz</surname> <given-names>JA</given-names></string-name></person-group>. <year>1999</year>. <article-title>Initial recognition of U12-dependent introns requires both U11/5’ splice-site and U12/branchpoint interactions</article-title>. <source>Genes &amp; Development</source> <volume>13</volume>:<fpage>851</fpage>–<lpage>863</lpage>. doi:<pub-id pub-id-type="doi">10.1101/gad.13.7.851</pub-id></mixed-citation></ref>
<ref id="c17"><label>17.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Fudenberg</surname> <given-names>G</given-names></string-name>, <string-name><surname>Kelley</surname> <given-names>DR</given-names></string-name>, <string-name><surname>Pollard</surname> <given-names>KS</given-names></string-name></person-group>. <year>2020</year>. <article-title>Predicting 3D genome folding from DNA sequence with Akita</article-title>. <source>Nat Methods</source> <volume>17</volume>:<fpage>1111</fpage>–<lpage>1117</lpage>. doi:<pub-id pub-id-type="doi">10.1038/s41592-020-0958-x</pub-id></mixed-citation></ref>
<ref id="c18"><label>18.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Gotthardt</surname> <given-names>M</given-names></string-name>, <string-name><surname>Badillo-Lisakowski</surname> <given-names>V</given-names></string-name>, <string-name><surname>Parikh</surname> <given-names>VN</given-names></string-name>, <string-name><surname>Ashley</surname> <given-names>E</given-names></string-name>, <string-name><surname>Furtado</surname> <given-names>M</given-names></string-name>, <string-name><surname>Carmo-Fonseca</surname> <given-names>M</given-names></string-name>, <string-name><surname>Schudy</surname> <given-names>S</given-names></string-name>, <string-name><surname>Meder</surname> <given-names>B</given-names></string-name>, <string-name><surname>Grosch</surname> <given-names>M</given-names></string-name>, <string-name><surname>Steinmetz</surname> <given-names>L</given-names></string-name>, <string-name><surname>Crocini</surname> <given-names>C</given-names></string-name>, <string-name><surname>Leinwand</surname> <given-names>L</given-names></string-name></person-group>. <year>2023</year>. <article-title>Cardiac splicing as a diagnostic and therapeutic target</article-title>. <source>Nat Rev Cardiol</source> <volume>20</volume>:<fpage>517</fpage>–<lpage>530</lpage>. doi:<pub-id pub-id-type="doi">10.1038/s41569-022-00828-0</pub-id></mixed-citation></ref>
<ref id="c19"><label>19.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Gupta</surname> <given-names>S</given-names></string-name>, <string-name><surname>Stamatoyannopoulos</surname> <given-names>JA</given-names></string-name>, <string-name><surname>Bailey</surname> <given-names>TL</given-names></string-name>, <string-name><surname>Noble</surname> <given-names>WS</given-names></string-name></person-group>. <year>2007</year>. <article-title>Quantifying similarity between motifs</article-title>. <source>Genome Biol</source> <volume>8</volume>:<fpage>R24</fpage>. doi:<pub-id pub-id-type="doi">10.1186/gb-2007-8-2-r24</pub-id></mixed-citation></ref>
<ref id="c20"><label>20.</label><mixed-citation publication-type="preprint"><person-group person-group-type="author"><string-name><surname>Hinton</surname> <given-names>G</given-names></string-name>, <string-name><surname>Vinyals</surname> <given-names>O</given-names></string-name>, <string-name><surname>Dean</surname> <given-names>J</given-names></string-name></person-group>. <year>2015</year>. <article-title>Distilling the knowledge in a neural network</article-title>. <source>arXiv</source>, <pub-id pub-id-type="doi">10.48550/arXiv.1503.02531</pub-id>.</mixed-citation></ref>
<ref id="c21"><label>21.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Jaganathan</surname> <given-names>K</given-names></string-name>, <string-name><surname>Kyriazopoulou Panagiotopoulou</surname> <given-names>S</given-names></string-name>, <string-name><surname>McRae</surname> <given-names>JF</given-names></string-name>, <string-name><surname>Darbandi</surname> <given-names>SF</given-names></string-name>, <string-name><surname>Knowles</surname> <given-names>D</given-names></string-name>, <string-name><surname>Li</surname> <given-names>YI</given-names></string-name>, <string-name><surname>Kosmicki</surname> <given-names>JA</given-names></string-name>, <string-name><surname>Arbelaez</surname> <given-names>J</given-names></string-name>, <string-name><surname>Cui</surname> <given-names>W</given-names></string-name>, <string-name><surname>Schwartz</surname> <given-names>GB</given-names></string-name>, <string-name><surname>Chow</surname> <given-names>ED</given-names></string-name>, <string-name><surname>Kanterakis</surname> <given-names>E</given-names></string-name>, <string-name><surname>Gao</surname> <given-names>H</given-names></string-name>, <string-name><surname>Kia</surname> <given-names>A</given-names></string-name>, <string-name><surname>Batzoglou</surname> <given-names>S</given-names></string-name>, <string-name><surname>Sanders</surname> <given-names>SJ</given-names></string-name>, <string-name><surname>Farh</surname> <given-names>KK-H</given-names></string-name></person-group>. <year>2019</year>. <article-title>Predicting Splicing from Primary Sequence with Deep Learning</article-title>. <source>Cell</source> <volume>176</volume>:<fpage>535</fpage>–<lpage>548.e24.</lpage> doi:<pub-id pub-id-type="doi">10.1016/j.cell.2018.12.015</pub-id></mixed-citation></ref>
<ref id="c22"><label>22.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Jaynes</surname> <given-names>ET</given-names></string-name></person-group>. <year>1957</year>. <article-title>Information theory and statistical mechanics</article-title>. <source>Physical review</source> <volume>106</volume>:<fpage>620</fpage>.</mixed-citation></ref>
<ref id="c23"><label>23.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Johnson</surname> <given-names>JM</given-names></string-name>, <string-name><surname>Castle</surname> <given-names>J</given-names></string-name>, <string-name><surname>Garrett-Engele</surname> <given-names>P</given-names></string-name>, <string-name><surname>Kan</surname> <given-names>Z</given-names></string-name>, <string-name><surname>Loerch</surname> <given-names>PM</given-names></string-name>, <string-name><surname>Armour</surname> <given-names>CD</given-names></string-name>, <string-name><surname>Santos</surname> <given-names>R</given-names></string-name>, <string-name><surname>Schadt</surname> <given-names>EE</given-names></string-name>, <string-name><surname>Stoughton</surname> <given-names>R</given-names></string-name>, <string-name><surname>Shoemaker</surname> <given-names>DD</given-names></string-name></person-group>. <year>2003</year>. <article-title>Genome-Wide Survey of Human Alternative Pre-mRNA Splicing with Exon Junction Microarrays</article-title>. <source>Science</source> <volume>302</volume>:<fpage>2141</fpage>–<lpage>2144</lpage>. doi:<pub-id pub-id-type="doi">10.1126/science.1090100</pub-id></mixed-citation></ref>
<ref id="c24"><label>24.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Jung</surname> <given-names>H</given-names></string-name>, <string-name><surname>Lee</surname> <given-names>D</given-names></string-name>, <string-name><surname>Lee</surname> <given-names>J</given-names></string-name>, <string-name><surname>Park</surname> <given-names>D</given-names></string-name>, <string-name><surname>Kim</surname> <given-names>YJ</given-names></string-name>, <string-name><surname>Park</surname> <given-names>W-Y</given-names></string-name>, <string-name><surname>Hong</surname> <given-names>D</given-names></string-name>, <string-name><surname>Park</surname> <given-names>PJ</given-names></string-name>, <string-name><surname>Lee</surname> <given-names>E</given-names></string-name></person-group>. <year>2015</year>. <article-title>Intron retention is a widespread mechanism of tumor-suppressor inactivation</article-title>. <source>Nat Genet</source> <volume>47</volume>:<fpage>1242</fpage>–<lpage>1248</lpage>. doi:<pub-id pub-id-type="doi">10.1038/ng.3414</pub-id></mixed-citation></ref>
<ref id="c25"><label>25.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Kelley</surname> <given-names>DR</given-names></string-name>, <string-name><surname>Reshef</surname> <given-names>YA</given-names></string-name>, <string-name><surname>Bileschi</surname> <given-names>M</given-names></string-name>, <string-name><surname>Belanger</surname> <given-names>D</given-names></string-name>, <string-name><surname>McLean</surname> <given-names>CY</given-names></string-name>, <string-name><surname>Snoek</surname> <given-names>J</given-names></string-name></person-group>. <year>2018</year>. <article-title>Sequential regulatory activity prediction across chromosomes with convolutional neural networks</article-title>. <source>Genome Res</source> <volume>28</volume>:<fpage>739</fpage>– <lpage>750</lpage>. doi:<pub-id pub-id-type="doi">10.1101/gr.227819.117</pub-id></mixed-citation></ref>
<ref id="c26"><label>26.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Kelley</surname> <given-names>DR</given-names></string-name>, <string-name><surname>Snoek</surname> <given-names>J</given-names></string-name>, <string-name><surname>Rinn</surname> <given-names>JL</given-names></string-name></person-group>. <year>2016</year>. <article-title>Basset: learning the regulatory code of the accessible genome with deep convolutional neural networks</article-title>. <source>Genome Res</source> <volume>26</volume>:<fpage>990</fpage>–<lpage>999</lpage>. doi:<pub-id pub-id-type="doi">10.1101/gr.200535.115</pub-id></mixed-citation></ref>
<ref id="c27"><label>27.</label><mixed-citation publication-type="preprint"><person-group person-group-type="author"><string-name><surname>Kingma</surname> <given-names>DP</given-names></string-name>, <string-name><surname>Ba</surname> <given-names>J</given-names></string-name></person-group>. <year>2014</year>. <article-title>Adam: A Method for Stochastic Optimization</article-title>, <source>arXiv</source> doi:<pub-id pub-id-type="doi">10.48550/ARXIV.1412.6980</pub-id></mixed-citation></ref>
<ref id="c28"><label>28.</label><mixed-citation publication-type="confproc"><person-group person-group-type="author"><string-name><surname>Lakshminarayanan</surname> <given-names>B</given-names></string-name>, <string-name><surname>Pritzel</surname> <given-names>A</given-names></string-name>, <string-name><surname>Blundell</surname> <given-names>C</given-names></string-name></person-group>. <year>2017</year>. <article-title>Simple and Scalable Predictive Uncertainty Estimation using Deep Ensembles</article-title>. <conf-name>Advances in Neural Information Processing Systems 30</conf-name>, <publisher-loc>Cambridge, MA, USA</publisher-loc>: <publisher-name>MIT Press</publisher-name>.</mixed-citation></ref>
<ref id="c29"><label>29.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Lee</surname> <given-names>SC-W</given-names></string-name>, <string-name><surname>Abdel-Wahab</surname> <given-names>O</given-names></string-name></person-group>. <year>2016</year>. <article-title>Therapeutic targeting of splicing in cancer</article-title>. <source>Nat Med</source> <volume>22</volume>:<fpage>976</fpage>–<lpage>986</lpage>. doi:<pub-id pub-id-type="doi">10.1038/nm.4165</pub-id></mixed-citation></ref>
<ref id="c30"><label>30.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Li</surname> <given-names>D</given-names></string-name>, <string-name><surname>McIntosh</surname> <given-names>CS</given-names></string-name>, <string-name><surname>Mastaglia</surname> <given-names>FL</given-names></string-name>, <string-name><surname>Wilton</surname> <given-names>SD</given-names></string-name>, <string-name><surname>Aung-Htut</surname> <given-names>MT</given-names></string-name></person-group>. <year>2021</year>. <article-title>Neurodegenerative diseases: a hotbed for splicing defects and the potential therapies</article-title>. <source>Transl Neurodegener</source> <volume>10</volume>:<fpage>16</fpage>. doi:<pub-id pub-id-type="doi">10.1186/s40035-021-00240-7</pub-id></mixed-citation></ref>
<ref id="c31"><label>31.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Li</surname> <given-names>H</given-names></string-name></person-group>. <year>2018</year>. <article-title>Minimap2: pairwise alignment for nucleotide sequences</article-title>. <source>Bioinformatics</source> <volume>34</volume>:<fpage>3094</fpage>–<lpage>3100</lpage>. doi:<pub-id pub-id-type="doi">10.1093/bioinformatics/bty191</pub-id></mixed-citation></ref>
<ref id="c32"><label>32.</label><mixed-citation publication-type="confproc"><person-group person-group-type="author"><string-name><surname>Lin</surname> <given-names>T-Y</given-names></string-name>, <string-name><surname>Goyal</surname> <given-names>P</given-names></string-name>, <string-name><surname>Girshick</surname> <given-names>R</given-names></string-name>, <string-name><surname>He</surname> <given-names>K</given-names></string-name>, <string-name><surname>Dollár</surname> <given-names>P.</given-names></string-name></person-group> <year>2018</year>. <article-title>Focal Loss for Dense Object Detection</article-title>, <conf-name>IEEE Transactions on Pattern Analysis and Machine Intelligence</conf-name>.</mixed-citation></ref>
<ref id="c33"><label>33.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Lorson</surname> <given-names>CL</given-names></string-name>, <string-name><surname>Hahnen</surname> <given-names>E</given-names></string-name>, <string-name><surname>Androphy</surname> <given-names>EJ</given-names></string-name>, <string-name><surname>Wirth</surname> <given-names>B</given-names></string-name></person-group>. <year>1999</year>. <article-title>A single nucleotide in the <italic>SMN</italic> gene regulates splicing and is responsible for spinal muscular atrophy</article-title>. <source>Proc Natl Acad Sci USA</source> <volume>96</volume>:<fpage>6307</fpage>–<lpage>6311</lpage>. doi:<pub-id pub-id-type="doi">10.1073/pnas.96.11.6307</pub-id></mixed-citation></ref>
<ref id="c34"><label>34.</label><mixed-citation publication-type="preprint"><person-group person-group-type="author"><string-name><surname>Loshchilov</surname> <given-names>I</given-names></string-name>, <string-name><surname>Hutter</surname> <given-names>F.</given-names></string-name></person-group> <year>2019</year>. <article-title>Decoupled Weight Decay Regularization</article-title>, <source>arXiv</source>.</mixed-citation></ref>
<ref id="c35"><label>35.</label><mixed-citation publication-type="preprint"><person-group person-group-type="author"><string-name><surname>Loshchilov</surname> <given-names>I</given-names></string-name>, <string-name><surname>Hutter</surname> <given-names>F.</given-names></string-name></person-group> <year>2016</year>. <article-title>SGDR: Stochastic Gradient Descent with Warm Restarts</article-title>, <source>arXiv</source>. doi:<pub-id pub-id-type="doi">10.48550/ARXIV.1608.03983</pub-id></mixed-citation></ref>
<ref id="c36"><label>36.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Majewski</surname> <given-names>J</given-names></string-name>, <string-name><surname>Ott</surname> <given-names>J</given-names></string-name></person-group>. <year>2002</year>. <article-title>Distribution and Characterization of Regulatory Elements in the Human Genome</article-title>. <source>Genome Res</source> <volume>12</volume>:<fpage>1827</fpage>–<lpage>1836</lpage>. doi:<pub-id pub-id-type="doi">10.1101/gr.606402</pub-id></mixed-citation></ref>
<ref id="c37"><label>37.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Martí-Gómez</surname> <given-names>C</given-names></string-name>, <string-name><surname>Larrasa-Alonso</surname> <given-names>J</given-names></string-name>, <string-name><surname>López-Olañeta</surname> <given-names>M</given-names></string-name>, <string-name><surname>Villalba-Orero</surname> <given-names>M</given-names></string-name>, <string-name><surname>García-Pavía</surname> <given-names>P</given-names></string-name>, <string-name><surname>Sánchez-Cabo</surname> <given-names>F</given-names></string-name>, <string-name><surname>Lara-Pezzi</surname> <given-names>E</given-names></string-name></person-group>. <year>2022</year>. <article-title>Functional Impact and Regulation of Alternative Splicing in Mouse Heart Development and Disease</article-title>. <source>J of Cardiovasc Trans Res</source> <volume>15</volume>:<fpage>1239</fpage>–<lpage>1255</lpage>. doi:<pub-id pub-id-type="doi">10.1007/s12265-022-10244-x</pub-id></mixed-citation></ref>
<ref id="c38"><label>38.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Mcclorey</surname> <given-names>G</given-names></string-name>, <string-name><surname>Fletcher</surname> <given-names>S</given-names></string-name>, <string-name><surname>Wilton</surname> <given-names>S</given-names></string-name></person-group>. <year>2005</year>. <article-title>Splicing intervention for Duchenne muscular dystrophy</article-title>. <source>Current Opinion in Pharmacology</source> <volume>5</volume>:<fpage>529</fpage>–<lpage>534</lpage>. doi:<pub-id pub-id-type="doi">10.1016/j.coph.2005.06.001</pub-id></mixed-citation></ref>
<ref id="c39"><label>39.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Mills</surname> <given-names>JD</given-names></string-name>, <string-name><surname>Janitz</surname> <given-names>M</given-names></string-name></person-group>. <year>2012</year>. <article-title>Alternative splicing of mRNA in the molecular pathology of neurodegenerative diseases</article-title>. <source>Neurobiology of Aging</source> <volume>33</volume>:1012.<fpage>e11</fpage>–<lpage>1012.e24.</lpage> doi:<pub-id pub-id-type="doi">10.1016/j.neurobiolaging.2011.10.030</pub-id></mixed-citation></ref>
<ref id="c40"><label>40.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Moore</surname> <given-names>MJ</given-names></string-name>, <string-name><surname>Wang</surname> <given-names>Q</given-names></string-name>, <string-name><surname>Kennedy</surname> <given-names>CJ</given-names></string-name>, <string-name><surname>Silver</surname> <given-names>PA</given-names></string-name></person-group>. <year>2010</year>. <article-title>An Alternative Splicing Network Links Cell-Cycle Control to Apoptosis</article-title>. <source>Cell</source> <volume>142</volume>:<fpage>625</fpage>–<lpage>636</lpage>. doi:<pub-id pub-id-type="doi">10.1016/j.cell.2010.07.019</pub-id></mixed-citation></ref>
<ref id="c41"><label>41.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Morales</surname> <given-names>J</given-names></string-name>, <string-name><surname>Pujar</surname> <given-names>S</given-names></string-name>, <string-name><surname>Loveland</surname> <given-names>JE</given-names></string-name>, <string-name><surname>Astashyn</surname> <given-names>A</given-names></string-name>, <string-name><surname>Bennett</surname> <given-names>R</given-names></string-name>, <string-name><surname>Berry</surname> <given-names>A</given-names></string-name>, <string-name><surname>Cox</surname> <given-names>E</given-names></string-name>, <string-name><surname>Davidson</surname> <given-names>C</given-names></string-name>, <string-name><surname>Ermolaeva</surname> <given-names>O</given-names></string-name>, <string-name><surname>Farrell</surname> <given-names>CM</given-names></string-name>, <string-name><surname>Fatima</surname> <given-names>R</given-names></string-name>, <string-name><surname>Gil</surname> <given-names>L</given-names></string-name>, <string-name><surname>Goldfarb</surname> <given-names>T</given-names></string-name>, <string-name><surname>Gonzalez</surname> <given-names>JM</given-names></string-name>, <string-name><surname>Haddad</surname> <given-names>D</given-names></string-name>, <string-name><surname>Hardy</surname> <given-names>M</given-names></string-name>, <string-name><surname>Hunt</surname> <given-names>T</given-names></string-name>, <string-name><surname>Jackson</surname> <given-names>J</given-names></string-name>, <string-name><surname>Joardar</surname> <given-names>VS</given-names></string-name>, <string-name><surname>Kay</surname> <given-names>M</given-names></string-name>, <string-name><surname>Kodali</surname> <given-names>VK</given-names></string-name>, <string-name><surname>McGarvey</surname> <given-names>KM</given-names></string-name>, <string-name><surname>McMahon</surname> <given-names>A</given-names></string-name>, <string-name><surname>Mudge</surname> <given-names>JM</given-names></string-name>, <string-name><surname>Murphy</surname> <given-names>DN</given-names></string-name>, <string-name><surname>Murphy</surname> <given-names>MR</given-names></string-name>, <string-name><surname>Rajput</surname> <given-names>B</given-names></string-name>, <string-name><surname>Rangwala</surname> <given-names>SH</given-names></string-name>, <string-name><surname>Riddick</surname> <given-names>LD</given-names></string-name>, <string-name><surname>Thibaud-Nissen</surname> <given-names>F</given-names></string-name>, <string-name><surname>Threadgold</surname> <given-names>G</given-names></string-name>, <string-name><surname>Vatsan</surname> <given-names>AR</given-names></string-name>, <string-name><surname>Wallin</surname> <given-names>C</given-names></string-name>, <string-name><surname>Webb</surname> <given-names>D</given-names></string-name>, <string-name><surname>Flicek</surname> <given-names>P</given-names></string-name>, <string-name><surname>Birney</surname> <given-names>E</given-names></string-name>, <string-name><surname>Pruitt</surname> <given-names>KD</given-names></string-name>, <string-name><surname>Frankish</surname> <given-names>A</given-names></string-name>, <string-name><surname>Cunningham</surname> <given-names>F</given-names></string-name>, <string-name><surname>Murphy</surname> <given-names>TD</given-names></string-name></person-group>. <year>2022</year>. <article-title>A joint NCBI and EMBL-EBI transcript set for clinical genomics and research</article-title>. <source>Nature</source> <volume>604</volume>:<fpage>310</fpage>–<lpage>315</lpage>. doi:<pub-id pub-id-type="doi">10.1038/s41586-022-04558-8</pub-id></mixed-citation></ref>
<ref id="c42"><label>42.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><collab>Mouse Genome Sequencing Consortium</collab></person-group>. <year>2002</year>. <article-title>Initial sequencing and comparative analysis of the mouse genome</article-title>. <source>Nature</source> <volume>420</volume>:<fpage>520</fpage>–<lpage>562</lpage>. doi:<pub-id pub-id-type="doi">10.1038/nature01262</pub-id></mixed-citation></ref>
<ref id="c43"><label>43.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Naryshkin</surname> <given-names>NA</given-names></string-name>, <string-name><surname>Weetall</surname> <given-names>M</given-names></string-name>, <string-name><surname>Dakka</surname> <given-names>A</given-names></string-name>, <string-name><surname>Narasimhan</surname> <given-names>J</given-names></string-name>, <string-name><surname>Zhao</surname> <given-names>X</given-names></string-name>, <string-name><surname>Feng</surname> <given-names>Z</given-names></string-name>, <string-name><surname>Ling</surname> <given-names>KKY</given-names></string-name>, <string-name><surname>Karp</surname> <given-names>GM</given-names></string-name>, <string-name><surname>Qi</surname> <given-names>H</given-names></string-name>, <string-name><surname>Woll</surname> <given-names>MG</given-names></string-name>, <string-name><surname>Chen</surname> <given-names>G</given-names></string-name>, <string-name><surname>Zhang</surname> <given-names>N</given-names></string-name>, <string-name><surname>Gabbeta</surname> <given-names>V</given-names></string-name>, <string-name><surname>Vazirani</surname> <given-names>P</given-names></string-name>, <string-name><surname>Bhattacharyya</surname> <given-names>A</given-names></string-name>, <string-name><surname>Furia</surname> <given-names>B</given-names></string-name>, <string-name><surname>Risher</surname> <given-names>N</given-names></string-name>, <string-name><surname>Sheedy</surname> <given-names>J</given-names></string-name>, <string-name><surname>Kong</surname> <given-names>R</given-names></string-name>, <string-name><surname>Ma</surname> <given-names>J</given-names></string-name>, <string-name><surname>Turpoff</surname> <given-names>A</given-names></string-name>, <string-name><surname>Lee</surname> <given-names>C-S</given-names></string-name>, <string-name><surname>Zhang</surname> <given-names>X</given-names></string-name>, <string-name><surname>Moon</surname> <given-names>Y-C</given-names></string-name>, <string-name><surname>Trifillis</surname> <given-names>P</given-names></string-name>, <string-name><surname>Welch</surname> <given-names>EM</given-names></string-name>, <string-name><surname>Colacino</surname> <given-names>JM</given-names></string-name>, <string-name><surname>Babiak</surname> <given-names>J</given-names></string-name>, <string-name><surname>Almstead</surname> <given-names>NG</given-names></string-name>, <string-name><surname>Peltz</surname> <given-names>SW</given-names></string-name>, <string-name><surname>Eng</surname> <given-names>LA</given-names></string-name>, <string-name><surname>Chen</surname> <given-names>KS</given-names></string-name>, <string-name><surname>Mull</surname> <given-names>JL</given-names></string-name>, <string-name><surname>Lynes</surname> <given-names>MS</given-names></string-name>, <string-name><surname>Rubin</surname> <given-names>LL</given-names></string-name>, <string-name><surname>Fontoura</surname> <given-names>P</given-names></string-name>, <string-name><surname>Santarelli</surname> <given-names>L</given-names></string-name>, <string-name><surname>Haehnke</surname> <given-names>D</given-names></string-name>, <string-name><surname>McCarthy</surname> <given-names>KD</given-names></string-name>, <string-name><surname>Schmucki</surname> <given-names>R</given-names></string-name>, <string-name><surname>Ebeling</surname> <given-names>M</given-names></string-name>, <string-name><surname>Sivaramakrishnan</surname> <given-names>M</given-names></string-name>, <string-name><surname>Ko</surname> <given-names>C-P</given-names></string-name>, <string-name><surname>Paushkin</surname> <given-names>SV</given-names></string-name>, <string-name><surname>Ratni</surname> <given-names>H</given-names></string-name>, <string-name><surname>Gerlach</surname> <given-names>I</given-names></string-name>, <string-name><surname>Ghosh</surname> <given-names>A</given-names></string-name>, <string-name><surname>Metzger</surname> <given-names>F</given-names></string-name></person-group>. <year>2014</year>. <article-title><italic>SMN2</italic> splicing modifiers improve motor function and longevity in mice with spinal muscular atrophy</article-title>. <source>Science</source> <volume>345</volume>:<fpage>688</fpage>–<lpage>693</lpage>. doi:<pub-id pub-id-type="doi">10.1126/science.1250127</pub-id></mixed-citation></ref>
<ref id="c44"><label>44.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Nikom</surname> <given-names>D</given-names></string-name>, <string-name><surname>Zheng</surname> <given-names>S</given-names></string-name></person-group>. <year>2023</year>. <article-title>Alternative splicing in neurodegenerative disease and the promise of RNA therapies</article-title>. <source>Nat Rev Neurosci</source> <volume>24</volume>:<fpage>457</fpage>–<lpage>473</lpage>. doi:<pub-id pub-id-type="doi">10.1038/s41583-023-00717-6</pub-id></mixed-citation></ref>
<ref id="c45"><label>45.</label><mixed-citation publication-type="preprint"><person-group person-group-type="author"><string-name><surname>Paszke</surname> <given-names>A</given-names></string-name>, <string-name><surname>Gross</surname> <given-names>S</given-names></string-name>, <string-name><surname>Massa</surname> <given-names>F</given-names></string-name>, <string-name><surname>Lerer</surname> <given-names>A</given-names></string-name>, <string-name><surname>Bradbury</surname> <given-names>J</given-names></string-name>, <string-name><surname>Chanan</surname> <given-names>G</given-names></string-name>, <string-name><surname>Killeen</surname> <given-names>T</given-names></string-name>, <string-name><surname>Lin</surname> <given-names>Z</given-names></string-name>, <string-name><surname>Gimelshein</surname> <given-names>N</given-names></string-name>, <string-name><surname>Antiga</surname> <given-names>L</given-names></string-name>, <string-name><surname>Desmaison</surname> <given-names>A</given-names></string-name>, <string-name><surname>Köpf</surname> <given-names>A</given-names></string-name>, <string-name><surname>Yang</surname> <given-names>E</given-names></string-name>, <string-name><surname>DeVito</surname> <given-names>Z</given-names></string-name>, <string-name><surname>Raison</surname> <given-names>M</given-names></string-name>, <string-name><surname>Tejani</surname> <given-names>A</given-names></string-name>, <string-name><surname>Chilamkurthy</surname> <given-names>S</given-names></string-name>, <string-name><surname>Steiner</surname> <given-names>B</given-names></string-name>, <string-name><surname>Fang</surname> <given-names>L</given-names></string-name>, <string-name><surname>Bai</surname> <given-names>J</given-names></string-name>, <string-name><surname>Chintala</surname> <given-names>S.</given-names></string-name></person-group> <year>2019</year>. <article-title>PyTorch: An Imperative Style, High-Performance Deep Learning Library</article-title>, <source>arXiv</source>. doi:<pub-id pub-id-type="doi">10.48550/ARXIV.1912.01703</pub-id></mixed-citation></ref>
<ref id="c46"><label>46.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Patel</surname> <given-names>AA</given-names></string-name>, <string-name><surname>Steitz</surname> <given-names>JA</given-names></string-name></person-group>. <year>2003</year>. <article-title>Splicing double: insights from the second spliceosome</article-title>. <source>Nat Rev Mol Cell Biol</source> <volume>4</volume>:<fpage>960</fpage>–<lpage>970</lpage>. doi:<pub-id pub-id-type="doi">10.1038/nrm1259</pub-id></mixed-citation></ref>
<ref id="c47"><label>47.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Platt</surname> <given-names>J</given-names></string-name></person-group>. <year>1999</year>. <article-title>Probabilistic outputs for support vector machines and comparisons to regularized likelihood methods</article-title>. <source>Advances in large margin classifiers</source> <volume>10</volume>:<fpage>61</fpage>–<lpage>74</lpage>.</mixed-citation></ref>
<ref id="c48"><label>48.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Qian</surname> <given-names>X</given-names></string-name>, <string-name><surname>Wang</surname> <given-names>J</given-names></string-name>, <string-name><surname>Wang</surname> <given-names>M</given-names></string-name>, <string-name><surname>Igelman</surname> <given-names>AD</given-names></string-name>, <string-name><surname>Jones</surname> <given-names>KD</given-names></string-name>, <string-name><surname>Li</surname> <given-names>Y</given-names></string-name>, <string-name><surname>Wang</surname> <given-names>K</given-names></string-name>, <string-name><surname>Goetz</surname> <given-names>KE</given-names></string-name>, <string-name><surname>Birch</surname> <given-names>DG</given-names></string-name>, <string-name><surname>Yang</surname> <given-names>P</given-names></string-name>, <string-name><surname>Pennesi</surname> <given-names>ME</given-names></string-name>, <string-name><surname>Chen</surname> <given-names>R</given-names></string-name></person-group>. <year>2021</year>. <article-title>Identification of Deep-Intronic Splice Mutations in a Large Cohort of Patients With Inherited Retinal Diseases</article-title>. <source>Front Genet</source> <volume>12</volume>:<fpage>647400</fpage>. doi:<pub-id pub-id-type="doi">10.3389/fgene.2021.647400</pub-id></mixed-citation></ref>
<ref id="c49"><label>49.</label><mixed-citation publication-type="preprint"><person-group person-group-type="author"><string-name><surname>Raschka</surname> <given-names>S.</given-names></string-name></person-group> <year>2018</year>. <article-title>Model Evaluation, Model Selection, and Algorithm Selection in Machine Learning</article-title>, <source>arXiv</source>. doi:<pub-id pub-id-type="doi">10.48550/ARXIV.1811.12808</pub-id></mixed-citation></ref>
<ref id="c50"><label>50.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Segal</surname> <given-names>E</given-names></string-name>, <string-name><surname>Widom</surname> <given-names>J</given-names></string-name></person-group>. <year>2009</year>. <article-title>From DNA sequence to transcriptional behaviour: a quantitative approach</article-title>. <source>Nat Rev Genet</source> <volume>10</volume>:<fpage>443</fpage>–<lpage>456</lpage>. doi:<pub-id pub-id-type="doi">10.1038/nrg2591</pub-id></mixed-citation></ref>
<ref id="c51"><label>51.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Sokolova</surname> <given-names>K</given-names></string-name>, <string-name><surname>Chen</surname> <given-names>KM</given-names></string-name>, <string-name><surname>Hao</surname> <given-names>Y</given-names></string-name>, <string-name><surname>Zhou</surname> <given-names>J</given-names></string-name>, <string-name><surname>Troyanskaya</surname> <given-names>OG</given-names></string-name></person-group>. <year>2024</year>. <article-title>Deep Learning Sequence Models for Transcriptional Regulation</article-title>. <source>Annual Review of Genomics and Human Genetics</source> <volume>25</volume>:<fpage>105</fpage>–<lpage>122</lpage>. doi:<pub-id pub-id-type="doi">10.1146/annurev-genom-021623-024727</pub-id></mixed-citation></ref>
<ref id="c52"><label>52.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Supek</surname> <given-names>F</given-names></string-name>, <string-name><surname>Miñana</surname> <given-names>B</given-names></string-name>, <string-name><surname>Valcárcel</surname> <given-names>J</given-names></string-name>, <string-name><surname>Gabaldón</surname> <given-names>T</given-names></string-name>, <string-name><surname>Lehner</surname> <given-names>B</given-names></string-name></person-group>. <year>2014</year>. <article-title>Synonymous Mutations Frequently Act as Driver Mutations in Human Cancers</article-title>. <source>Cell</source> <volume>156</volume>:<fpage>1324</fpage>–<lpage>1335</lpage>. doi:<pub-id pub-id-type="doi">10.1016/j.cell.2014.01.051</pub-id></mixed-citation></ref>
<ref id="c53"><label>53.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Sveen</surname> <given-names>A</given-names></string-name>, <string-name><surname>Kilpinen</surname> <given-names>S</given-names></string-name>, <string-name><surname>Ruusulehto</surname> <given-names>A</given-names></string-name>, <string-name><surname>Lothe</surname> <given-names>RA</given-names></string-name>, <string-name><surname>Skotheim</surname> <given-names>RI</given-names></string-name></person-group>. <year>2016</year>. <article-title>Aberrant RNA splicing in cancer; expression changes and driver mutations of splicing factor genes</article-title>. <source>Oncogene</source> <volume>35</volume>:<fpage>2413</fpage>–<lpage>2427</lpage>. doi:<pub-id pub-id-type="doi">10.1038/onc.2015.318</pub-id></mixed-citation></ref>
<ref id="c54"><label>54.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wagner</surname> <given-names>N</given-names></string-name>, <string-name><surname>Çelik</surname> <given-names>MH</given-names></string-name>, <string-name><surname>Hölzlwimmer</surname> <given-names>FR</given-names></string-name>, <string-name><surname>Mertes</surname> <given-names>C</given-names></string-name>, <string-name><surname>Prokisch</surname> <given-names>H</given-names></string-name>, <string-name><surname>Yépez</surname> <given-names>VA</given-names></string-name>, <string-name><surname>Gagneur</surname> <given-names>J</given-names></string-name></person-group>. <year>2023</year>. <article-title>Aberrant splicing prediction across human tissues</article-title>. <source>Nature Genetics</source> <volume>55</volume>:<fpage>861</fpage>–<lpage>870</lpage>.</mixed-citation></ref>
<ref id="c55"><label>55.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wang</surname> <given-names>ET</given-names></string-name>, <string-name><surname>Sandberg</surname> <given-names>R</given-names></string-name>, <string-name><surname>Luo</surname> <given-names>S</given-names></string-name>, <string-name><surname>Khrebtukova</surname> <given-names>I</given-names></string-name>, <string-name><surname>Zhang</surname> <given-names>L</given-names></string-name>, <string-name><surname>Mayr</surname> <given-names>C</given-names></string-name>, <string-name><surname>Kingsmore</surname> <given-names>SF</given-names></string-name>, <string-name><surname>Schroth</surname> <given-names>GP</given-names></string-name>, <string-name><surname>Burge</surname> <given-names>CB</given-names></string-name></person-group>. <year>2008</year>. <article-title>Alternative isoform regulation in human tissue transcriptomes</article-title>. <source>Nature</source> <volume>456</volume>:<fpage>470</fpage>–<lpage>476</lpage>. doi:<pub-id pub-id-type="doi">10.1038/nature07509</pub-id></mixed-citation></ref>
<ref id="c56"><label>56.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wang</surname> <given-names>G-S</given-names></string-name>, <string-name><surname>Cooper</surname> <given-names>TA</given-names></string-name></person-group>. <year>2007</year>. <article-title>Splicing in disease: disruption of the splicing code and the decoding machinery</article-title>. <source>Nat Rev Genet</source> <volume>8</volume>:<fpage>749</fpage>–<lpage>761</lpage>. doi:<pub-id pub-id-type="doi">10.1038/nrg2164</pub-id></mixed-citation></ref>
<ref id="c57"><label>57.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wassarman</surname> <given-names>KM</given-names></string-name>, <string-name><surname>Steitz</surname> <given-names>JA</given-names></string-name></person-group>. <year>1992</year>. <article-title>The Low-Abundance U11 and U12 Small Nuclear Ribonucleoproteins (snRNPs) Interact To Form a Two-snRNP Complex</article-title>. <source>Molecular and Cellular Biology</source> <volume>12</volume>:<fpage>1276</fpage>– <lpage>1285</lpage>. doi:<pub-id pub-id-type="doi">10.1128/mcb.12.3.1276-1285.1992</pub-id></mixed-citation></ref>
<ref id="c58"><label>58.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Xiong</surname> <given-names>HY</given-names></string-name>, <string-name><surname>Alipanahi</surname> <given-names>B</given-names></string-name>, <string-name><surname>Lee</surname> <given-names>LJ</given-names></string-name>, <string-name><surname>Bretschneider</surname> <given-names>H</given-names></string-name>, <string-name><surname>Merico</surname> <given-names>D</given-names></string-name>, <string-name><surname>Yuen</surname> <given-names>RK</given-names></string-name>, <string-name><surname>Hua</surname> <given-names>Y</given-names></string-name>, <string-name><surname>Gueroussov</surname> <given-names>S</given-names></string-name>, <string-name><surname>Najafabadi</surname> <given-names>HS</given-names></string-name>, <string-name><surname>Hughes</surname> <given-names>TR</given-names></string-name></person-group>. <year>2015</year>. <article-title>The human splicing code reveals new insights into the genetic determinants of disease</article-title>. <source>Science</source> <volume>347</volume>:<fpage>1254806</fpage>.</mixed-citation></ref>
<ref id="c59"><label>59.</label><mixed-citation publication-type="confproc"><person-group person-group-type="author"><string-name><surname>Zadrozny</surname> <given-names>B</given-names></string-name>, <string-name><surname>Elkan</surname> <given-names>C</given-names></string-name></person-group>. <year>2002</year>. <article-title>Transforming classifier scores into accurate multiclass probability estimates</article-title>. <conf-name>Proceedings of the eighth ACM SIGKDD international conference on Knowledge discovery and data mining</conf-name>. pp. <fpage>694</fpage>–<lpage>699</lpage>.</mixed-citation></ref>
<ref id="c60"><label>60.</label><mixed-citation publication-type="confproc"><person-group person-group-type="author"><string-name><surname>Zadrozny</surname> <given-names>B</given-names></string-name>, <string-name><surname>Elkan</surname> <given-names>C</given-names></string-name></person-group>. <year>2001</year>. <article-title>Obtaining calibrated probability estimates from decision trees and naive bayesian classifiers</article-title>. <conf-name>Icml</conf-name>. pp. <fpage>609</fpage>–<lpage>616</lpage>.</mixed-citation></ref>
<ref id="c61"><label>61.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Zhou</surname> <given-names>J</given-names></string-name>, <string-name><surname>Theesfeld</surname> <given-names>CL</given-names></string-name>, <string-name><surname>Yao</surname> <given-names>K</given-names></string-name>, <string-name><surname>Chen</surname> <given-names>KM</given-names></string-name>, <string-name><surname>Wong</surname> <given-names>AK</given-names></string-name>, <string-name><surname>Troyanskaya</surname> <given-names>OG</given-names></string-name></person-group>. <year>2018</year>. <article-title>Deep learning sequence- based ab initio prediction of variant effects on expression and disease risk</article-title>. <source>Nat Genet</source> <volume>50</volume>:<fpage>1171</fpage>– <lpage>1179</lpage>. doi:<pub-id pub-id-type="doi">10.1038/s41588-018-0160-6</pub-id></mixed-citation></ref>
<ref id="c62"><label>62.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Zhou</surname> <given-names>J</given-names></string-name>, <string-name><surname>Troyanskaya</surname> <given-names>OG</given-names></string-name></person-group>. <year>2015</year>. <article-title>Predicting effects of noncoding variants with deep learning–based sequence model</article-title>. <source>Nat Methods</source> <volume>12</volume>:<fpage>931</fpage>–<lpage>934</lpage>. doi:<pub-id pub-id-type="doi">10.1038/nmeth.3547</pub-id></mixed-citation></ref>
<ref id="c63"><label>63.</label><mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Zhuang</surname> <given-names>F</given-names></string-name>, <string-name><surname>Qi</surname> <given-names>Z</given-names></string-name>, <string-name><surname>Duan</surname> <given-names>K</given-names></string-name>, <string-name><surname>Xi</surname> <given-names>D</given-names></string-name>, <string-name><surname>Zhu</surname> <given-names>Y</given-names></string-name>, <string-name><surname>Zhu</surname> <given-names>H</given-names></string-name>, <string-name><surname>Xiong</surname> <given-names>H</given-names></string-name>, <string-name><surname>He</surname> <given-names>Q</given-names></string-name></person-group>. <year>2021</year>. <article-title>A Comprehensive Survey on Transfer Learning</article-title>. <source>Proc IEEE</source> <volume>109</volume>:<fpage>43</fpage>–<lpage>76</lpage>. doi:<pub-id pub-id-type="doi">10.1109/JPROC.2020.3004555</pub-id></mixed-citation></ref>
</ref-list>
</back>
<sub-article id="sa0" article-type="editor-report">
<front-stub>
<article-id pub-id-type="doi">10.7554/eLife.107454.2.sa3</article-id>
<title-group>
<article-title>eLife Assessment</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<name>
<surname>Koo</surname>
<given-names>Peter</given-names>
</name>
<role specific-use="editor">Reviewing Editor</role>
<aff>
<institution-wrap>
<institution>Cold Spring Harbor Laboratory</institution>
</institution-wrap>
<city>Cold Spring Harbor</city>
<country>United States of America</country>
</aff>
</contrib>
</contrib-group>
<kwd-group kwd-group-type="evidence-strength">
<kwd>Convincing</kwd>
</kwd-group>
<kwd-group kwd-group-type="claim-importance">
<kwd>Valuable</kwd>
</kwd-group>
</front-stub>
<body>
<p>This <bold>valuable</bold> study introduces a modern and accessible PyTorch reimplementation of the widely used SpliceAI model for splice site prediction. The authors provide <bold>convincing</bold> evidence that their OpenSpliceAI implementation matches the performance of the original while improving usability and enabling flexible retraining across species. These advances are likely to be of broad interest to the computational genomics community.</p>
</body>
</sub-article>
<sub-article id="sa1" article-type="referee-report">
<front-stub>
<article-id pub-id-type="doi">10.7554/eLife.107454.2.sa2</article-id>
<title-group>
<article-title>Reviewer #1 (Public review):</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<anonymous/>
<role specific-use="referee">Reviewer</role>
</contrib>
</contrib-group>
</front-stub>
<body>
<p>Summary:</p>
<p>Chao et al. produced an updated version of the SpliceAI package using modern deep learning frameworks. This includes data preprocessing, model training, direct prediction, and variant effect prediction scripts. They also added functionality for model fine-tuning and model calibration. They convincingly evaluate their newly trained models against those from the original SpliceAI package and investigate how to extend SpliceAI to make predictions in new species. Their comparisons to the original SpliceAI models are convincing on the grounds of model performance and their evaluation of how well the new models match the original's understanding of non-local mutation effects. However, their evaluation of the new calibration functionality would benefit from a more nuanced discussion of the limitations of calibration.</p>
<p>Strengths</p>
<p>(1) They provide convincing evidence that their new implementation of SpliceAI matches the performance and mutation effect estimation capabilities of the original model on a similar dataset while benefiting from improved computational efficiencies. This will enable faster prediction and retraining of splicing models for new species as well as easier integration with other modern deep learning tools.</p>
<p>(2) They produce models with strong performance on non-human model species and a simple well well-documented pipeline for producing models tuned for any species of interest. This will be a boon for researchers working on splicing in these species and make it easy for researchers working on new species to generate their own models.</p>
<p>(3) Their documentation is clear and abundant. This will greatly aid the ability of others to work with their code base.</p>
<p>Weaknesses</p>
<p>(1) Their discussion of their package's calibration functionality does not adequately acknowledge the limitations of model calibration. This is problematic as this is a package intended for general use and users who are not experienced in modeling broadly and the subfield of model calibration specifically may not already understand these limitations. This could lead to serious errors and misunderstandings down the road. A model is not calibrated or uncalibrated in and of itself, only with respect to a specific dataset. In this case they calibrated with respect to the training dataset, a set of canonical transcript annotations. This is a perfectly valid and reasonable dataset to calibrate against. However, this is unlikely to be the dataset the model is applied to in any downstream use case, and this calibration is not guaranteed or expected to hold for any shift in the dataset distribution. For example, in the next section they use ISM based approaches to evaluate which sequence elements the model is sensitive to and their calibration would not be expected to hold for this set of predictions. This issue is particularly worrying in the case of their model because annotation of canonical transcript splice sites is a task that it is unlikely their model will be applied to after training. Much more likely tasks will be things such as predicting the effects of mutations, identification of splice sites that may be used across isoforms beyond just the canonical one, identification of regulatory sequences through ISM, or evaluation of human created sequences for design or evaluation purposes (such as in the context of an MPSA or designing a gene to splice a particular way), we would not expect their calibration to hold in any of these contexts. To resolve this issue, the authors should clarify and discuss this limitation in their paper (and in the relevant sections of the package documentation) to avoid confusing downstream users.</p>
<p>(2) The clarity of their analysis of mutation effects could be improved with some minor adjustments. While they report median ISM importance correlation it would be helpful to see a histogram of the correlations they observed. Instead of displaying (and calculating correlations using) importance scores of only the reference sequence, showing the importance scores for each nucleotide at each position provides a more informative representation. This would also likely make the plots in 6B clearer.</p>
</body>
</sub-article>
<sub-article id="sa2" article-type="referee-report">
<front-stub>
<article-id pub-id-type="doi">10.7554/eLife.107454.2.sa1</article-id>
<title-group>
<article-title>Reviewer #2 (Public review):</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<anonymous/>
<role specific-use="referee">Reviewer</role>
</contrib>
</contrib-group>
</front-stub>
<body>
<p>Summary:</p>
<p>The paper by Chao et al offers a reimplantation of the SpliceAI algorithm in PyTorch so that the model can more easily/efficiently be retrained. They apply their new implementation of the SpliceAI algorithm, which they call OpenSpliceAI, to several species and compare it against the original model, showing that the results are very similar and that in some small species pre-training on other species helps improve performance.</p>
<p>Strengths:</p>
<p>On the upside, the code runs fine and it is well documented.</p>
<p>Weaknesses:</p>
<p>The paper itself does not offer much beyond reimplementing SpliceAI. There is no new algorithm, new analysis, new data, or new insights into RNA splicing. There is not even any comparison to many of the alternative methods that have since been published to surpass SpliceAI. Given that some of the authors are well known with a long history of important contributions, our expectations were admittedly different. Still, we hope some readers will find the new implementation useful.</p>
<p>Update for the revised version:</p>
<p>The update includes mostly clarifications for tech questions/comments raised by the other two reviewers. There is no additional analysis/results that changes our above initial assessment of this paper's contribution.</p>
</body>
</sub-article>
<sub-article id="sa3" article-type="author-comment">
<front-stub>
<article-id pub-id-type="doi">10.7554/eLife.107454.2.sa0</article-id>
<title-group>
<article-title>Author response:</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<name>
<surname>Chao</surname>
<given-names>Kuan-Hao</given-names>
</name>
<role specific-use="author">Author</role>
<contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-0099-0692</contrib-id></contrib>
<contrib contrib-type="author">
<name>
<surname>Mao</surname>
<given-names>Alan</given-names>
</name>
<role specific-use="author">Author</role>
<contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-2381-0607</contrib-id></contrib>
<contrib contrib-type="author">
<name>
<surname>Liu</surname>
<given-names>Anqi</given-names>
</name>
<role specific-use="author">Author</role>
<contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-0468-5698</contrib-id></contrib>
<contrib contrib-type="author">
<name>
<surname>Salzberg</surname>
<given-names>Steven L</given-names>
</name>
<role specific-use="author">Author</role>
<contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-8859-7432</contrib-id></contrib>
<contrib contrib-type="author">
<name>
<surname>Pertea</surname>
<given-names>Mihaela</given-names>
</name>
<role specific-use="author">Author</role>
<contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-0762-8637</contrib-id></contrib>
</contrib-group>
</front-stub>
<body>
<p>The following is the authors’ response to the original reviews.</p>
<disp-quote content-type="editor-comment">
<p><bold>Reviewer #1 (Public review):</bold></p>
<p>Summary:</p>
<p>Chao et al. produced an updated version of the SpliceAI package using modern deep learning frameworks. This includes data preprocessing, model training, direct prediction, and variant effect prediction scripts. They also added functionality for model fine-tuning and model calibration. They convincingly evaluate their newly trained models against those from the original SpliceAI package and investigate how to extend SpliceAI to make predictions in new species. While their comparisons to the original SpliceAI models are convincing on the grounds of model performance, their evaluation of how well the new models match the original's understanding of non-local mutation effects is incomplete. Further, their evaluation of the new calibration functionality would benefit from a more nuanced discussion of what set of splice sites their calibration is expected to hold for, and tests in a context for which calibration is needed.</p>
<p>Strengths:</p>
<p>(1) They provide convincing evidence that their new implementation of SpliceAI matches the performance of the original model on a similar dataset while benefiting from improved computational efficiencies. This will enable faster prediction and retraining of splicing models for new species as well as easier integration with other modern deep learning tools.</p>
<p>(2) They produce models with strong performance on non-human model species and a simple, well-documented pipeline for producing models tuned for any species of interest. This will be a boon for researchers working on splicing in these species and make it easy for researchers working on new species to generate their own models.</p>
<p>(3) Their documentation is clear and abundant. This will greatly aid the ability of others to work with their code base.</p>
</disp-quote>
<p>We thank the reviewer for these positive comments.</p>
<disp-quote content-type="editor-comment">
<p>Weaknesses:</p>
<p>(1) The authors' assessment of how much their model retains SpliceAI's understanding of &quot;nonlocal effects of genomic mutations on splice site location and strength&quot; (Figure 6) is not sufficiently supported. Demonstrating this would require showing that for a large number of (non-local) mutations, their model shows the same change in predictions as SpliceAI or that attribution maps for their model and SpliceAI are concordant even at distances from the splice site. Figure 6A comes close to demonstrating this, but only provides anecdotal evidence as it is limited to 2 loci. This could be overcome by summarizing the concordance between ISM maps for the two models and then comparing across many loci. Figure 6B also comes close, but falls short because instead of comparing splicing prediction differences between the models as a function of variants, it compares the average prediction difference as a function of the distance from the splice site. This limits it to only detecting differences in the model's understanding of the local splice site motif sequences. This could be overcome by looking at comparisons between differences in predictions with mutants directly and considering non-local mutants that cause differences in splicing predictions.</p>
</disp-quote>
<p>We agree that two loci are insufficient to demonstrate preservation of non-local effects. To address this, we have extended our analysis to a larger set of sites: we randomly sampled 100 donor and 100 acceptor sites, applied our ISM procedure over a 5,001 nt window centered at each site for both models, and computed the ISM map as before. We then calculated the Pearson correlation between the collection of OSAI<sub>MANE</sub> and SpliceAI ISM importance scores. We also created 10 additional ISM maps similar to those in Figure 6A, which are now provided in Figure S23.</p>
<p>Follow is the revised paragraph in the manuscript’s Results section:</p>
<p>First, we recreated the experiment from Jaganathan et al. in which they mutated every base in a window around exon 9 of the U2SURP gene and calculated its impact on the predicted probability of the acceptor site. We repeated this experiment on exon 2 of the DST gene, again using both SpliceAI and OSAI<sub>MANE</sub> . In both cases, we found a strong similarity between the resultant patterns between SpliceAI and OSAI<sub>MANE</sub>, as shown in Figure 6A. To evaluate concordance more broadly, we randomly selected 100 donor and 100 acceptor sites and performed the same ISM experiment on each site. The Pearson correlation between SpliceAI and OSAI<sub>MANE</sub> yielded an overall median correlation of 0.857 (see Methods; additional DNA logos in Figure S23).</p>
<p>To characterize the local sequence features that both models focus on, we computed the average decrease in predicted splice-site probability resulting from each of the three possible singlenucleotide substitutions at every position within 80bp for 100 donor and 100 acceptor sites randomly sampled from the test set (Chromosomes 1, 3, 5, 7, and 9). Figure 6B shows the average decrease in splice site strength for each mutation in the format of a DNA logo, for both tools.</p>
<p>We added the following text to the Methods section:</p>
<p>Concordance evaluation of ISM importance scores between OSAI<sub>MANE</sub> and SpliceAI</p>
<p>To assess agreement between OSAI<sub>MANE</sub>  and SpliceAI across a broad set of splice sites, we applied our ISM procedure to 100 randomly chosen donor sites and 100 randomly chosen acceptor sites. For each site, we extracted a 5,001 nt window centered on the annotated splice junction and, at every coordinate within that window, substituted the reference base with each of the three alternative nucleotides. We recorded the change in predicted splice-site probability for each mutation and then averaged these Δ-scores at each position to produce a 5,001-score ISM importance profile per site.</p>
<p>Next, for each splice site we computed the Pearson correlation coefficient between the paired importance profiles from ensembled OSAI<sub>MANE</sub> and ensembled SpliceAI. The median correlation was 0.857 for all splice sites. Ten additional zoom-in representative splice site DNA logo comparisons are provided in Supplementary Figure S23.</p>
<disp-quote content-type="editor-comment">
<p>(2) The utility of the calibration method described is unclear. When thinking about a calibrated model for splicing, the expectation would be that the models' predicted splicing probabilities would match the true probabilities that positions with that level of prediction confidence are splice sites. However, the actual calibration that they perform only considers positions as splice sites if they are splice sites in the longest isoform of the gene included in the MANE annotation. In other words, they calibrate the model such that the model's predicted splicing probabilities match the probability that a position with that level of confidence is a splice site in one particular isoform for each gene, not the probability that it is a splice site more broadly. Their level of calibration on this set of splice sites may very well not hold to broader sets of splice sites, such as sites from all annotated isoforms, sites that are commonly used in cryptic splicing, or poised sites that can be activated by a variant. This is a particularly important point as much of the utility of SpliceAI comes from its ability to issue variant effect predictions, and they have not demonstrated that this calibration holds in the context of variants. This section could be improved by expanding and clarifying the discussion of what set of splice sites they have demonstrated calibration on, what it means to calibrate against this set of splice sites, and how this calibration is expected to hold or not for other interesting sets of splice sites. Alternatively, or in addition, they could demonstrate how well their calibration holds on different sets of splice sites or show the effect of calibrating their models against different potentially interesting sets of splice sites and discuss how the results do or do not differ.</p>
</disp-quote>
<p>We thank the reviewer for highlighting the need to clarify our calibration procedure. Both SpliceAI and OpenSpliceAI are trained on a single “canonical” transcript per gene: SpliceAI on the hg 19 Ensembl/Gencode canonical set and OpenSpliceAI on the MANE transcript set. To calibrate each model, we applied post-hoc temperature scaling, i.e. a single learnable parameter that rescales the logits before the softmax. This adjustment does not alter the model’s ranking or discrimination (AUC/precision–recall) but simply aligns the predicted probabilities for donor, acceptor, and non-splice classes with their observed frequencies. As shown in our reliability diagrams (Fig. S16-S22), temperature scaling yields negligible changes in performance, confirming that both SpliceAI and OpenSpliceAI were already well-calibrated. However, we acknowledge that we didn’t measure how calibration might affect predictions on non-canonical splice sites or on cryptic splicing. It is possible that calibration might have a detrimental effect on those, but because this is not a key claim of our paper, we decided not to do further experiments. We have updated the manuscript to acknowledge this potential shortcoming; please see the revised paragraph in our next response.</p>
<disp-quote content-type="editor-comment">
<p>(3) It is difficult to assess how well their calibration method works in general because their original models are already well calibrated, so their calibration method finds temperatures very close to 1 and only produces very small and hard to assess changes in calibration metrics. This makes it very hard to distinguish if the calibration method works, as it doesn't really produce any changes. It would be helpful to demonstrate the calibration method on a model that requires calibration or on a dataset for which the current model is not well calibrated, so that the impact of the calibration method could be observed.</p>
</disp-quote>
<p>It’s true that the models we calibrated didn’t need many changes. It is possible that the calibration methods we used (which were not ours, but which were described in earlier publications) can’t improve the models much. We toned down our comments about this procedure, as follows.</p>
<p>Original:</p>
<p>“Collectively, these results demonstrate that OSAIs were already well-calibrated, and this consistency across species underscores the robustness of OpenSpliceAI’s training approach in diverse genomic contexts.”</p>
<p>Revised:</p>
<p>“We observed very small changes after calibration across phylogenetically diverse species, suggesting that OpenSpliceAI’s training regimen yielded well‐calibrated models, although it is possible that a different calibration algorithm might produce further improvements in performance.”</p>
<disp-quote content-type="editor-comment">
<p><bold>Reviewer #2 (Public review):</bold></p>
<p>Summary:</p>
<p>The paper by Chao et al offers a reimplementation of the SpliceAI algorithm in PyTorch so that the model can more easily/efficiently be retrained. They apply their new implementation of the SpliceAI algorithm, which they call OpenSpliceAI, to several species and compare it against the original model, showing that the results are very similar and that in some small species, pretraining on other species helps improve performance.</p>
<p>Strengths:</p>
<p>On the upside, the code runs fine, and it is well documented.</p>
<p>Weaknesses:</p>
<p>The paper itself does not offer much beyond reimplementing SpliceAI. There is no new algorithm, new analysis, new data, or new insights into RNA splicing. There is no comparison to many of the alternative methods that have since been published to surpass SpliceAI. Given that some of the authors are well-known with a long history of important contributions, our expectations were admittedly different. Still, we hope some readers will find the new implementation useful.</p>
</disp-quote>
<p>We thank the reviewer for the feedback. We have clarified that OpenSpliceAI is an open-source PyTorch reimplementation optimized for efficient retraining and transfer learning, designed to analyze cross-species performance gains, and supported by a thorough benchmark and the release of several pretrained models to clearly position our contribution.</p>
<disp-quote content-type="editor-comment">
<p><bold>Reviewer #3 (Public review):</bold></p>
<p>Summary:</p>
<p>The authors present OpenSpliceAI, a PyTorch-based reimplementation of the well-known SpliceAI deep learning model for splicing prediction. The core architecture remains unchanged, but the reimplementation demonstrates convincing improvements in usability, runtime performance, and potential for cross-species application.</p>
<p>Strengths:</p>
<p>The improvements are well-supported by comparative benchmarks, and the work is valuable given its strong potential to broaden the adoption of splicing prediction tools across computational and experimental biology communities.</p>
<p>Major comments:</p>
<p>Can fine-tuning also be used to improve prediction for human splicing? Specifically, are models trained on other species and then fine-tuned with human data able to perform better on human splicing prediction? This would enhance the model's utility for more users, and ideally, such fine-tuned models should be made available.</p>
</disp-quote>
<p>We evaluated transfer learning by fine-tuning models pretrained on mouse (OSAI<sub>Mouse</sub>), honeybee (OSAI<sub>Honeybee</sub>), Arabidopsis (OSAI<sub>Arabidopsis</sub>), and zebrafish (OSAI<sub>Zebrafish</sub>) on human data. While transfer learning accelerated convergence compared to training from scratch, the final human splicing prediction accuracy was comparable between fine-tuned and scratch-trained models, suggesting that performance on our current human dataset is nearing saturation under this architecture.</p>
<p>We added the following paragraph to the Discussion section:</p>
<p>We also evaluated pretraining on mouse (OSAI<sub>Mouse</sub>), honeybee (OSAI<sub>Honeybee</sub>), zebrafish (OSAI<sub>Zebrafish</sub>), and Arabidopsis (OSAI<sub>Arabidopsis</sub>) followed by fine-tuning on the human MANE dataset. While cross-species pretraining substantially accelerated convergence during fine-tuning, the final human splicing-prediction accuracy was comparable to that of a model trained from scratch on human data. This result indicates that our architecture seems to capture all relevant splicing features from human training data alone, and thus gains little or no benefit from crossspecies transfer learning in this context (see Figure S24).</p>
<disp-quote content-type="editor-comment">
<p><bold>Reviewer #1 (Recommendations for the authors):</bold></p>
</disp-quote>
<p>We thank the editor for summarizing the points raised by each reviewer. Below is our point-bypoint response to each comment:</p>
<disp-quote content-type="editor-comment">
<p>(1) In Figure 3 (and generally in the other figures) OpenSpliceAI should be replaced with OSAI_{Training dataset} because otherwise it is hard to tell which precise model is being compared. And in Figure 3 it is especially important to emphasize that you are comparing a SpliceAI model trained on Human data to an OSAI model trained and evaluated on a different species.</p>
</disp-quote>
<p>We have updated the labels in Figures 3, replacing “OpenSpliceAI” with “OSAI_{training dataset}” to more clearly specify which model is being compared.</p>
<disp-quote content-type="editor-comment">
<p>(2) Are genes paralogous to training set genes removed from the validation set as well as the test set? If you are worried about data leakage in the test set, it makes sense to also consider validation set leakage.</p>
</disp-quote>
<p>Thank you for this helpful suggestion. We fully agree, and to avoid any data leakage we implemented the identical filtering pipeline for both validation and test sets: we excluded all sequences paralogous or homologous to sequences in the training set, and further removed any sequence sharing &gt; 80 % length overlap and &gt; 80 % sequence identity with training sequences. The effect of this filtering on the validation set is summarized in Supplementary Figure S7C.</p>
<disp-quote content-type="editor-comment">
<p><bold>Reviewer #3 (Recommendations for the authors):</bold></p>
<p>(1) The legend in Figure 3 is somewhat confusing. The labels like &quot;SpliceAI-Keras (species name)&quot; may imply that the model was retrained using data from that species, but that's not the case, correct?</p>
</disp-quote>
<p>Yes, “SpliceAI-Keras (species name)” was not retrained; it refers to the released SpliceAI model evaluated on the specified species dataset. We have revised the Figure 3 legends, changing “SpliceAI-Keras (species name)” to “SpliceAI-Keras” to clarify this.</p>
<disp-quote content-type="editor-comment">
<p>(2) Please address the minor issues with the code, including ensuring the conda install works across various systems.</p>
</disp-quote>
<p>We have addressed the issues you mentioned. OpenSpliceAI is now available on Conda and can be installed with:  conda install openspliceai.</p>
<p>The conda package homepage is at: <ext-link ext-link-type="uri" xlink:href="https://anaconda.org/khchao/openspliceai">https://anaconda.org/khchao/openspliceai</ext-link> We’ve also corrected all broken links in the documentation.</p>
<disp-quote content-type="editor-comment">
<p>(3) Utility:</p>
<p>I followed all the steps in the Quick Start Guide, and aside from the issues mentioned below, everything worked as expected.</p>
<p>I attempted installation using conda as described in the instructions, but it was unsuccessful. I assume this method is not yet supported.</p>
<p>In Quick Start Guide: predict, the link labeled &quot;GitHub (models/spliceai-mane/10000nt/)&quot; appears to be incorrect. The correct path is likely &quot;GitHub (models/openspliceaimane/10000nt/)&quot;.</p>
<p>In Quick Start Guide: variant (<ext-link ext-link-type="uri" xlink:href="https://ccb.jhu.edu/openspliceai/content/quick_start_guide/quickstart_variant.html#quick-startvariant">https://ccb.jhu.edu/openspliceai/content/quick_start_guide/quickstart_variant.html#quick-startvariant</ext-link>), some of the download links for input files were broken. While I was able to find some files in the GitHub repository, I think the -A option should point to data/grch37.txt, not examples/data/input.vcf, and the -I option should be examples/data/input.vcf, not data/vcf/input.vcf.</p>
</disp-quote>
<p>Thank you for catching these issues. We’ve now addressed all issues concerning Conda installation and file links. We thank the editor for thoroughly testing our code and reviewing the documentation.</p>
</body>
</sub-article>
</article>