<?xml version="1.0" ?><!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.3 20210610//EN"  "JATS-archivearticle1-mathml3.dtd"><article xmlns:ali="http://www.niso.org/schemas/ali/1.0/" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article" dtd-version="1.3" xml:lang="en">
<front>
<journal-meta>
<journal-id journal-id-type="nlm-ta">elife</journal-id>
<journal-id journal-id-type="publisher-id">eLife</journal-id>
<journal-title-group>
<journal-title>eLife</journal-title>
</journal-title-group>
<issn publication-format="electronic" pub-type="epub">2050-084X</issn>
<publisher>
<publisher-name>eLife Sciences Publications, Ltd</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">88591</article-id>
<article-id pub-id-type="doi">10.7554/eLife.88591</article-id>
<article-id pub-id-type="doi" specific-use="version">10.7554/eLife.88591.2</article-id>
<article-version-alternatives>
<article-version article-version-type="publication-state">reviewed preprint</article-version>
<article-version article-version-type="preprint-version">1.4</article-version>
</article-version-alternatives>
<article-categories>
<subj-group subj-group-type="heading">
<subject>Neuroscience</subject>
</subj-group>
</article-categories>
<title-group>
<article-title>MotorNet: a Python toolbox for controlling differentiable biomechanical effectors with artificial neural networks</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-0796-5457</contrib-id>
<name>
<surname>Codol</surname>
<given-names>Olivier</given-names>
</name>
<xref ref-type="aff" rid="a1">1</xref>
<xref ref-type="aff" rid="a2">2</xref>
<xref ref-type="corresp" rid="cor1">5</xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-5179-3181</contrib-id>
<name>
<surname>Michaels</surname>
<given-names>Jonathan A.</given-names>
</name>
<xref ref-type="aff" rid="a1">1</xref>
<xref ref-type="aff" rid="a3">3</xref>
<xref ref-type="aff" rid="a4">4</xref>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Kashefi</surname>
<given-names>Mehrdad</given-names>
</name>
<xref ref-type="aff" rid="a1">1</xref>
<xref ref-type="aff" rid="a3">3</xref>
<xref ref-type="aff" rid="a4">4</xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-0786-0081</contrib-id>
<name>
<surname>Pruszynski</surname>
<given-names>J. Andrew</given-names>
</name>
<xref ref-type="aff" rid="a1">1</xref>
<xref ref-type="aff" rid="a2">2</xref>
<xref ref-type="aff" rid="a3">3</xref>
<xref ref-type="aff" rid="a4">4</xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-1368-032X</contrib-id>
<name>
<surname>Gribble</surname>
<given-names>Paul L.</given-names>
</name>
<xref ref-type="aff" rid="a1">1</xref>
<xref ref-type="aff" rid="a2">2</xref>
<xref ref-type="aff" rid="a3">3</xref>
</contrib>
<aff id="a1"><label>1</label><institution>Western Institute for Neuroscience, University of Western Ontario</institution>, Ontario, <country>Canada</country></aff>
<aff id="a2"><label>2</label><institution>Department of Psychology, University of Western Ontario</institution>, Ontario, <country>Canada</country></aff>
<aff id="a3"><label>3</label><institution>Department of Physiology &amp; Pharmacology, Schulich School of Medicine &amp; Dentistry, University of Western Ontario</institution>, Ontario, <country>Canada</country></aff>
<aff id="a4"><label>4</label><institution>Robarts Research Institute, University of Western Ontario</institution>, Ontario, <country>Canada</country></aff>
</contrib-group>
<contrib-group content-type="section">
<contrib contrib-type="editor">
<name>
<surname>Gallego</surname>
<given-names>Juan Alvaro</given-names>
</name>
<role>Reviewing Editor</role>
<aff>
<institution-wrap>
<institution>Imperial College London</institution>
</institution-wrap>
<city>London</city>
<country>United Kingdom</country>
</aff>
</contrib>
<contrib contrib-type="senior_editor">
<name>
<surname>Makin</surname>
<given-names>Tamar R</given-names>
</name>
<role>Senior Editor</role>
<aff>
<institution-wrap>
<institution>University of Cambridge</institution>
</institution-wrap>
<city>Cambridge</city>
<country>United Kingdom</country>
</aff>
</contrib>
</contrib-group>
<author-notes>
<corresp id="cor1"><label>5</label>Correspondence should be addressed to Olivier Codol at <email>codol.olivier@gmail.com</email>.</corresp>
</author-notes>
<pub-date date-type="original-publication" iso-8601-date="2023-06-23">
<day>23</day>
<month>06</month>
<year>2023</year>
</pub-date>
<pub-date date-type="update" iso-8601-date="2024-03-07">
<day>07</day>
<month>03</month>
<year>2024</year>
</pub-date>
<volume>12</volume>
<elocation-id>RP88591</elocation-id>
<history>
<date date-type="sent-for-review" iso-8601-date="2023-04-27">
<day>27</day>
<month>04</month>
<year>2023</year>
</date>
</history>
<pub-history>
<event>
<event-desc>Preprint posted</event-desc>
<date date-type="preprint" iso-8601-date="2023-02-23">
<day>23</day>
<month>02</month>
<year>2023</year>
</date>
<self-uri content-type="preprint" xlink:href="https://doi.org/10.1101/2023.02.17.528969"/>
</event>
<event>
<event-desc>Reviewed preprint v1</event-desc>
<date date-type="reviewed-preprint" iso-8601-date="2023-06-23">
<day>23</day>
<month>06</month>
<year>2023</year>
</date>
<self-uri content-type="reviewed-preprint" xlink:href="https://doi.org/10.7554/eLife.88591.1"/>
<self-uri content-type="editor-report" xlink:href="https://doi.org/10.7554/eLife.88591.1.sa3">eLife assessment</self-uri>
<self-uri content-type="referee-report" xlink:href="https://doi.org/10.7554/eLife.88591.1.sa2">Reviewer #1 (Public Review):</self-uri>
<self-uri content-type="referee-report" xlink:href="https://doi.org/10.7554/eLife.88591.1.sa1">Reviewer #2 (Public Review):</self-uri>
<self-uri content-type="referee-report" xlink:href="https://doi.org/10.7554/eLife.88591.1.sa0">Reviewer #3 (Public Review):</self-uri>
</event>
</pub-history>
<permissions>
<copyright-statement>© 2023, Codol et al</copyright-statement>
<copyright-year>2023</copyright-year>
<copyright-holder>Codol et al</copyright-holder>
<ali:free_to_read/>
<license xlink:href="https://creativecommons.org/licenses/by/4.0/">
<ali:license_ref>https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
<license-p>This article is distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution License</ext-link>, which permits unrestricted use and redistribution provided that the original author and source are credited.</license-p>
</license>
</permissions>
<self-uri content-type="pdf" xlink:href="elife-preprint-88591-v2.pdf"/>
<abstract>
<title>Abstract</title><p>Artificial neural networks (ANNs) are a powerful class of computational models for unravelling neural mechanisms of brain function. However, for neural control of movement, they currently must be integrated with software simulating biomechanical effectors, leading to limiting impracticalities: (1) researchers must rely on two different platforms and (2) biomechanical effectors are not generally differentiable, constraining researchers to reinforcement learning algorithms despite the existence and potential biological relevance of faster training methods. To address these limitations, we developed MotorNet, an open-source Python toolbox for creating arbitrarily complex, differentiable, and biomechanically realistic effectors that can be trained on user-defined motor tasks using ANNs. MotorNet is designed to meet several goals: ease of installation, ease of use, a high-level user-friendly API, and a modular architecture to allow for flexibility in model building. MotorNet requires no dependencies outside Python, making it easy to get started with. For instance, it allows training ANNs on typically used motor control models such as a two joint, six muscle, planar arm within minutes on a typical desktop computer. MotorNet is built on PyTorch and therefore can implement any network architecture that is possible using the PyTorch framework. Consequently, it will immediately benefit from advances in artificial intelligence through PyTorch updates. Finally, it is open source, enabling users to create and share their own improvements, such as new effector and network architectures or custom task designs. MotorNet’s focus on higher order model and task design will alleviate overhead cost to initiate computational projects for new researchers by providing a standalone, ready-to-go framework, and speed up efforts of established computational teams by enabling a focus on concepts and ideas over implementation.</p>
</abstract>

</article-meta>
<notes>
<notes notes-type="competing-interest-statement">
<title>Competing Interest Statement</title><p>The authors have declared no competing interest.</p></notes>
<fn-group content-type="summary-of-updates">
<title>Summary of Updates:</title>
<fn fn-type="update"><p>New version of the manuscript: transition to PyTorch from Tensorflow, clarification of the main text.
See full comments on the eLife version of the manuscript, in the response to reviewer comments.
See the code changes on the motornet website (referenced in main text, https://motornet.org), section &quot;changelog&quot;. The changes correspond to those under section 0.2.0 of the changelog.</p></fn>
</fn-group>
<fn-group content-type="external-links">
<fn fn-type="dataset"><p>
<ext-link ext-link-type="uri" xlink:href="https://oliviercodol.github.io/MotorNet/build/html/index.html">https://oliviercodol.github.io/MotorNet/build/html/index.html</ext-link>
</p></fn>
</fn-group>
</notes>
</front>
<body>
<sec id="s1">
<label>1.</label><title>Introduction</title>
<p>Research on the neural control of movement has a long and fruitful history of complementing empirical studies with theoretical work (<xref ref-type="bibr" rid="c31">Lindsay, 2021</xref>). Consequently, a wide variety of computational model classes have been proposed to explain empirical observations, such as equilibrium point control (<xref ref-type="bibr" rid="c12">Feldman &amp; Levin, 1995</xref>; <xref ref-type="bibr" rid="c14">Flanagan et al., 1993</xref>; <xref ref-type="bibr" rid="c21">Gribble &amp; Ostry, 2000</xref>; <xref ref-type="bibr" rid="c63">Won &amp; Hogan, 1995</xref>), optimal control (<xref ref-type="bibr" rid="c52">Shadmehr &amp; Krakauer, 2008</xref>; <xref ref-type="bibr" rid="c56">Todorov, 2004</xref>), and parallel distributed processing models (<xref ref-type="bibr" rid="c13">Fetz, 1993</xref>; <xref ref-type="bibr" rid="c19">Gomi &amp; Kawato, 1993</xref>; <xref ref-type="bibr" rid="c23">Jordan &amp; Rumelhart, 1992</xref>; <xref ref-type="bibr" rid="c30">Lillicrap &amp; Scott, 2013</xref>), commonly known as artificial neural networks (ANNs). Although ANNs were formalized many decades ago, they gained in popularity only recently following their rise to prominence in machine learning (ML; <xref ref-type="bibr" rid="c27">LeCun et al., 2015</xref>), as their greater explanatory power and biological realism provide significant advantages against alternative model classes (<xref ref-type="bibr" rid="c17">Gershman &amp; Ölveczky, 2020</xref>; <xref ref-type="bibr" rid="c28">Lillicrap et al., 2019</xref>; <xref ref-type="bibr" rid="c43">Richards et al., 2019</xref>; <xref ref-type="bibr" rid="c46">Saxe et al., 2021</xref>).</p>
<p>For neural control of movement, production of theoretical work using ANN models may be viewed as a two-step effort: (1) building a realistic simulation environment that mimics the behaviour of bodily effectors and (2) implement the policy ANNs themselves to train on the environment. Many open-source platforms achieve each of these steps individually, such as MuJoCo (<xref ref-type="bibr" rid="c57">Todorov et al., 2012</xref>) or OpenSim (<xref ref-type="bibr" rid="c9">Delp et al., 2007</xref>; <xref ref-type="bibr" rid="c50">Seth et al., 2018</xref>) for building environments, and JAX, PyTorch or TensorFlow for building and training policy ANNs. However, approaches using these platforms lead to two important impracticalities.</p>
<p>First, the user must rely on two different software platforms, one for the environment and one for the policy ANN. Communication between platforms is not built-in, requiring users to produce custom code to link the policy ANN software with the software implementing the simulation of the environment. This forces significant overhead cost to initiate computational projects and creates barriers to research teams who lack the technical background to build those custom pipelines. A current remedy to this issue is <italic>gymnasium</italic> (<xref ref-type="bibr" rid="c58">Towers et al., 2023</xref>), a Python toolbox that provides an interface between policies and environments.</p>
<p>However, <italic>gymnasium</italic> constrains the user to reinforcement learning algorithms (<xref ref-type="bibr" rid="c16">Fujimoto et al., 2018</xref>; <xref ref-type="bibr" rid="c28">Lillicrap et al., 2019</xref>; <xref ref-type="bibr" rid="c36">Mnih et al., 2015</xref>) despite the existence and potential biological relevance of faster training methods such as backpropagation (<xref ref-type="bibr" rid="c29">Lillicrap et al., 2020</xref>; <xref ref-type="bibr" rid="c60">Whittington &amp; Bogacz, 2017</xref>). The inability to use backpropagation to train policies represents the second impracticality. To date, this has been circumvented by training separate ANNs such as multi-layer perceptrons or recurrent neural networks (RNNs) as “forward models” approximating the behaviour of effectors that are normally implemented in a separate software package (e.g., <xref ref-type="bibr" rid="c30">Lillicrap &amp; Scott, 2013</xref>; <xref ref-type="bibr" rid="c62">Willett et al., 2021</xref>). This approach does not address the need for custom pipelines, and remains a slow, cumbersome process when iterating over many different policies and environments, because new approximator ANNs must be trained each time.</p>
<p>Solving the issues described above requires both the policy and environment to rely on the same software (no-dependency requirement), and for the environment to allow for backpropagation through itself (differentiability requirement) so that typical gradient-based algorithms may be employed. Ideally, the solution would also be open source, modular for flexibility of coding and focus on ideas, and have reasonable training speeds on commercially available computers.</p>
<p>We developed MotorNet with these principles in mind. MotorNet is a freely available open-source Python toolbox (<ext-link ext-link-type="uri" xlink:href="https://motornet.org">https://motornet.org</ext-link>) that allows for the training of ANNs to control arbitrarily complex and biomechanically realistic effectors to perform user-defined motor tasks. The toolbox requires no dependency besides standard Python toolboxes available on <italic>pip</italic> or Anaconda libraries. This greatly facilitates its use on remote computing servers as no third-party software needs to be installed. The environments are fully differentiable, enabling fast and efficient training of ANNs using standard gradient-based methods. It is designed with ease of installation and ease of use in mind, with a high-level and user-friendly application programming interface (API). Its programming architecture is modular to allow for flexibility in model building and task design. Finally, MotorNet is built on PyTorch, which makes innovation in machine learning readily available for use by MotorNet as they are implemented and released by the PyTorch Foundation. Here, we focus on illustrating the scientific use and relevance of the toolbox (the <italic>why</italic>), rather than the underlying API through coding snippets (the <italic>how</italic>), as the latter is more efficiently showcased via interactive, easily updatable online tutorials. The interested reader may consult the full API documentation, including interactive tutorials on the toolbox website at <ext-link ext-link-type="uri" xlink:href="https://motornet.org">https://motornet.org</ext-link>.</p>
</sec>
<sec id="s2">
<label>2.</label><title>Results</title>
<sec id="s2a">
<label>2.1.</label><title>Training an ANN to perform a centre-out reaching task against a curl field</title>
<p>A canonical experimental paradigm in the study of neural control of movement is the centre-out reaching task with a “curl field” applied at the arm’s end point by a robot arm (<xref ref-type="bibr" rid="c8">Conditt et al., 1997</xref>; <xref ref-type="bibr" rid="c53">Shadmehr &amp; Mussa-Ivaldi, 1994</xref>). In this paradigm, visual targets are placed around a central starting position in a horizontal plane. Participants must move the handle of a robot arm from the starting position to the target that appears on a given trial. During the reaching movement, the robot applies forces at the handle that scale linearly with the velocity of the hand and push in a lateral direction. This leads the central nervous system to adapt by modifying neural control signals to muscles to apply opposite forces to counteract and nullify the lateral forces produced by the robot. Finally, removal of the curl field leaves an opposite after-effect (<xref ref-type="bibr" rid="c53">Shadmehr &amp; Mussa-Ivaldi, 1994</xref>). This paradigm is well suited to assess the functionality of MotorNet because it is well understood and extensively documented, and highlights physical, biomechanical, and control properties of human behaviour.</p>
<p>We specified a one-layer RNN composed of 50 gated recurrent units (GRUs; <xref ref-type="bibr" rid="c5">Cho et al., 2014</xref>) to control a two degrees of freedom, six muscle planar arm model (<italic>arm26</italic>; <xref rid="fig1" ref-type="fig">Figure 1a</xref>; <xref ref-type="bibr" rid="c25">Kistemaker et al., 2006</xref>, <xref ref-type="bibr" rid="c26">2010</xref>). The muscles were rigid-tendon, Hill-type muscle models, with “shoulder” mono-articular flexors/extensors, “elbow” mono-articular flexors/extensors, and a bi-articular pair of muscles producing flexion or extension at both joints (see Methods <xref rid="s4a1" ref-type="sec">section 4.1.1</xref> and <xref ref-type="sec" rid="s4b1">4.2.1</xref>.).</p>
<fig id="fig1" position="float" orientation="portrait" fig-type="figure">
<label>Figure 1:</label>
<caption><title>Controlling an arm-like effector in a centre-out reaching task with a curl field.</title>
<p><bold>(a)</bold> Schematic of the environment (containing the effector) and policy. <bold>(b)</bold> Endpoint trajectories of centre-out reaching movements in a null and curl field, for a policy RNN that is untrained (naive) and then trained to reach in that curl field. The effector was as defined in <xref ref-type="bibr" rid="c26">Kistemaker et al. (2010)</xref> <bold>(c)</bold> Different variables over time during a rightward reaching movement.</p></caption>
<graphic xlink:href="528969v4_fig1.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
<p>Training the model above took about 13 minutes on a 2022 Mac Studio with an M1 Max central processing unit (Apple Inc., Cupertino CA, USA). Because the <italic>arm26</italic> effector and the centre-out reaching task are particularly common in the motor control literature, they are included in the toolbox as pre-built objects. Consequently, one can recreate the effector instance and the corresponding environment in one line of code for each. Note however that users can easily declare their own custom-made effector and environment objects if desired by subclassing the base <italic>Effector</italic> and <italic>Environment</italic> class, respectively (see below for more details on base classes and subclassing).</p>
<p>Including the implementation of the policy RNN and training routine, the above example can be reproduced with a few lines of code (see tutorial notebooks online), illustrating the ease of use of MotorNet’s API. Once the model is trained, it can produce validation results via a forward pass (<xref rid="fig1" ref-type="fig">Figure 1b-c</xref>), which can then be saved and analysed afterwards. The results the model produces include joint and cartesian states (positions, velocities), muscle states (lengths, velocities, activations, forces), musculo-tendon states (lengths, velocities), efferent actions (<italic>i.e.</italic>, time-varying muscle drive) and afferent feedback responses (proprioceptive, visual), as well as any activity states from the network if applicable (<xref rid="fig1" ref-type="fig">Figure 1c</xref>). Note that actions are different from muscle activations, in that they are input signals to the Ordinary Differential Equation that produces muscle activation (see Methods; <xref ref-type="bibr" rid="c35">Millard et al., 2013</xref>; <xref ref-type="bibr" rid="c55">Thelen, 2003</xref>).</p>
</sec>
<sec id="s2b">
<label>2.2.</label><title>Structure of MotorNet</title>
<p>Functionally, a MotorNet model can be viewed as a differentiable environment that can directly employ outputs from a policy ANN as action signals. The environment contains an effector, which is actuated according to the action input and in turn outputs information that may be fed back to the ANN (<xref rid="fig2" ref-type="fig">Figure 2</xref>). This closed-loop cycle repeats for each timestep. By default, “visual” feedback consists of a vector indicating endpoint cartesian coordinates, while “proprioceptive” feedback consists of a 2<italic>m</italic>-elements vector of muscle length and velocity, with <italic>m</italic> the number of muscles of the effector. Noise may be added in various parts of the model, such as on descending action signals or on feedback signals. Finally, time delays may be added to feedback signals before they reach the policy ANN. Importantly, the policy ANN may be any PyTorch network, and the MotorNet environments are designed to match standard <italic>gymnasium</italic> API conventions. That is, it is not necessary to create a policy by sub-classing a MotorNet <italic>Policy</italic> object.</p>
<fig id="fig2" position="float" orientation="portrait" fig-type="figure">
<label>Figure 2:</label>
<caption><title>Conceptual organization of a MotorNet model.</title>
<p>A policy ANN receives arbitrary input as well as recurrent connections from itself and sends action signals to an effector embedded in an environment, which in turn sends sensory feedback information. Typically, this feedback will be visual and proprioceptive, and can contain feedback-specific time delays Δ<sub>p</sub> and Δ<sub>v</sub>. Gaussian noise can be added to the recurrent connection, action signal, and proprioceptive and visual feedback, with specific standard deviation σ<sub>h</sub>, σ <sub>u</sub>, σ <sub>p</sub>, and σ <sub>v</sub>.</p></caption>
<graphic xlink:href="528969v4_fig2.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
<sec id="s2b1">
<label>2.2.1.</label><title>Running flow</title>
<p>At runtime, a more detailed representation of the information flow best describes how a MotorNet model behaves (<xref rid="fig3" ref-type="fig">Figure 3a</xref>). Models are based on five object classes: <italic>Skeleton</italic>, <italic>Muscle</italic>, <italic>Effector</italic>, <italic>Environment</italic>, and <italic>Policy</italic> objects (<xref rid="tbl1" ref-type="table">Table 1</xref>). Each object has its own base class, from which the user can create a custom subclass if desired. MotorNet comes with a set of pre-built subclasses for each, which implement commonly used computational model formalizations (<xref rid="tbl1" ref-type="table">table 1</xref>).</p>
<fig id="fig3" position="float" orientation="portrait" fig-type="figure">
<label>Figure 3:</label>
<caption><title>Implementation of MotorNet.</title>
<p><bold>(a)</bold> Information flow of a MotorNet model during runtime. <bold>(b)</bold> Declarative structure of a MotorNet object. Each object instance is held in memory as an attribute of another according to this hierarchical representation, except for the Muscle, and Skeleton instances.</p></caption>
<graphic xlink:href="528969v4_fig3.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
<table-wrap id="tbl1" orientation="portrait" position="float">
<label>Table 1:</label>
<caption><title>Overview of Python base classes and their respective pre-built subclasses in MotorNet. GRU: Gated Recurrent Unit.</title></caption>
<graphic xlink:href="528969v4_tbl1.tif" mimetype="image" mime-subtype="tiff"/>
</table-wrap>
<p><italic>Environment</italic> objects are the entry point of the model (<xref rid="fig3" ref-type="fig">Figure 3a</xref>). They take arbitrary action inputs, which are then passed on to the <italic>Effector</italic> object. <italic>Effector</italic> objects are essentially wrapper objects that hold the <italic>Muscle</italic> and <italic>Skeleton</italic> objects and handle coordination of information flow between them (<xref rid="fig3" ref-type="fig">Figure 3a-b</xref>), as well as concomitant numerical integration to ensure numerical stability. They pass the action signals to the <italic>Muscle</italic> object, which computes forces in return. The <italic>Effector</italic> will adjust those forces using geometry-dependent moment arms (see <xref rid="s2c" ref-type="sec">section 2.3</xref> for details) and send the resulting generalized forces to the <italic>Skeleton</italic> object. These generalized forces will actualize the <italic>Skeleton</italic>’s joint state, which the <italic>Skeleton</italic> will return to the <italic>Effector</italic> object alongside the equivalent cartesian state. The <italic>Effector</italic> will then return the actuated states to the <italic>Environment</italic> object.</p>
<p>Finally, the <italic>Environment</italic> object will return an observation vector that contains arbitrarily processed information about the states of the <italic>Environment</italic> and <italic>Effector</italic> objects. These can usually be passed on to the policy ANN as input to perform the next forward pass. The <italic>Environment</italic> may maintain a delay buffer, which stores state information for a certain time (according to the Δ<sub>p</sub> and Δ<sub>v</sub> parameters, <xref rid="fig2" ref-type="fig">Figure 2</xref>), allowing the observation vector to be fed time-delayed state information. The <italic>Environment</italic> also outputs an information dictionary, which contains all the instantaneous (<italic>i.e.</italic>, non-delayed) states from the <italic>Environment, Effector, Skeleton</italic> and <italic>Muscle</italic> objects. This allows the user to monitor the true state of the MotorNet model at each timestep.</p>
</sec>
<sec id="s2b2">
<label>2.2.2.</label><title>Object structure</title>
<p>The classes presented above rely on each other to function correctly. Consequently, they must be declared in a sensible order, so that each object instance retains as attribute the object instances on which they rely. This leads to a hierarchical class structure, where each instance lives in the computer memory in a nested fashion with other instances, as laid out in <xref rid="fig3" ref-type="fig">Figure 3b</xref>. Note that this does not mean that each class is a subclass of the class that contains it, but that each contained class is saved as an attribute of the container class. The outermost class is an <italic>Environment</italic> object, which itself is a subclass of <italic>gymnasium</italic>’s <italic>Env</italic> class. The <italic>Environment</italic>, <italic>Effector</italic>, <italic>Skeleton</italic>, and <italic>Muscle</italic> objects are also <italic>torch.nn.Module</italic> subclasses. The <italic>Policy</italic> objects are distinct, in that they do not hold any other MotorNet object as attribute. This independence allows users to create their own neural networks without having to rely on MotorNet’s <italic>Policy</italic> object, which allows for more freedom for the user to design any policy that PyTorch can create.</p>
</sec>
</sec>
<sec id="s2c">
<label>2.3.</label><title>Biomechanical properties of the effector</title>
<p>The modular structure detailed above allows MotorNet to flexibly compute detailed biomechanical properties of <italic>Effector</italic> objects, such as arbitrary muscle paths (<xref ref-type="bibr" rid="c38">Nijhof &amp; Kouwenhoven, 2000</xref>), geometry-dependent moment arms (<xref ref-type="bibr" rid="c37">Murray et al., 1995</xref>; <xref ref-type="bibr" rid="c54">Sherman et al., 2013</xref>), non-linear muscle activations and passive force production from muscle stretch (<xref ref-type="bibr" rid="c4">Cheng &amp; Scott, 2000</xref>; <xref ref-type="bibr" rid="c35">Millard et al., 2013</xref>; <xref ref-type="bibr" rid="c55">Thelen, 2003</xref>). This enables training ANNs on motor tasks whose dynamics are highly non-linear and close to biological reality. In this section we illustrate some of these biomechanical properties implemented by MotorNet effectors using specific examples. These properties are well-characterised in the biology and are often implemented in realistic biomechanical simulation software.</p>
<sec id="s2c1">
<label>2.3.1.</label><title>Assessing moment arms with a simple point-mass effector</title>
<p>The geometrical path – fixation body(s) and fixation point(s) on that body – of each <italic>Muscle</italic> object can be declared by the user, allowing for arbitrary linkage between muscles and bones (see Methods <xref rid="s4c" ref-type="sec">section 4.3</xref>, <xref ref-type="bibr" rid="c38">Nijhof &amp; Kouwenhoven, 2000</xref>). Using geometric first principles (<xref ref-type="bibr" rid="c54">Sherman et al., 2013</xref>), the <italic>Effector</italic> object can then calculate the moment arm of forces produced, which is defined for each muscle as the change in value of the degrees of freedom (DoF) of the skeleton for a given change in the muscle’s length (<xref ref-type="bibr" rid="c37">Murray et al., 1995</xref>; <xref ref-type="bibr" rid="c54">Sherman et al., 2013</xref>). In lay terms, this is the capacity of a muscle to produce a torque on a joint based on the muscle’s pulling angle on the bones forming that joint. The relationship between pull angle and torque can intuitively be understood using a door as an example: it is easier to push a door when pushing with an angle orthogonal to that door than in a near-parallel angle to that door.</p>
<p>Moment arms generally vary depending on the positional configuration of the <italic>Effector</italic>. To illustrate this, let us consider a simple case of a point-mass skeleton (one fixation body) with four muscles attached to it in a “X” configuration (<xref rid="fig4" ref-type="fig">Figure 4a</xref>). When the point-mass is positioned in the centre of the workspace space (red position in <xref rid="fig4" ref-type="fig">Figure 4a-b</xref>), any muscle pulling will change the position of the point-mass equally in the <italic>x</italic> dimension and in the <italic>y</italic> dimension. Note that <italic>x</italic> and <italic>y</italic> are the DoFs of the point-mass skeleton since they do not have hinge joints. In contrast, if the point-mass is positioned below the central position (<italic>x</italic> = 0, <italic>y</italic> = −0.9; black position in <xref rid="fig4" ref-type="fig">Figure 4a</xref>), a pull from <italic>e.g.</italic>, the lower left muscle will produce a greater change in the <italic>x</italic> dimension than in the <italic>y</italic> dimension because of the different muscle alignment (<xref rid="fig4" ref-type="fig">Figure 4b</xref>).</p>
<fig id="fig4" position="float" orientation="portrait" fig-type="figure">
<label>Figure 4:</label>
<caption><title>Geometrical properties of an Effector object.</title>
<p><bold>(a)</bold> Schematic of a point-mass in two positional configurations within a square workspace. The point-mass Skeleton was linked to four muscles in a “X” configuration. <bold>(b)</bold> Moment arm values for each of the positional configurations represented in (a), with respect to x and y. <bold>(c)</bold> Complete moment arm function over the position space for each muscle (columns) and with respect to each DoF. The upper and lower row indicate the moment arm with respect to the x and y position, respectively. <bold>(d)</bold> Moment arms of a mono-articular extensor muscle on an arm26. <bold>(e)</bold> Moment arms of a bi-articular flexor muscle on an arm26. <bold>(f)</bold> Passive drift in endpoint position of an arm26 similar to <xref rid="fig1" ref-type="fig">Figure 1c</xref> due to passive force developed by overstretch Hill-type muscles.</p></caption>
<graphic xlink:href="528969v4_fig4.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
<p>The moment arm can then be calculated for all possible positions in the workspace, as represented by the solid black square in <xref rid="fig4" ref-type="fig">Figure 4a</xref>. This can be done for each of the four muscles, and each of the two DoFs, resulting in 8 moment arms (<xref rid="fig4" ref-type="fig">Figure 4c</xref>). We can see that each moment arm forms a slightly bent hyperplane. Importantly, for each hyperplane the diagonal with constant moment arm lines up with the path formed by the muscle when the point mass is at the centre of the workspace. For instance, the moment arm of the upper right muscle is identical when the point-mass is in position (<italic>x</italic> = 1, <italic>y</italic> = 1) and in position (−1, −1). This is true both with respect to the <italic>x</italic> DoF (<xref rid="fig4" ref-type="fig">Figure 4c</xref>, upper row, leftmost axis) and with respect to the <italic>y</italic> DoF (<xref rid="fig4" ref-type="fig">Figure 4c</xref>, lower row, leftmost axis). Note also that muscles whose shortening leads to an increase in the DoF considered – or inversely whose lengthening leads to a decrease in the DoF – express negative moment arms. For instance, a shortening of the lower right muscle would lead to an increase in the <italic>x</italic> DoF and a decrease in the <italic>y</italic> DoF. Or more plainly, a pull from the lower right muscle would bring the point-mass closer to the lower right corner of the workspace. This leads to the negative moment arm of that muscle with respect to <italic>x</italic> (<xref rid="fig4" ref-type="fig">Figure 4c</xref>, upper row) and positive moment arm with respect to <italic>y</italic> (lower row).</p>
</sec>
<sec id="s2c2">
<label>2.3.2.</label><title>Moment arms with a two-joint arm</title>
<p>To consider a more complex effector, we assessed the moment arm of two muscles wrapping around a two-joint arm skeleton. We first assessed a mono-articular muscle, that is, a muscle that spans only one joint – here, the elbow. As expected, the moment arm of that muscle with respect to the shoulder joint is always null (black arrows, <xref rid="fig4" ref-type="fig">Figure 4d</xref>) regardless of the joint configuration since the muscle does not span that joint. In contrast, the moment arm with respect to the elbow joint varies as the elbow joint angle changes. Finally, as expected from an extensor muscle, the moment arm is positive, indicating that the elbow angle would decrease as the muscle shortens.</p>
<p>In comparison, a bi-articular muscle’s moment arm is non-zero with respect to both joints (<xref rid="fig4" ref-type="fig">Figure 4e</xref>). This also leads the moment arms with respect to each joint to show a small interaction as the other joint’s angle changes, as indicated by a slight “bend” in the hyperplane (black arrows, <xref rid="fig4" ref-type="fig">Figure 4e</xref>). Finally, as expected for a bi-articular flexor muscle, the moment arms are negative with respect to both joints, indicating that muscle shortening would result in an increase in joint angle.</p>
</sec>
<sec id="s2c3">
<label>2.3.3.</label><title>Passive drift with Hill-type muscles</title>
<p>Finally, we assessed the positional drift induced by passive forces of Hill-type muscle models (<xref ref-type="bibr" rid="c35">Millard et al., 2013</xref>; <xref ref-type="bibr" rid="c55">Thelen, 2003</xref>) in an <italic>arm26</italic> effector model. We initialized the model’s starting position at fixed intervals across the range of possible joint angles, resulting in a grid of 21-by-21 possible starts. We then simulated the effector with null inputs for 200 ms and plotted the drift in the arm’s endpoint position from its original position. Because the model received no input, all forces produced are due to the passive component of the Hill-type muscles, which occurs when the muscle is stretched beyond its slack length (<xref ref-type="bibr" rid="c4">Cheng &amp; Scott, 2000</xref>; <xref ref-type="bibr" rid="c35">Millard et al., 2013</xref>; <xref ref-type="bibr" rid="c55">Thelen, 2003</xref>). We can see that drift is negligible at the centre of the joint space but starts to increase toward the edge (<xref rid="fig4" ref-type="fig">Figure 4f</xref>), indicating that the associated joint configurations lead to overstretched muscle lengths and resulting in passive force production. Note that since this phenomenon is dependent on the slack length value of each muscle, which is user-defined, the presence of passive drift is dependent on the user’s modelling choices.</p>
</sec>
</sec>
<sec id="s2d">
<label>2.4.</label><title>Training ANNs to produce naturalistic behaviour</title>
<p>Now that we can implement biomechanically realistic effectors, we next assessed whether a policy ANN can learn a complex control policy to move those effectors using backpropagation (<xref ref-type="bibr" rid="c23">Jordan &amp; Rumelhart, 1992</xref>; <xref ref-type="bibr" rid="c44">Rumelhart et al., 1986</xref>). A typical way to ensure the computation learnt by an ANN is functionally meaningful is to test its out-of-distribution generalization. To assess this, we trained a 1-layer RNN with <italic>n</italic> = 110 GRUs controlling an <italic>arm26</italic> model to perform reaching movements in 0.8 sec simulations using the following paradigm. Starting positions and targets were randomly drawn from a uniform distribution across the full joint space. Movements were to be delayed until the occurrence of a visual “go” cue randomly drawn from a uniform distribution spanning the full simulation window. The appearance of the go cue reached the RNN as input after a delay corresponding to the visual feedback delay, which was set at <italic>Δ</italic><sub><italic>v</italic></sub> = 50 ms (<xref rid="fig2" ref-type="fig">Figure 2</xref>; <xref ref-type="bibr" rid="c10">Dimitriou et al., 2013</xref>; <xref ref-type="bibr" rid="c40">Pruszynski et al., 2010</xref>). In half of trials, no go cue was provided (catch trial), in which case the task effectively reduced to a postural control task. A 100 ms endpoint mechanical perturbation, whose orientation, magnitude, and time were also randomly drawn occurred in half of trials, independently of whether the trial was a catch trial or not. Importantly, the perturbation magnitude was drawn from a uniform distribution ranging between 0 and 4 N. If the perturbation occurred during a catch trial, the distribution ranged between 0 and 8 N. Therefore, the training protocol used for this task largely differed from <xref rid="s2a" ref-type="sec">section 2.1</xref> in that the networks are exposed to a wide range of mechanical perturbations with varying characteristics.</p>
<p>The network was trained using the following loss:
<disp-formula id="eqn1">
<graphic xlink:href="528969v4_eqn1.gif" mimetype="image" mime-subtype="gif"/>
</disp-formula>
With <italic>L</italic> the global loss including a kernel regularization term with penalty coefficient <italic>λ</italic> = 10<italic>e</italic><sup>-6</sup>, and <bold><italic>W</italic></bold> the kernel weight matrix of the RNN’s hidden layer. The operators ‖ · ‖<sub>1</sub>and ‖ · ‖<sub>2</sub> indicate the L1 and L2 vector norm, respectively. <italic>L<sub>t</sub></italic> is the instantaneous loss at time <italic>t</italic>, with coefficients <italic>α</italic> = 2, <italic>β</italic> = 5, <italic>γ</italic> = 0.1. <inline-formula><inline-graphic xlink:href="528969v4_inline1.gif" mimetype="image" mime-subtype="gif"/></inline-formula> is the positional penalty at time <italic>t</italic>, with <bold><italic>x</italic></bold><italic><sub>t</sub></italic>,<inline-formula><inline-graphic xlink:href="528969v4_inline2.gif" mimetype="image" mime-subtype="gif"/></inline-formula> the position and desired position (target) vector, respectively, and <italic>r</italic> = 0.01 the target radius.<inline-formula><inline-graphic xlink:href="528969v4_inline3.gif" mimetype="image" mime-subtype="gif"/></inline-formula> is the muscle activation penalty at time <italic>t</italic>, with <bold><italic>u</italic></bold><italic><sub>t</sub></italic>, <bold><italic>f</italic></bold> two vectors representing muscle activations at time <italic>t</italic> and maximum isometric force, respectively. Finally, <inline-formula><inline-graphic xlink:href="528969v4_inline4.gif" mimetype="image" mime-subtype="gif"/></inline-formula> is the network hidden activity penalty at time <italic>t</italic>, with <bold><italic>h</italic></bold><italic><sub>t</sub></italic> the <italic>n</italic>-elements vector of GRU hidden activity, <inline-formula><inline-graphic xlink:href="528969v4_inline5.gif" mimetype="image" mime-subtype="gif"/></inline-formula> its time derivative, and κ = 0.05. While superficially this loss appears complex, a direct relationship to biology can be drawn for all terms. Essentially, this loss enforces the control policy to be learned using a simple, straightforward rule (“get to the target”), while promoting low metabolic cost from network input connectivity (cost on kernel norm), from the muscles (cost on activation, scaled by muscle strength), and from network activity (cost on hidden activity and its derivative to discourage oscillatory regimes).</p>
<p>Behavioural performance on a training set can be seen in <xref rid="fig5" ref-type="fig">Figure 5a</xref>, with trials with a large perturbation (&gt; 3 <italic>N</italic>) highlighted in blue. This illustrates the rich variability of the training set, encouraging the RNN to learn computationally potent and generalizable solutions to the control problem given the sensorimotor feedback provided (<xref rid="fig2" ref-type="fig">Figure 2</xref>). Despite this variability, the loss value decreased smoothly (<xref rid="fig5" ref-type="fig">Figure 5b</xref>).</p>
<fig id="fig5" position="float" orientation="portrait" fig-type="figure">
<label>Figure 5:</label>
<caption><title>A MotorNet model can learn a control policy that generalizes to out-of-distribution perturbations.</title>
<p><bold>(a)</bold> Behavioural outputs to a training set input sample after training. <bold>(b)</bold> Loss function over training iterations, with a batch size of 1024. <bold>(c)</bold> Trajectories in a centre-out reaching task with mechanical perturbations applied at the arm’s endpoint 120 ms after the “go” cue. The perturbations were orthogonal to the reaching axis passing from the starting position to the target. o.o.d.: out of distribution. <bold>(d)</bold> Same as (c) for a postural control task. In this task, the network was not provided with a target and therefore only had to remain in the starting position against the perturbations. Mechanical perturbations were in the vertical (left) or horizontal (right) axis. <bold>(e)</bold> Muscle activation over time for two trajectories in (c) (black and blue lines) and a trajectory in (g) (green line). BE: bi-articular extensor. BF: bi-articular flexor. EE: elbow extensor. EF: elbow flexor. SE: shoulder extensor. SF: shoulder flexor. <bold>(f)</bold> Reaching task as in (c) for a network never exposed to mechanical perturbations during training. <bold>(g)</bold> Postural task as in (d) for the same network as in (f). Perturbations were in the vertical (top) or horizontal (bottom) axis.</p></caption>
<graphic xlink:href="528969v4_fig5.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
<p>We tested the model’s behavioural output in 0.8 sec simulations with a centre-out reaching task. Eight targets were positioned in 45 degrees increments and 10 cm away from a starting position corresponding to a shoulder and elbow angle of 45 and 90 degrees, respectively (<xref rid="fig5" ref-type="fig">Figure 5c</xref>). The RNN reached to each of these targets following a visual go cue at 100 ms. 70 ms after the “go” cue was “perceived” (i.e., 70 ms plus the visual feedback delay), a mechanical perturbation was applied at the arm’s endpoint and orthogonally to the reaching direction. This perturbation could be either within-distribution (±3 N) or out-of-distribution (±6 N) or null (no perturbation). In all cases, the RNN could correct for the mechanical perturbation, reach to the target, and stabilize (<xref rid="fig5" ref-type="fig">Figure 5c</xref>).</p>
<p>Next, we tested the RNN in a postural control task, where it had to bring the arm’s endpoint back to the target following a mechanical perturbation (<xref ref-type="bibr" rid="c41">Pruszynski et al., 2014</xref>). No go cue was provided. We applied perturbations in either of the four cardinal directions (0°, 90°, 180°, 270°) at 170 ms plus visual delay after the trial started. Again, the set of perturbations for testing outputs included within-distribution magnitudes (±6 N) and out-of-distribution magnitudes (±12 N). In all cases, the RNN could integrate the sensorimotor information to bring the arm’s endpoint back into the target (<xref rid="fig5" ref-type="fig">Figure 5d</xref>). Interestingly, in some cases this led to an oscillatory trajectory (e.g., for a rightward +12 N perturbation, <xref rid="fig5" ref-type="fig">Figure 5d</xref>), indicating that perturbations beyond a given magnitude remain increasingly challenging to control for.</p>
<p>Finally, we compared muscle activations for an upward reach with no perturbation to that of an identical reach with a -6 N perturbation (<xref rid="fig5" ref-type="fig">Figure 5e</xref>). We can see that muscle activations are similar before the occurrence of the perturbation, and remain similar immediately after, indicating a time delay in the response. The fastest responses occurred for the bi-articular muscles and the shoulder extensor muscle. Other muscles, particularly the shoulder flexor, showed very delayed or non-existent changes in muscle activation. This illustrates that the RNN’s response to a perturbation is not a mere stimulus-driven reactive response, but an integrated response that can delay or withhold the production of counteracting forces if necessary. Note that for the non-perturbed movement (black line in <xref rid="fig5" ref-type="fig">Figure 5e</xref>), we can observe the canonical tri-phasic muscle activation pattern reported in empirical studies (<xref ref-type="bibr" rid="c61">Wierzbicka et al., 1986</xref>).</p>
<p>To assess how the existence of sensorimotor feedback impacted the control policy acquired by the policy network, we trained a second, identical network to perform the same task but with no mechanical perturbation during training (perturbation-free). Interestingly, following the same amount of training, the model with a perturbation-free network can handle perturbations during reaching relatively well, even up to ±6 N (<xref rid="fig5" ref-type="fig">Figure 5f</xref>). We can compare muscle activations for an upward reach with a -6 N perturbation to that of the same movement in the network trained with perturbations (<xref rid="fig5" ref-type="fig">Figure 5f</xref>, green versus blue lines).</p>
<p>Even though kinematics appeared superficially similar (<xref rid="fig5" ref-type="fig">Figure 5c, f</xref>), this comparison shows that muscle activations tend to differ in response to a perturbation (<xref rid="fig5" ref-type="fig">Figure 5e</xref>), suggesting that the perturbation-free network might learn a slightly different control policy. Testing the perturbation-free network on the postural task shown in <xref rid="fig5" ref-type="fig">Figure 5d</xref> emphasizes this difference (<xref rid="fig5" ref-type="fig">Figure 5g</xref>). The perturbation-free network is much less capable of stabilizing against the forces than its perturbation-trained counterpart.</p>
<p>Therefore, even though the mere existence of a sensorimotor feedback input can help handle simple perturbations (<xref rid="fig5" ref-type="fig">Figure 5f</xref>), exposing the model to perturbations during training does provide the network with additional information to learn a more robust control policy. Overall, these simulations show that MotorNet can train ANNs to reliably find a control policy for the effector. Importantly, the resulting networks learn generalizable control policies that integrate sensorimotor feedback into its computation. This also illustrates the importance of the training procedure to which the network is exposed to produce these control policies (<xref ref-type="bibr" rid="c11">Driscoll et al., 2022</xref>).</p>
</sec>
<sec id="s2e">
<label>2.5.</label><title>Effector Geometry Defines Preference Distribution of Firing Rates: A Replication Study</title>
<p>Finally, to assess MotorNet’s capacity to replicate established results in the literature, we sought to reproduce key observations from <xref ref-type="bibr" rid="c30">Lillicrap and Scott (2013)</xref>. In that study, the authors show that training an RNN to perform a simple centre-out reaching task using an arm model similar to the arm26 in <xref rid="fig1" ref-type="fig">Figure 1a</xref> results in the RNN neurons displaying a preferential movement direction (PMD) where they are more likely to fire. The distribution of PMDs was asymmetrical, with a greater proportion of neurons firing for reaches around 135 degrees and 325 degrees, matching empirical observations from non-human primate electrophysiological recordings in the primary motor cortex (<xref ref-type="bibr" rid="c47">Scott et al., 2001</xref>). Next, they showed that this asymmetrical representation of PMDs during reaching movements did not occur when RNNs were trained to control an effector that lacked the geometrical properties of an arm such as illustrated in <xref rid="fig4" ref-type="fig">Figure 4c-e</xref> and <xref rid="s2a" ref-type="sec">section 2.1</xref>. Specifically, they compared the PMD distribution of RNN neurons controlling a point-mass (no geometry) against that of an arm26 (geometry present).</p>
<p>We sought to reproduce the two results outlined above. First, we trained an RNN composed of 90 GRUs in a single layer to control for an arm26 (<xref rid="fig6" ref-type="fig">Figure 6a</xref> see Methods <xref rid="s4e" ref-type="sec">section 4.5</xref>). Because our RNN employs GRUs instead of a multi-layer perceptron, 90 units were sufficient to efficiently train the network to perform the task, as opposed to up to 1000 perceptron nodes in the original study. We also increased the number of targets from 8 to 24 to obtain a finer resolution over movement direction in our analyses (<xref rid="fig6" ref-type="fig">Figure 6b</xref>).</p>
<fig id="fig6" position="float" orientation="portrait" fig-type="figure">
<label>Figure 6:</label>
<caption><title>The distribution of preferential movement direction tuning is sensitive to the geometry of the effector.</title>
<p><bold>(a)</bold> Schematic of the two models compared. The RNNs and their architecture were identical, but the effector differed, with one RNN controlling a two-joint arm26 (left) and the other controlling a point-mass (right). <bold>(b)</bold> Centre-out reaching trajectories to 24 targets for the arm26 (left) and point-mass (right) model. <bold>(c)</bold> Distribution of preferential movement directions (PMDs) for the arm26 (left) and point-mass (right) model. The PMDs were determined by regression of each GRU’s hidden activity averaged over time against reach angle (see Methods for details). <bold>(d)</bold> Normalized muscle activations across reaching angles and for the 300 ms following the “go” cue for the arm26 model. <bold>(e)</bold> Normalized β coefficients of the regression models used for (c). The GRUs were ordered according to the angle of their maximum β value. Note that the “ridge” of maximum β yields roughly a straight line for the point-mass model, while it yields a crooked line for the arm26, indicative of a representation bias. <bold>(f)</bold> Hidden activity over time and across reaching angles for a random sample of GRUs in the arm26 model.</p></caption>
<graphic xlink:href="528969v4_fig6.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
<p>Following training, we first ensured that muscle activation patterns in the arm26 effector were like those reported in the original study (<xref rid="fig6" ref-type="fig">Figure 6d</xref>). Regarding network activity, we observed a great variety of activation patterns over movement direction (<xref rid="fig6" ref-type="fig">Figure 6f</xref>). Some GRUs showed a preference for timing (e.g., neuron A4, C5), while others showed a strong preference for reaching direction that was sustained over time (neuron C3, A2). Finally, most neurons showed a mixed preference for encoding time and reaching direction (neuron C8, A8). This heterogeneous set of responses matches empirical observations in non-human primate primary motor cortex recordings (<xref ref-type="bibr" rid="c6">Churchland &amp; Shenoy, 2007</xref>; <xref ref-type="bibr" rid="c33">Michaels et al., 2016</xref>) and replicate similar visualizations from previously published work (<xref ref-type="bibr" rid="c15">Fortunato et al., 2023</xref>; <xref ref-type="bibr" rid="c30">Lillicrap &amp; Scott, 2013</xref>; <xref ref-type="bibr" rid="c45">Safaie et al., 2023</xref>).</p>
<p>We then assessed each GRU’s PMD using linear regression (see methods) and sorted them based on their PMD before plotting the tuning curve of each neuron. The resulting colormap (<xref rid="fig6" ref-type="fig">Figure 6e</xref>, left panel) yields a “ridge” of maximal activity whose peak varies across reach angle, forming a crooked line, illustrating a representational bias. This crooked ridge line was not observed in an RNN trained to control for a point-mass effector instead using an identical training procedure and analysis (<xref rid="fig6" ref-type="fig">Figure 6e</xref>, right panel). We replicated this procedure with 7 more RNNs for each model, resulting in a total of 8 RNNs trained on an arm26 and 8 RNNs trained on a point-mass. We determined each GRU’s PMD and averaged the resulting polar histogram across each RNN (<xref rid="fig6" ref-type="fig">Figure 6c</xref>). The same bias was reproduced invariably for the RNNs controlling an arm26 effector (<xref rid="fig4" ref-type="fig">Figure 4d-e</xref>, <xref rid="fig6" ref-type="fig">Figure 6a</xref>), while it failed to arise for those controlling a point-mass (<xref rid="fig4" ref-type="fig">Figure 4a-c</xref>, <xref rid="fig6" ref-type="fig">Figure 6a</xref>). Therefore, these results mimic the observations made in the original study (<xref ref-type="bibr" rid="c30">Lillicrap &amp; Scott, 2013</xref>), specifically, that RNNs controlling an effector with no arm-like geometrical properties will not result in the biased PMD representation during reaching movements commonly observed in non-human primate electrophysiological studies (<xref ref-type="bibr" rid="c47">Scott et al., 2001</xref>; <xref ref-type="bibr" rid="c48">Scott &amp; Kalaska, 1997</xref>).</p>
</sec>
</sec>
<sec id="s3">
<label>3.</label><title>Discussion</title>
<sec id="s3a">
<label>3.1.</label><title>Iterating quickly through the model development cycle</title>
<p>In the field of machine learning, an established best practice is to iterate quickly around a cycle of (1) formulating an idea, (2) implementing that idea in functionally efficient code, and (3) testing the idea through running the simulations. The results of the simulations can then be leveraged to adjust the idea, thus closing the loop, and enabling iterative refinement of a model. This [idea ➔ code ➔ test ➔ idea] cycle is reminiscent of the [hypothesis ➔ design task ➔ test ➔ hypothesis] cycle in empirical work, also known as the hypothetico-deductive method. An important practice in ML is to ensure that one iteration of that cycle is quick enough, because producing an efficient model may require many such iterations. Based on this framework, a way to view MotorNet is to improve iteration speed through this cycle. The modular architecture of MotorNet enables users to alter specific aspects of the model while keeping everything else identical. Therefore, user capacity to proceed through the “implementation” step is enhanced.</p>
</sec>
<sec id="s3b">
<label>3.2.</label><title>Advantages</title>
<sec id="s3b1">
<label>3.2.1.</label><title>Expandability</title>
<p>MotorNet naturally allows users to create and tune objects to fit individual requirements. This makes the toolbox easily expandable to add novel models that are not pre-built in the original distribution. This flexibility will likely vary depending on the goal (<xref rid="fig7" ref-type="fig">Figure 7</xref>). Some extensions only require adjusting parameter values of existing object classes, such as editing the Arm26 <italic>Skeleton</italic> class to match the arm of a non-human primate. Other extensions will require subclassing, such as creating an <italic>Effector</italic>for an eyeball, which might require special geometric properties building on the point-mass <italic>Skeleton</italic> object (<xref rid="tbl1" ref-type="table">Table 1</xref>). Conversely, effectors that stray away from typical vertebrate effectors will likely prove more challenging, such as an octopus arm, because they do not rely on bones. Importantly, while all these extensions vary in the difficulty of their implementation, each has the capacity to fit and work harmoniously within the framework of the MotorNet architecture.</p>
<fig id="fig7" position="float" orientation="portrait" fig-type="figure">
<label>Figure 7:</label>
<caption><title>MotorNet is expandable.</title>
<p>MotorNet allows for new features to be implemented through subclassing.</p></caption>
<graphic xlink:href="528969v4_fig7.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
</sec>
<sec id="s3b2">
<label>3.2.2.</label><title>Open source</title>
<p>Typically, when motor control researchers want to create canonical models, they must implement their own version of said model based on methodological descriptions of previously published scientific articles. However, because MotorNet is open source, individual contributions can easily be shared online for the benefit of others. For instance, if a researcher creates a <italic>Muscle</italic> class with a parametrizable pennation angle (<xref ref-type="bibr" rid="c35">Millard et al., 2013</xref>; <xref ref-type="bibr" rid="c55">Thelen, 2003</xref>), future researchers and team will not have to re-create their own implementation of the same object anymore. This also allows more dynamical peer-checking, avoiding dissemination of errors and improving consistency of model implementations. In other words, MotorNet will be able to benefit from community driven incremental work through open-source practices.</p>
</sec>
<sec id="s3b3">
<label>3.2.3.</label><title>Innovation scalability</title>
<p>For the past several years, ML has been standing out as one of the most dynamic research fields, achieving breakthroughs and successfully scaling innovative work toward solving everyday problems. It would be challenging for MotorNet to keep up with the pace of ML innovation to provide users with implementations of the latest architectures and algorithms. Rather, we rely on PyTorch to build policies. This ensures that any innovation in model design quickly finds its way to a viable MotorNet implementation, because PyTorch capabilities allow for fast adaptation aligned with progress in ML. Generally, MotorNet is built with the following logic in mind: anything PyTorch can build, MotorNet should be able to use as a policy.</p>
</sec>
<sec id="s3b4">
<label>3.2.4.</label><title><italic>gymnasium</italic>-compliant interfacing</title>
<p>The MotorNet <italic>Environment</italic> class is a subclass of <italic>gymnasium</italic>’s <italic>Env</italic> base class and abides by its associated API (<xref ref-type="bibr" rid="c58">Towers et al., 2023</xref>). Consequently, MotorNet environments are by design compatible with any Python toolbox that works with <italic>gymnasium</italic>, which is a standard and popular interfacing toolbox to link reinforcement learning agents with environments. It is very well-documented and widely used, which will ensure that users who wish to employ reinforcement learning to control MotorNet environments will be able to do so relatively effortlessly.</p>
</sec>
</sec>
<sec id="s3c">
<label>3.3.</label><title>Limitations</title>
<sec id="s3c1">
<label>3.3.1.</label><title>Collision physics</title>
<p>Typical biomechanical software distributions implement some form of collision physics in their physics engine (<xref ref-type="bibr" rid="c9">Delp et al., 2007</xref>; <xref ref-type="bibr" rid="c50">Seth et al., 2018</xref>; <xref ref-type="bibr" rid="c57">Todorov et al., 2012</xref>). This is not the case for MotorNet.</p>
</sec>
<sec id="s3c2">
<label>3.3.2.</label><title>Complex biomechanical features</title>
<p>Some biomechanical software distributions such as OpenSim propose a large array of joint types such as hinge joints or rotational joints, and complex muscle paths such as wrap points that trigger only when the muscle collides with them (<xref ref-type="bibr" rid="c9">Delp et al., 2007</xref>; <xref ref-type="bibr" rid="c51">Seth et al., 2010</xref>, <xref ref-type="bibr" rid="c50">2018</xref>). While these features increase the realism of a biomechanical model, MotorNet does not yet implement these types of features. In practice, this constrains what types of effectors MotorNet can realistically implement and adding some of these features is under consideration.</p>
</sec>
</sec>
<sec id="s3d">
<label>3.4.</label><title>Future considerations</title>
<p>As an open-source, freely available Python toolbox, MotorNet is subject to change over time. Some of the limitations outlined above are considered as future routes for improvement. Additionally, we hope that individual contributions will help refine and extend the capabilities of the toolbox as well. In this section we outline prospective improvements for implementation and release in the main distribution.</p>
<sec id="s3d1">
<label>3.4.1.</label><title>Spinal Compartment</title>
<p>It is becoming increasingly evident that spinal contribution plays a prominent role in motor control beyond the typically considered spinal reflex (<xref ref-type="bibr" rid="c42">Reschechtko &amp; Pruszynski, 2020</xref>; <xref ref-type="bibr" rid="c59">Weiler et al., 2019</xref>). To an extent, one may consider that supraspinal control integrates the spinal contribution to define a motor control policy (<xref ref-type="bibr" rid="c32">Loeb, 2021</xref>). Within MotorNet, this suggests that a policy’s latent dynamics will be significantly impacted by the presence of a spinal compartment acting as an interface with the <italic>Effector</italic>. Consequently, it may be worthwhile to implement one such spinal compartment to explore the consequences of such biological design (<xref ref-type="bibr" rid="c7">Cisek, 2019</xref>).</p>
</sec>
<sec id="s3d2">
<label>3.4.2.</label><title>Modular policies</title>
<p>A deeply established idea in neuroscience is that distinct regions will perform different computations, and thus that a complex system may not be considered as a uniform, fully connected network (<xref ref-type="bibr" rid="c1">Abbott &amp; Svoboda, 2020</xref>; <xref ref-type="bibr" rid="c24">Keeley et al., 2020</xref>; <xref ref-type="bibr" rid="c39">Pesaran et al., 2021</xref>; <xref ref-type="bibr" rid="c49">Semedo et al., 2020</xref>). This is also true for the motor control system, where using a modular network architecture with controlled communication between each module has been shown to have more explanatory power than a non-modular system (<xref ref-type="bibr" rid="c34">Michaels et al., 2020</xref>). Therefore, a potential development for MotorNet is to include a model class with a modular architecture to study how cross-regions networks work to enable neural control of the body.</p>
</sec>
<sec id="s3d3">
<label>3.4.3.</label><title>Muscle models</title>
<p>Most published work in motor control relies either on Hill-type muscle models (<xref ref-type="bibr" rid="c2">Bhushan &amp; Shadmehr, 1999</xref>; <xref ref-type="bibr" rid="c25">Kistemaker et al., 2006</xref>, <xref ref-type="bibr" rid="c26">2010</xref>; <xref ref-type="bibr" rid="c38">Nijhof &amp; Kouwenhoven, 2000</xref>) or direct torque actuators (<xref ref-type="bibr" rid="c30">Lillicrap &amp; Scott, 2013</xref>) similar to the ReLu muscle that MotorNet provides. However, despite its popularity, even the more-detailed Hill-type muscle remains a phenomenological model of real muscle behaviour, which can easily show its limits when trying to understand how the brain controls movement (<xref ref-type="bibr" rid="c3">Blum et al., 2020</xref>). Alternative muscle model formalizations exist, such as the Distribution-Moment muscle model (<xref ref-type="bibr" rid="c64">Zahalak, 1981</xref>), which may be worth implementing within MotorNet as well.</p>
</sec>
</sec>
</sec>
<sec id="s4">
<label>4.</label><title>Methods</title>
<sec id="s4a">
<label>4.1.</label><title>General modelling design</title>
<p>This section describes modelling elements that were used for several models in this study. For all models, the timestep size was 0.01 sec, and a proprioceptive delay of <italic>Δ<sub>p</sub></italic> = 20 ms and visual delay of <italic>Δ<sub>v</sub></italic> = 50 ms were used (<xref rid="fig2" ref-type="fig">Figure 2</xref>). Effectors were actuated using numerical integration with the Euler method.</p>
<sec id="s4a1">
<label>4.1.1.</label><title>Arm26 model</title>
<p>The arm26 model used in this study is available online on the open-source toolbox code under the <italic>RigidTendonArm26 Effector</italic> class. It is briefly described below for convenience.</p>
<p>The skeleton of the arm26 models are according to the formalization proposed in <xref ref-type="bibr" rid="c20">Gomi &amp; Kawato (1997)</xref>, equations 1, 3, 5-7. Parameter values are as in <xref rid="tbl2" ref-type="table">table 2</xref>.</p>
<table-wrap id="tbl2" orientation="portrait" position="float">
<label>Table 2:</label>
<caption><title>skeleton parameters for the arm26 model, taken from <xref ref-type="bibr" rid="c38">Nijhof &amp; Kouwenhoven (2000)</xref>.</title></caption>
<graphic xlink:href="528969v4_tbl2.tif" mimetype="image" mime-subtype="tiff"/>
</table-wrap>
<p>The skeleton was actuated by six rigid-tendon versions of Hill-type muscle actuators: a shoulder flexor, a shoulder extensor, an elbow flexor, an elbow extensor, a bi-articular flexor, and a bi-articular extensor. Their parameter values are defined in <xref rid="tbl3" ref-type="table">table 3</xref>.</p>
<table-wrap id="tbl3" orientation="portrait" position="float">
<label>Table 3:</label>
<caption><title>parameters for the Hill-type muscle actuators used in the arm26, taken from <xref ref-type="bibr" rid="c26">Kistemaker et al. (2010)</xref>.</title></caption>
<graphic xlink:href="528969v4_tbl3.tif" mimetype="image" mime-subtype="tiff"/>
</table-wrap>
<p>The full formalization of the Hill-type muscles can be found in <xref ref-type="bibr" rid="c55">Thelen (2003)</xref> <xref rid="eqn1" ref-type="disp-formula">equations 1-7</xref>, and with the parameter values used in that study. When different parameters were provided for young and old subjects, the values for young subjects were used (<xref ref-type="bibr" rid="c55">Thelen, 2003</xref>, <xref rid="tbl1" ref-type="table">table 1</xref>)</p>
<p>While in custom-made <italic>Effector</italic> objects the moment arms of each muscle are computed based on geometric first principles (<xref rid="fig4" ref-type="fig">Figure 4d-f</xref>; <xref ref-type="bibr" rid="c54">Sherman et al., 2013</xref>), in the <italic>RigidTendonArm26</italic> class the moment arms are approximated as described in <xref ref-type="bibr" rid="c26">Kistemaker et al. (2010)</xref>, equations A10-A12, with parameters for this study defined in <xref rid="tbl4" ref-type="table">table 4</xref>.</p>
<table-wrap id="tbl4" orientation="portrait" position="float">
<label>Table 4:</label>
<caption><title>parameters used to compute moment arms in the arm26 models with moment arm approximation, taken from <xref ref-type="bibr" rid="c26">Kistemaker et al. (2010)</xref>.</title></caption>
<graphic xlink:href="528969v4_tbl4.tif" mimetype="image" mime-subtype="tiff"/>
</table-wrap>
</sec>
<sec id="s4a2">
<label>4.1.2.</label><title>Point-mass model</title>
<p>The point-mass model used in this study is available online on the open-source toolbox code under the <italic>ReluPointMass24 Effector</italic> class. It is briefly described below for convenience.</p>
<p>The point-mass had a mass of <italic>m</italic> = 1 kg. Its actuation followed an ordinary differential equation such that <inline-formula><inline-graphic xlink:href="528969v4_inline6.gif" mimetype="image" mime-subtype="gif"/></inline-formula> = <bold><italic>f</italic></bold>⁄<italic>m</italic> with <inline-formula><inline-graphic xlink:href="528969v4_inline7.gif" mimetype="image" mime-subtype="gif"/></inline-formula>, <bold><italic>f</italic></bold> the 2-elements cartesian acceleration vector at time <italic>t</italic> and the 2-elements force vector applied at time <italic>t</italic>, respectively.</p>
<p>The forces were produced by four linear muscle actuators, whose formalization is available online on the open-source toolbox code under the <italic>ReluMuscle</italic> muscle class. Each muscle’s force production <italic>f</italic> is a linear piecewise function of its activation <italic>a</italic>, scaled by its maximum isometric force <italic>f<sub>max</sub></italic> = 500 N:
<disp-formula>
<graphic xlink:href="528969v4_ueqn1.gif" mimetype="image" mime-subtype="gif"/>
</disp-formula>
The activation function was the same as for the Hill-type muscles used in the arm26 model, and can be found in <xref ref-type="bibr" rid="c55">Thelen (2003)</xref>, <xref rid="eqn1" ref-type="disp-formula">equations 1</xref>-<xref rid="eqn2" ref-type="disp-formula">2</xref>.</p>
<p>The four muscles were fixed to the point-mass in a “X” configuration (<xref rid="fig4" ref-type="fig">Figures 4a</xref>, <xref ref-type="fig" rid="fig6">6a</xref>) with the first fixation point for the upper right, lower right, lower left, and upper left muscle being respectively (<italic>x</italic> = 2, <italic>y</italic> = 2), (2, −2), (−2, −2), (−2, 2). The second fixation point of each muscle was on the point-mass, therefore moving in general coordinates alongside the point-mass (<xref rid="fig4" ref-type="fig">Figure 4a</xref>).</p>
</sec>
<sec id="s4a3">
<label>4.1.3.</label><title>Policy network architecture</title>
<p>All policy networks used in this study consisted of one layer of GRUs with a sigmoid recurrent activation function and a <italic>tan</italic>ℎ activation function. Kernel and recurrent weights were initialized using Glorot initialization (<xref ref-type="bibr" rid="c18">Glorot &amp; Bengio, 2010</xref>) and orthogonal initialization (<xref ref-type="bibr" rid="c22">Hu et al., 2020</xref>), respectively. Biases were initialized at 0.</p>
<p>The GRU layer was fully connected to an output layer of perceptron nodes with a sigmoid activation function. The output layer contains one node per descending action signal, or equivalently one node per muscle. The output layer’s kernel weights were initialized using a random normal distribution with a standard deviation of 0.003, and its bias was initialized at a constant value of -5. Because the output activation function is a sigmoid, this initial bias forces the output of the policy to be close to 0 at the start of initialization, ensuring a stable initialization state.</p>
<p>For all networks used in this study, a 2-elements vector of (<italic>x</italic>, <italic>y</italic>) cartesian coordinates for the start position and target position were provided as input, alongside a go-cue, resulting in a 5-element input vector. The go-cue was a “step” signal whose value changed from 1 to 0 when the movement should be initiated.</p>
</sec>
<sec id="s4a4">
<label>4.1.4.</label><title>General training design</title>
<p>During training, the models reached from a starting position drawn from a random uniform distribution across the full joint space to a target position drawn from a random uniform distribution as well. The occurrence time of the go-cue was drawn from a random uniform distribution across the full simulation duration. In 50% of simulations, no go-cue was provided (i.e., a catch trial) to ensure the network learnt to wait for the go-cue and avoided any anticipatory activity. The desired position <bold><italic>x</italic></bold><sup>∗</sup> was set to be the start position until the go cue was provided, at which point <bold><italic>x</italic></bold><sup>∗</sup> was defined as the target position. Note that the go-cue was treated as a visual signal. Therefore, while the desired position <bold><italic>x</italic></bold><sup>∗</sup> was updated immediately as the go-cue was provided (with no time delay), the network was informed of the go-cue occurrence via a change in the target position input and go-cue input only following the visual feedback delay <italic>Δ<sub>v</sub></italic>. Depending on the models, additional training manipulations were also applied, as described in the sections below.</p>
</sec>
</sec>
<sec id="s4b">
<label>4.2.</label><title>Centre-out reaches task against a curl field</title>
<sec id="s4b1">
<label>4.2.1.</label><title>Model</title>
<p>The effector type used to learn to reach against a curl field was an arm26 model as described in <xref rid="s4a1" ref-type="sec">section 4.1.1</xref>. The policy was as described in <xref rid="s4a3" ref-type="sec">section 4.1.3</xref>., with the GRU layer containing <italic>n</italic> = 50 units.</p>
</sec>
<sec id="s4b2">
<label>4.2.2.</label><title>Training</title>
<p>The model was trained according to the procedure in <xref rid="s4a4" ref-type="sec">section 4.1.4</xref>. with the loss described in <xref rid="eqn1" ref-type="disp-formula">eq. 1</xref>, using a kernel regularization <italic>λ</italic> = 10<italic>e</italic><sup>-6</sup>, coefficients <italic>α</italic> = 2, <italic>β</italic> = 5, <italic>γ</italic> = 0.1, κ = 0.05, and target radius <italic>r</italic> = 0.01 m. The model was trained on 7680 batches with a batch size of 64, on simulations of 1 sec.</p>
<p>The model was trained according to <xref rid="s4a4" ref-type="sec">section 4.1.4</xref>., except that the go-cue time was fixed at 100 ms from the start of the simulation. Following initial training, the model was then tested as described in the next section to produce the “naïve” behaviour shown in <xref rid="fig1" ref-type="fig">Figure 1b-c</xref>. Following testing, training was then resumed, but employing the curl-field, fixed starting position, and set of 8 targets used in testing. 50% simulations were still catch trials, as in the initial training session. This second training session lasted 768 batches with a batch size of 64. Finally, following this second training session, the model was tested again, to produce the “adapted” behaviour of <xref rid="fig1" ref-type="fig">Figure 1b</xref>.</p>
</sec>
<sec id="s4b3">
<label>4.2.3.</label><title>Testing</title>
<p>The model was tested in 1 sec simulations against a null field, and against external forces applied at the arm’s endpoint that produced a counter-clockwise curl field:
<disp-formula id="eqn2">
<graphic xlink:href="528969v4_eqn2.gif" mimetype="image" mime-subtype="gif"/>
</disp-formula>
With <inline-formula><inline-graphic xlink:href="528969v4_inline8.gif" mimetype="image" mime-subtype="gif"/></inline-formula> the 2-elements cartesian velocity vector at time <italic>t</italic>, and <italic>b</italic> = 8 a scalar defining the strength of the curl field. In the null field, we have <italic>b</italic> = 0.</p>
<p>The testing procedure consisted of 8 centre-out reaches from a fixed starting position at a shoulder and elbow angle of 45° and 90°, respectively, to 8 target positions 10 cm away and distributed in increments of 45° around the starting position (<xref rid="fig1" ref-type="fig">Figure 1b</xref>). This set of simulations were repeated against a null field and against the curl field in <xref rid="eqn2" ref-type="disp-formula">eq. 2</xref>, resulting in a total of 16 reaches. For all testing simulations, the go-cue time was fixed at 100 ms from the start of the simulation and no catch trials were employed.</p>
</sec>
</sec>
<sec id="s4c">
<label>4.3.</label><title>Biomechanical properties of the effector</title>
<p>The point-mass model used was as described in <xref rid="s4a2" ref-type="sec">section 4.1.2</xref>. The arm26 model used was as described in <xref rid="s4a1" ref-type="sec">section 4.1.1</xref>., except that the moment arms were not approximated based on the parameters of <xref rid="tbl4" ref-type="table">table 4</xref>, but computed based on the geometry of the muscle paths (<xref ref-type="bibr" rid="c38">Nijhof &amp; Kouwenhoven, 2000</xref>; <xref ref-type="bibr" rid="c51">Seth et al., 2010</xref>; <xref ref-type="bibr" rid="c54">Sherman et al., 2013</xref>). Accordingly, the muscle paths were manually declared by defining how many fixation points each muscle has, and on which bone and where on each bone each point fixes.</p>
<p>MotorNet handles declaration of these paths using a relative reference frame for each fixation point (<xref ref-type="bibr" rid="c51">Seth et al., 2010</xref>). Specifically, a fixation point on a bone will have two coordinates. The first coordinate defines how far along the bone the point is, from the bone’s origin, e.g., the shoulder for the upper arm (<xref rid="fig8" ref-type="fig">Figure 8</xref>). The second coordinate defines how far the point deviates from the bone orthogonally. If the fixation point is an anchor point, that is, it is not fixed on a bone but on the world space, then general coordinates (<italic>x</italic>, <italic>y</italic>) are used (color-coded in green in <xref rid="fig8" ref-type="fig">Figure 8</xref>). These anchor points are important to ensure that the effector can be actuated with respect to the environment. The full set of coordinates defining the model’s muscle paths are indicated in <xref rid="tbl5" ref-type="table">table 5</xref> and are derived from <xref ref-type="bibr" rid="c38">Nijhof &amp; Kouwenhoven (2000)</xref>.</p>
<fig id="fig8" position="float" orientation="portrait" fig-type="figure">
<label>Figure 8:</label>
<caption><title>Coordinate frames for declaring muscle paths in MotorNet.</title>
<p><bold>(a)</bold> MotorNet handle muscle paths using coordinate frames relative to the bone on which a fixation point is. The world space is indexed as the fixation body “0” and its coordinate frame is the general coordinate system. <bold>(b)</bold> Schematic illustration of the muscle paths used for the arm26 arm26 model with no moment arm approximation described in <xref rid="s4c" ref-type="sec">section 4.3</xref> and <xref rid="tbl5" ref-type="table">table 5</xref>, for a shoulder and elbow angle of 45° and 90°, respectively.</p></caption>
<graphic xlink:href="528969v4_fig8.tif" mimetype="image" mime-subtype="tiff"/>
</fig>
<table-wrap id="tbl5" orientation="portrait" position="float">
<label>Table 5:</label>
<caption><title>Muscle paths for the arm26 model with no moment arm approximation.</title></caption>
<graphic xlink:href="528969v4_tbl5.tif" mimetype="image" mime-subtype="tiff"/>
</table-wrap>
</sec>
<sec id="s4d">
<label>4.4.</label><title>Training ANNs to produce naturalistic behaviour</title>
<sec id="s4d1">
<label>4.4.1.</label><title>Model</title>
<p>The two models used to produce <xref rid="fig5" ref-type="fig">Figure 5</xref> were arm26 models as described in <xref rid="s4a1" ref-type="sec">section 4.1.1</xref>. For both models, the policy was as described in <xref rid="s4a3" ref-type="sec">section 4.1.3</xref>., with the GRU layer containing <italic>n</italic> = 110 units. In addition, excitation and GRU hidden activity noise were added, with values <italic>σ</italic><sub><italic>u</italic></sub> = 10<italic>e</italic><sup>-3</sup>, <italic>σ<sub>h</sub></italic> = 10<italic>e</italic><sup>-4</sup>, respectively.</p>
</sec>
<sec id="s4d2">
<label>4.4.2.</label><title>Training</title>
<p>The models were trained with the loss described in <xref rid="eqn1" ref-type="disp-formula">eq. 1</xref>, using a kernel regularization <italic>λ</italic> = 10<italic>e</italic><sup>-6</sup>, coefficients <italic>α</italic> = 2, <italic>β</italic> = 5, <italic>γ</italic> = 0.1, κ = 0.05, and target radius <italic>r</italic> = 0.01 cm. The model was trained on 27,000 batches of size 1024, on simulations of 800 ms.</p>
<p>In one of the two models, which we refer to as the “perturbation-free” model, the training procedure was as described in <xref rid="s4a4" ref-type="sec">section 4.1.4</xref>. In the second model, which we refer to as the “perturbation-trained” model, a 100 ms endpoint mechanical perturbation was added to the training procedure. The perturbation occurred in 50% of trials, independently of whether the trial was a catch trial or not, and its orientation and time were randomly drawn as well. The magnitude of the perturbation was drawn from a uniform distribution ranging between 0 and 4 N. If the perturbation occurred during a catch trial, the distribution ranged between 0 and 8 N.</p>
</sec>
<sec id="s4d3">
<label>4.4.3.</label><title>Testing</title>
<p>Both the perturbation-trained and perturbation-free models were tested in 800 ms simulations in two distinct tasks, a centre-out reaching task and a postural task.</p>
<p>In the centre-out reaching task, 8 targets were positioned in 45 degrees increments and 10 cm away from a starting position corresponding to a shoulder and elbow angle of 45° and 90°, respectively (<xref rid="fig5" ref-type="fig">Figure 5c, g</xref>). The visual go cue was provided at 100 ms following the simulation start. 70 ms after the go-cue was “perceived” (i.e., 70 ms plus the visual feedback delay <italic>Δ<sub>v</sub></italic>), a mechanical perturbation was applied at the arm’s endpoint and orthogonally to the reaching direction. This perturbation could be either within-distribution (±3 N) or out-of-distribution (±6 N) or null (no perturbation).</p>
<p>In the postural control task, no go cue was provided, and the arm’s endpoint was pushed away from the start position by the mechanical perturbation at 170 ms plus visual delay <italic>Δ<sub>v</sub></italic> after the simulation started. We applied perturbations in either of the four cardinal directions (0°, 90°, 180°, 270°). Again, the set of perturbations for testing outputs included within-distribution magnitudes (±6 N) and out-of-distribution magnitudes (±12 N).</p>
</sec>
</sec>
<sec id="s4e">
<label>4.5.</label><title>Effector Geometry Defines Preference Distribution of Firing Rates: A Replication Study</title>
<sec id="s4e1">
<label>4.5.1.</label><title>Models</title>
<p>All arm26 and point-mass effectors used to produce <xref rid="fig5" ref-type="fig">Figure 5</xref> were as described in <xref rid="s4a1" ref-type="sec">section 4.1.1</xref>. and 4.1.2., respectively. For all models, the policy was as described in <xref rid="s4a3" ref-type="sec">section 4.1.3</xref>., with the GRU layer containing <italic>n</italic> = 90 units.</p>
</sec>
<sec id="s4e2">
<label>4.5.2.</label><title>Training</title>
<p>All models were trained with the loss described in <xref rid="eqn1" ref-type="disp-formula">eq. 1</xref>, using a kernel regularization <italic>λ</italic> = 10<italic>e</italic><sup>-6</sup>, coefficients <italic>α</italic> = 2, <italic>β</italic> = 5, <italic>γ</italic> = 0.1, κ = 0.05, and target radius <italic>r</italic> = 0. The models were trained on 38,400 batches of size 64, on simulations of 800 ms. The training procedure was as described in <xref rid="s4a4" ref-type="sec">section 4.1.4</xref>.</p>
</sec>
<sec id="s4e3">
<label>4.5.3.</label><title>Testing</title>
<p>The testing procedure consisted of 8 centre-out reaches in 800 ms simulations. Simulations started from a fixed position at a shoulder and elbow angle of 45° and 90° for the arm26 models, and at an (<italic>x</italic> = 0, <italic>y</italic> = 0) cartesian position for the point-mass models. Reaches were to 24 target positions 10 cm away and distributed in increments of 15° around the starting position (<xref rid="fig6" ref-type="fig">Figure 6b</xref>). For all testing simulations, the go-cue time was fixed at 100 ms into the simulation and no catch trials were employed.</p>
</sec>
<sec id="s4e4">
<label>4.5.4.</label><title>Analysis</title>
<p>To obtain the preferential movement direction of each GRU, we averaged each unit’s hidden activity in a 150 ms time window starting when the go cue was input to the network (i.e., following visual feedback delay <italic>Δ<sub>v</sub></italic>) for each reaching direction independently, and regressed that average to a diagonal design matrix encoding the reach direction. The absolute value of the resulting regression coefficients was then normalized between 0 and 1, and neurons were sorted according to these normalized coefficients to produce <xref rid="fig6" ref-type="fig">Figure 6e</xref>.</p>
<p>As mentioned in the results section, we trained 8 networks to control an arm26 and 8 networks to control a point-mass. For each network, we took the count of GRUs whose normalized regression coefficient is maximal for each target considered and averaged that count across all 8 networks to produce <xref rid="fig6" ref-type="fig">Figure 6c</xref>.</p>
</sec>
</sec>
</sec>
</body>
<back>
<sec id="s5">
<label>5.</label><title>Contributions</title>
<p>OC, JAM, and PLG conceptualized the toolbox; OC implemented the toolbox; OC, JAM, MK, JAP, and PLG tested the toolbox and designed the simulation paradigms; OC and PLG performed the simulations; OC, JAM, MK, JAP, and PLG interpreted the results; OC made the figures, wrote the first draft, and wrote the online documentation; OC, JAM, MK, JAP, and PLG edited and approved the final version of the manuscript.</p>
</sec>
<ack>
<label>6.</label>
<title>Acknowledgements</title>
<p>This work was supported by the Natural Science and Engineering Council of Canada (RGPIN-2018-05458 to PLG and RGPIN-2022-04421 to JAP) and the Canadian Institutes of Health Research (PJT-156241 to PLG, PJT-175010 to JAP). JAM was supported by a Banting Postdoctoral Fellowship, a BrainsCAN Postdoctoral Fellowship, and a Vector Institute Postgraduate Affiliate Program Stipend.</p>
</ack>
<sec id="s6">
<label>7.</label><title>Competing interests</title>
<p>The authors declare no competing financial or non-financial interests.</p>
</sec>
<ref-list>
<label>8.</label>
<title>References</title>
<ref id="c1"><mixed-citation publication-type="journal"><string-name><surname>Abbott</surname>, <given-names>L.</given-names></string-name>, &amp; <string-name><surname>Svoboda</surname>, <given-names>K</given-names></string-name>. (<year>2020</year>). <article-title>Brain-wide interactions between neural circuits</article-title>. <source>Current Opinion in Neurobiology</source>, <volume>65</volume>, <fpage>iii</fpage>–<lpage>v</lpage>. <pub-id pub-id-type="doi">10.1016/j.conb.2020.12.012</pub-id></mixed-citation></ref>
<ref id="c2"><mixed-citation publication-type="journal"><string-name><surname>Bhushan</surname>, <given-names>N.</given-names></string-name>, &amp; <string-name><surname>Shadmehr</surname>, <given-names>R</given-names></string-name>. (<year>1999</year>). <article-title>Computational nature of human adaptive control during learning of reaching movements in force fields</article-title>. <source>Biological Cybernetics</source>, <volume>81</volume>(<issue>1</issue>), <fpage>39</fpage>–<lpage>60</lpage>. <pub-id pub-id-type="doi">10.1007/s004220050543</pub-id></mixed-citation></ref>
<ref id="c3"><mixed-citation publication-type="journal"><string-name><surname>Blum</surname>, <given-names>K. P.</given-names></string-name>, <string-name><surname>Campbell</surname>, <given-names>K. S.</given-names></string-name>, <string-name><surname>Horslen</surname>, <given-names>B. C.</given-names></string-name>, <string-name><surname>Nardelli</surname>, <given-names>P.</given-names></string-name>, <string-name><surname>Housley</surname>, <given-names>S. N.</given-names></string-name>, <string-name><surname>Cope</surname>, <given-names>T. C.</given-names></string-name>, &amp; <string-name><surname>Ting</surname>, <given-names>L. H</given-names></string-name>. (<year>2020</year>). <article-title>Diverse and complex muscle spindle afferent firing properties emerge from multiscale muscle mechanics</article-title>. <source>eLife</source>, <volume>9</volume>, <fpage>e55177</fpage>. <pub-id pub-id-type="doi">10.7554/eLife.55177</pub-id></mixed-citation></ref>
<ref id="c4"><mixed-citation publication-type="journal"><string-name><surname>Cheng</surname>, <given-names>E. J.</given-names></string-name>, &amp; <string-name><surname>Scott</surname>, <given-names>S. H</given-names></string-name>. (<year>2000</year>). <article-title>Morphometry of Macaca mulatta forelimb</article-title>. <source>I. Shoulder and elbow muscles and segment inertial parameters. Journal of Morphology</source>, <volume>245</volume>(<issue>3</issue>), <fpage>206</fpage>–<lpage>224</lpage>. <pub-id pub-id-type="doi">10.1002/1097-4687(200009)245:3&lt;206::AID-JMOR3&gt;3.0.CO;2-U</pub-id></mixed-citation></ref>
<ref id="c5"><mixed-citation publication-type="web"><string-name><surname>Cho</surname>, <given-names>K.</given-names></string-name>, <string-name><surname>van Merrienboer</surname>, <given-names>B.</given-names></string-name>, <string-name><surname>Gulcehre</surname>, <given-names>C.</given-names></string-name>, <string-name><surname>Bahdanau</surname>, <given-names>D.</given-names></string-name>, <string-name><surname>Bougares</surname>, <given-names>F.</given-names></string-name>, <string-name><surname>Schwenk</surname>, <given-names>H.</given-names></string-name>, &amp; <string-name><surname>Bengio</surname>, <given-names>Y.</given-names></string-name> (<year>2014</year>). <source>Learning Phrase Representations using RNN Encoder-Decoder for Statistical Machine Translation</source> (arXiv:<pub-id pub-id-type="arxiv">1406.1078</pub-id>). arXiv. <ext-link ext-link-type="uri" xlink:href="http://arxiv.org/abs/1406.1078">http://arxiv.org/abs/1406.1078</ext-link></mixed-citation></ref>
<ref id="c6"><mixed-citation publication-type="journal"><string-name><surname>Churchland</surname>, <given-names>M. M.</given-names></string-name>, &amp; <string-name><surname>Shenoy</surname>, <given-names>K. V</given-names></string-name>. (<year>2007</year>). <article-title>Temporal Complexity and Heterogeneity of Single-Neuron Activity in Premotor and Motor Cortex</article-title>. <source>Journal of Neurophysiology</source>, <volume>97</volume>(<issue>6</issue>), <fpage>4235</fpage>– <lpage>4257</lpage>. <pub-id pub-id-type="doi">10.1152/jn.00095.2007</pub-id></mixed-citation></ref>
<ref id="c7"><mixed-citation publication-type="journal"><string-name><surname>Cisek</surname>, <given-names>P</given-names></string-name>. (<year>2019</year>). <article-title>Resynthesizing behavior through phylogenetic refinement. <italic>Attention, Perception</italic></article-title>, <source>&amp; Psychophysics</source>, <volume>81</volume>(<issue>7</issue>), <fpage>2265</fpage>–<lpage>2287</lpage>. <pub-id pub-id-type="doi">10.3758/s13414-019-01760-1</pub-id></mixed-citation></ref>
<ref id="c8"><mixed-citation publication-type="journal"><string-name><surname>Conditt</surname>, <given-names>M. A.</given-names></string-name>, <string-name><surname>Gandolfo</surname>, <given-names>F.</given-names></string-name>, &amp; <string-name><surname>Mussa-Ivaldi</surname>, <given-names>F. A</given-names></string-name>. (<year>1997</year>). <article-title>The motor system does not learn the dynamics of the arm by rote memorization of past experience</article-title>. <source>Journal of Neurophysiology</source>, <volume>78</volume>(<issue>1</issue>), <fpage>554</fpage>–<lpage>560</lpage>. <pub-id pub-id-type="doi">10.1152/jn.1997.78.1.554</pub-id></mixed-citation></ref>
<ref id="c9"><mixed-citation publication-type="journal"><string-name><surname>Delp</surname>, <given-names>S. L.</given-names></string-name>, <string-name><surname>Anderson</surname>, <given-names>F. C.</given-names></string-name>, <string-name><surname>Arnold</surname>, <given-names>A. S.</given-names></string-name>, <string-name><surname>Loan</surname>, <given-names>P.</given-names></string-name>, <string-name><surname>Habib</surname>, <given-names>A.</given-names></string-name>, <string-name><surname>John</surname>, <given-names>C. T.</given-names></string-name>, <string-name><surname>Guendelman</surname>, <given-names>E.</given-names></string-name>, &amp; <string-name><surname>Thelen</surname>, <given-names>D. G</given-names></string-name>. (<year>2007</year>). <article-title>OpenSim: Open-Source Software to Create and Analyze Dynamic Simulations of Movement</article-title>. <source>IEEE Transactions on Biomedical Engineering</source>, <volume>54</volume>(<issue>11</issue>), <fpage>1940</fpage>–<lpage>1950</lpage>. <pub-id pub-id-type="doi">10.1109/TBME.2007.901024</pub-id></mixed-citation></ref>
<ref id="c10"><mixed-citation publication-type="journal"><string-name><surname>Dimitriou</surname>, <given-names>M.</given-names></string-name>, <string-name><surname>Wolpert</surname>, <given-names>D. M.</given-names></string-name>, &amp; <string-name><surname>Franklin</surname>, <given-names>D. W</given-names></string-name>. (<year>2013</year>). <article-title>The Temporal Evolution of Feedback Gains Rapidly Update to Task Demands</article-title>. <source>Journal of Neuroscience</source>, <volume>33</volume>(<issue>26</issue>), <fpage>10898</fpage>–<lpage>10909</lpage>. <pub-id pub-id-type="doi">10.1523/JNEUROSCI.5669-12.2013</pub-id></mixed-citation></ref>
<ref id="c11"><mixed-citation publication-type="journal"><string-name><surname>Driscoll</surname>, <given-names>L.</given-names></string-name>, <string-name><surname>Shenoy</surname>, <given-names>K.</given-names></string-name>, &amp; <string-name><surname>Sussillo</surname>, <given-names>D</given-names></string-name>. (<year>2022</year>). <article-title><italic>Flexible multitask computation in recurrent networks utilizes shared dynamical motifs</italic> [Preprint]</article-title>. <source>Neuroscience</source>. <pub-id pub-id-type="doi">10.1101/2022.08.15.503870</pub-id></mixed-citation></ref>
<ref id="c12"><mixed-citation publication-type="journal"><string-name><surname>Feldman</surname>, <given-names>A. G.</given-names></string-name>, &amp; <string-name><surname>Levin</surname>, <given-names>M. F</given-names></string-name>. (<year>1995</year>). <article-title>The origin and use of positional frames of reference in motor control</article-title>. <source>Behavioral and Brain Sciences</source>, <volume>18</volume>(<issue>4</issue>), <fpage>723</fpage>–<lpage>744</lpage>. <pub-id pub-id-type="doi">10.1017/S0140525X0004070X</pub-id></mixed-citation></ref>
<ref id="c13"><mixed-citation publication-type="book"><string-name><surname>Fetz</surname>, <given-names>E. E</given-names></string-name>. (<year>1993</year>). <chapter-title>Dynamic recurrent neural network models of sensorimotor behavior</chapter-title>. In <source>The neurobiology of Neural Networks (Cambridge MA, pp. 165–190)</source>. <publisher-name>MIT Press</publisher-name>.</mixed-citation></ref>
<ref id="c14"><mixed-citation publication-type="journal"><string-name><surname>Flanagan</surname>, <given-names>J. R.</given-names></string-name>, <string-name><surname>Ostry</surname>, <given-names>D. J.</given-names></string-name>, &amp; <string-name><surname>Feldman</surname>, <given-names>A. G</given-names></string-name>. (<year>1993</year>). <article-title>Control of Trajectory Modifications in Target-Directed Reaching</article-title>. <source>Journal of Motor Behavior</source>, <volume>25</volume>(<issue>3</issue>), <fpage>140</fpage>–<lpage>152</lpage>. <pub-id pub-id-type="doi">10.1080/00222895.1993.9942045</pub-id></mixed-citation></ref>
<ref id="c15"><mixed-citation publication-type="journal"><string-name><surname>Fortunato</surname>, <given-names>C.</given-names></string-name>, <string-name><surname>Bennasar-Vázquez</surname>, <given-names>J.</given-names></string-name>, <string-name><surname>Park</surname>, <given-names>J.</given-names></string-name>, <string-name><surname>Chang</surname>, <given-names>J. C.</given-names></string-name>, <string-name><surname>Miller</surname>, <given-names>L. E.</given-names></string-name>, <string-name><surname>Dudman</surname>, <given-names>J. T.</given-names></string-name>, <string-name><surname>Perich</surname>, <given-names>M. G.</given-names></string-name>, &amp; <string-name><surname>Gallego</surname>, <given-names>J. A</given-names></string-name>. (<year>2023</year>). <source>Nonlinear manifolds underlie neural population activity during behaviour</source> (p. <volume>2023</volume>.<fpage>07</fpage>.<lpage>18</lpage>.549575). bioRxiv. <pub-id pub-id-type="doi">10.1101/2023.07.18.549575</pub-id></mixed-citation></ref>
<ref id="c16"><mixed-citation publication-type="journal"><string-name><surname>Fujimoto</surname>, <given-names>S.</given-names></string-name>, <string-name><surname>Hoof</surname>, <given-names>H.</given-names></string-name>, &amp; <string-name><surname>Meger</surname>, <given-names>D.</given-names></string-name> (<year>2018</year>). <article-title>Addressing Function Approximation Error in Actor-Critic Methods</article-title>. <source>Proceedings of the 35th International Conference on Machine Learning</source>, <fpage>1587</fpage>–<lpage>1596</lpage>. <ext-link ext-link-type="uri" xlink:href="https://proceedings.mlr.press/v80/fujimoto18a.html">https://proceedings.mlr.press/v80/fujimoto18a.html</ext-link></mixed-citation></ref>
<ref id="c17"><mixed-citation publication-type="journal"><string-name><surname>Gershman</surname>, <given-names>S. J.</given-names></string-name>, &amp; <string-name><surname>Ölveczky</surname>, <given-names>B. P</given-names></string-name>. (<year>2020</year>). <article-title>The neurobiology of deep reinforcement learning</article-title>. <source>Current Biology</source>, <volume>30</volume>(<issue>11</issue>), <fpage>R629</fpage>–<lpage>R632</lpage>. <pub-id pub-id-type="doi">10.1016/j.cub.2020.04.021</pub-id></mixed-citation></ref>
<ref id="c18"><mixed-citation publication-type="journal"><string-name><surname>Glorot</surname>, <given-names>X.</given-names></string-name>, &amp; <string-name><surname>Bengio</surname>, <given-names>Y.</given-names></string-name> (<year>2010</year>). <article-title>Understanding the difficulty of training deep feedforward neural networks</article-title>. <source>Proceedings of the Thirteenth International Conference on Artificial Intelligence and Statistics</source>, <fpage>249</fpage>–<lpage>256</lpage>. <ext-link ext-link-type="uri" xlink:href="https://proceedings.mlr.press/v9/glorot10a.html">https://proceedings.mlr.press/v9/glorot10a.html</ext-link></mixed-citation></ref>
<ref id="c19"><mixed-citation publication-type="journal"><string-name><surname>Gomi</surname>, <given-names>H.</given-names></string-name>, &amp; <string-name><surname>Kawato</surname>, <given-names>M</given-names></string-name>. (<year>1993</year>). <article-title>Neural network control for a closed-loop System using Feedback-error-learning</article-title>. <source>Neural Networks</source>, <volume>6</volume>(<issue>7</issue>), <fpage>933</fpage>–<lpage>946</lpage>. <pub-id pub-id-type="doi">10.1016/S0893-6080(09)80004-X</pub-id></mixed-citation></ref>
<ref id="c20"><mixed-citation publication-type="journal"><string-name><surname>Gomi</surname>, <given-names>H.</given-names></string-name>, &amp; <string-name><surname>Kawato</surname>, <given-names>M</given-names></string-name>. (<year>1997</year>). <article-title>Human arm stiffness and equilibrium-point trajectory during multi-joint movement</article-title>. <source>Biological Cybernetics</source>, <volume>76</volume>(<issue>3</issue>), <fpage>163</fpage>–<lpage>171</lpage>. <pub-id pub-id-type="doi">10.1007/s004220050329</pub-id></mixed-citation></ref>
<ref id="c21"><mixed-citation publication-type="journal"><string-name><surname>Gribble</surname>, <given-names>P. L.</given-names></string-name>, &amp; <string-name><surname>Ostry</surname>, <given-names>D. J</given-names></string-name>. (<year>2000</year>). <article-title>Compensation for loads during arm movements using equilibrium-point control</article-title>. <source>Experimental Brain Research</source>, <volume>135</volume>(<issue>4</issue>), <fpage>474</fpage>–<lpage>482</lpage>. <pub-id pub-id-type="doi">10.1007/s002210000547</pub-id></mixed-citation></ref>
<ref id="c22"><mixed-citation publication-type="journal"><string-name><surname>Hu</surname>, <given-names>W.</given-names></string-name>, <string-name><surname>Xiao</surname>, <given-names>L.</given-names></string-name>, &amp; <string-name><surname>Pennington</surname>, <given-names>J</given-names></string-name>. (<year>2020</year>). <article-title>Provable Benefit of Orthogonal Initialization in Optimizing Deep Linear Networks</article-title> (arXiv:<pub-id pub-id-type="arxiv">2001.05992</pub-id>). <source>arXiv</source>. <pub-id pub-id-type="doi">10.48550/arXiv.2001.05992</pub-id></mixed-citation></ref>
<ref id="c23"><mixed-citation publication-type="journal"><string-name><surname>Jordan</surname>, <given-names>M. I.</given-names></string-name>, &amp; <string-name><surname>Rumelhart</surname>, <given-names>D. E</given-names></string-name>. (<year>1992</year>). <article-title>Forward Models: Supervised Learning with a Distal Teacher</article-title>. <source>Cognitive Science</source>, <volume>16</volume>(<issue>3</issue>), <fpage>307</fpage>–<lpage>354</lpage>. <pub-id pub-id-type="doi">10.1207/s15516709cog1603_1</pub-id></mixed-citation></ref>
<ref id="c24"><mixed-citation publication-type="journal"><string-name><surname>Keeley</surname>, <given-names>S. L.</given-names></string-name>, <string-name><surname>Zoltowski</surname>, <given-names>D. M.</given-names></string-name>, <string-name><surname>Aoi</surname>, <given-names>M. C.</given-names></string-name>, &amp; <string-name><surname>Pillow</surname>, <given-names>J. W</given-names></string-name>. (<year>2020</year>). <article-title>Modeling statistical dependencies in multi-region spike train data</article-title>. <source>Current Opinion in Neurobiology</source>, <volume>65</volume>, <fpage>194</fpage>–<lpage>202</lpage>. <pub-id pub-id-type="doi">10.1016/j.conb.2020.11.005</pub-id></mixed-citation></ref>
<ref id="c25"><mixed-citation publication-type="journal"><string-name><surname>Kistemaker</surname>, <given-names>D. A.</given-names></string-name>, <string-name><surname>Van Soest</surname>, <given-names>A. (Knoek) J</given-names></string-name>., &amp; <string-name><surname>Bobbert</surname>, <given-names>M. F.</given-names></string-name> (<year>2006</year>). <article-title>Is Equilibrium Point Control Feasible for Fast Goal-Directed Single-Joint Movements?</article-title> <source>Journal of Neurophysiology</source>, <volume>95</volume>(<issue>5</issue>), <fpage>2898</fpage>–<lpage>2912</lpage>. <pub-id pub-id-type="doi">10.1152/jn.00983.2005</pub-id></mixed-citation></ref>
<ref id="c26"><mixed-citation publication-type="journal"><string-name><surname>Kistemaker</surname>, <given-names>D. A.</given-names></string-name>, <string-name><surname>Wong</surname>, <given-names>J. D.</given-names></string-name>, &amp; <string-name><surname>Gribble</surname>, <given-names>P. L</given-names></string-name>. (<year>2010</year>). <article-title>The Central Nervous System Does Not Minimize Energy Cost in Arm Movements</article-title>. <source>Journal of Neurophysiology</source>, <volume>104</volume>(<issue>6</issue>), <fpage>2985</fpage>–<lpage>2994</lpage>. <pub-id pub-id-type="doi">10.1152/jn.00483.2010</pub-id></mixed-citation></ref>
<ref id="c27"><mixed-citation publication-type="journal"><string-name><surname>LeCun</surname>, <given-names>Y.</given-names></string-name>, <string-name><surname>Bengio</surname>, <given-names>Y.</given-names></string-name>, &amp; <string-name><surname>Hinton</surname>, <given-names>G</given-names></string-name>. (<year>2015</year>). <article-title>Deep learning</article-title>. <source>Nature</source>, <volume>521</volume>(<fpage>7553</fpage>), Article 7553. <pub-id pub-id-type="doi">10.1038/nature14539</pub-id></mixed-citation></ref>
<ref id="c28"><mixed-citation publication-type="web"><string-name><surname>Lillicrap</surname>, <given-names>T. P.</given-names></string-name>, <string-name><surname>Hunt</surname>, <given-names>J. J.</given-names></string-name>, <string-name><surname>Pritzel</surname>, <given-names>A.</given-names></string-name>, <string-name><surname>Heess</surname>, <given-names>N.</given-names></string-name>, <string-name><surname>Erez</surname>, <given-names>T.</given-names></string-name>, <string-name><surname>Tassa</surname>, <given-names>Y.</given-names></string-name>, <string-name><surname>Silver</surname>, <given-names>D.</given-names></string-name>, &amp; <string-name><surname>Wierstra</surname>, <given-names>D.</given-names></string-name> (<year>2019</year>). <article-title>Continuous control with deep reinforcement learning</article-title>. <source>arXiv</source>. <ext-link ext-link-type="uri" xlink:href="http://arxiv.org/abs/1509.02971">http://arxiv.org/abs/1509.02971</ext-link></mixed-citation></ref>
<ref id="c29"><mixed-citation publication-type="journal"><string-name><surname>Lillicrap</surname>, <given-names>T. P.</given-names></string-name>, <string-name><surname>Santoro</surname>, <given-names>A.</given-names></string-name>, <string-name><surname>Marris</surname>, <given-names>L.</given-names></string-name>, <string-name><surname>Akerman</surname>, <given-names>C. J.</given-names></string-name>, &amp; <string-name><surname>Hinton</surname>, <given-names>G</given-names></string-name>. (<year>2020</year>). <article-title>Backpropagation and the brain</article-title>. <source>Nature Reviews Neuroscience</source>, <volume>21</volume>(<issue>6</issue>), <fpage>335</fpage>–<lpage>346</lpage>. <pub-id pub-id-type="doi">10.1038/s41583-020-0277-3</pub-id></mixed-citation></ref>
<ref id="c30"><mixed-citation publication-type="journal"><string-name><surname>Lillicrap</surname>, <given-names>T. P.</given-names></string-name>, &amp; <string-name><surname>Scott</surname>, <given-names>S. H</given-names></string-name>. (<year>2013</year>). <article-title>Preference Distributions of Primary Motor Cortex Neurons Reflect Control Solutions Optimized for Limb Biomechanics</article-title>. <source>Neuron</source>, <volume>77</volume>(<issue>1</issue>), <fpage>168</fpage>–<lpage>179</lpage>. <pub-id pub-id-type="doi">10.1016/j.neuron.2012.10.041</pub-id></mixed-citation></ref>
<ref id="c31"><mixed-citation publication-type="journal"><string-name><surname>Lindsay</surname>, <given-names>G. W</given-names></string-name>. (<year>2021</year>). <article-title>Models of the Mind: How Physics</article-title>, <source>Engineering and Mathematics Have Shaped Our Understanding of the Brain. Bloomsbury Sigma</source>.</mixed-citation></ref>
<ref id="c32"><mixed-citation publication-type="journal"><string-name><surname>Loeb</surname>, <given-names>G. E</given-names></string-name>. (<year>2021</year>). <article-title>Learning to Use Muscles</article-title>. <source>Journal of Human Kinetics</source>, <volume>76</volume>(<issue>1</issue>), <fpage>9</fpage>–<lpage>33</lpage>. <pub-id pub-id-type="doi">10.2478/hukin-2020-0084</pub-id></mixed-citation></ref>
<ref id="c33"><mixed-citation publication-type="journal"><string-name><surname>Michaels</surname>, <given-names>J. A.</given-names></string-name>, <string-name><surname>Dann</surname>, <given-names>B.</given-names></string-name>, &amp; <string-name><surname>Scherberger</surname>, <given-names>H</given-names></string-name>. (<year>2016</year>). <article-title>Neural Population Dynamics during Reaching Are Better Explained by a Dynamical System than Representational Tuning</article-title>. <source>PLOS Computational Biology</source>, <volume>12</volume>(<issue>11</issue>), <fpage>e1005175</fpage>. <pub-id pub-id-type="doi">10.1371/journal.pcbi.1005175</pub-id></mixed-citation></ref>
<ref id="c34"><mixed-citation publication-type="journal"><string-name><surname>Michaels</surname>, <given-names>J. A.</given-names></string-name>, <string-name><surname>Schaffelhofer</surname>, <given-names>S.</given-names></string-name>, <string-name><surname>Agudelo-Toro</surname>, <given-names>A.</given-names></string-name>, &amp; <string-name><surname>Scherberger</surname>, <given-names>H</given-names></string-name>. (<year>2020</year>). <article-title>A goal-driven modular neural network predicts parietofrontal neural dynamics during grasping</article-title>. <source>Proceedings of the National Academy of Sciences</source>, <volume>117</volume>(<issue>50</issue>), <fpage>32124</fpage>–<lpage>32135</lpage>. <pub-id pub-id-type="doi">10.1073/pnas.2005087117</pub-id></mixed-citation></ref>
<ref id="c35"><mixed-citation publication-type="journal"><string-name><surname>Millard</surname>, <given-names>M.</given-names></string-name>, <string-name><surname>Uchida</surname>, <given-names>T.</given-names></string-name>, <string-name><surname>Seth</surname>, <given-names>A.</given-names></string-name>, &amp; <string-name><surname>Delp</surname>, <given-names>S. L</given-names></string-name>. (<year>2013</year>). <article-title>Flexing Computational Muscle: Modeling and Simulation of Musculotendon Dynamics</article-title>. <source>Journal of Biomechanical Engineering</source>, <volume>135</volume>(<issue>2</issue>), <fpage>021005</fpage>. <pub-id pub-id-type="doi">10.1115/1.4023390</pub-id></mixed-citation></ref>
<ref id="c36"><mixed-citation publication-type="journal"><string-name><surname>Mnih</surname>, <given-names>V.</given-names></string-name>, <string-name><surname>Kavukcuoglu</surname>, <given-names>K.</given-names></string-name>, <string-name><surname>Silver</surname>, <given-names>D.</given-names></string-name>, <string-name><surname>Rusu</surname>, <given-names>A. A.</given-names></string-name>, <string-name><surname>Veness</surname>, <given-names>J.</given-names></string-name>, <string-name><surname>Bellemare</surname>, <given-names>M. G.</given-names></string-name>, <string-name><surname>Graves</surname>, <given-names>A.</given-names></string-name>, <string-name><surname>Riedmiller</surname>, <given-names>M.</given-names></string-name>, <string-name><surname>Fidjeland</surname>, <given-names>A. K.</given-names></string-name>, <string-name><surname>Ostrovski</surname>, <given-names>G.</given-names></string-name>, <string-name><surname>Petersen</surname>, <given-names>S.</given-names></string-name>, <string-name><surname>Beattie</surname>, <given-names>C.</given-names></string-name>, <string-name><surname>Sadik</surname>, <given-names>A.</given-names></string-name>, <string-name><surname>Antonoglou</surname>, <given-names>I.</given-names></string-name>, <string-name><surname>King</surname>, <given-names>H.</given-names></string-name>, <string-name><surname>Kumaran</surname>, <given-names>D.</given-names></string-name>, <string-name><surname>Wierstra</surname>, <given-names>D.</given-names></string-name>, <string-name><surname>Legg</surname>, <given-names>S.</given-names></string-name>, &amp; <string-name><surname>Hassabis</surname>, <given-names>D</given-names></string-name>. (<year>2015</year>). <article-title>Human-level control through deep reinforcement learning</article-title>. <source>Nature</source>, <volume>518</volume>(<issue>7540</issue>), <fpage>529</fpage>–<lpage>533</lpage>. <pub-id pub-id-type="doi">10.1038/nature14236</pub-id></mixed-citation></ref>
<ref id="c37"><mixed-citation publication-type="journal"><string-name><surname>Murray</surname>, <given-names>W. M.</given-names></string-name>, <string-name><surname>Delp</surname>, <given-names>S. L.</given-names></string-name>, &amp; <string-name><surname>Buchanan</surname>, <given-names>T. S</given-names></string-name>. (<year>1995</year>). <article-title>Variation of muscle moment arms with elbow and forearm position</article-title>. <source>Journal of Biomechanics</source>, <volume>28</volume>(<issue>5</issue>), <fpage>513</fpage>–<lpage>525</lpage>. <pub-id pub-id-type="doi">10.1016/0021-9290(94)00114-J</pub-id></mixed-citation></ref>
<ref id="c38"><mixed-citation publication-type="book"><string-name><surname>Nijhof</surname>, <given-names>E.-J.</given-names></string-name>, &amp; <string-name><surname>Kouwenhoven</surname>, <given-names>E.</given-names></string-name> (<year>2000</year>). <chapter-title>Simulation of Multijoint Arm Movements</chapter-title>. In <string-name><given-names>J. M.</given-names> <surname>Winters</surname></string-name> &amp; <string-name><given-names>P. E.</given-names> <surname>Crago</surname></string-name> (Eds.), <source>Biomechanics and Neural Control of Posture and Movement</source> (pp. <fpage>363</fpage>–<lpage>372</lpage>). <publisher-loc>Springer New York</publisher-loc>. <pub-id pub-id-type="doi">10.1007/978-1-4612-2104-3_29</pub-id></mixed-citation></ref>
<ref id="c39"><mixed-citation publication-type="journal"><string-name><surname>Pesaran</surname>, <given-names>B.</given-names></string-name>, <string-name><surname>Hagan</surname>, <given-names>M.</given-names></string-name>, <string-name><surname>Qiao</surname>, <given-names>S.</given-names></string-name>, &amp; <string-name><surname>Shewcraft</surname>, <given-names>R</given-names></string-name>. (<year>2021</year>). <article-title>Multiregional communication and the channel modulation hypothesis</article-title>. <source>Current Opinion in Neurobiology</source>, <volume>66</volume>, <fpage>250</fpage>–<lpage>257</lpage>. <pub-id pub-id-type="doi">10.1016/j.conb.2020.11.016</pub-id></mixed-citation></ref>
<ref id="c40"><mixed-citation publication-type="journal"><string-name><surname>Pruszynski</surname>, <given-names>J. A.</given-names></string-name>, <string-name><surname>King</surname>, <given-names>G. L.</given-names></string-name>, <string-name><surname>Boisse</surname>, <given-names>L.</given-names></string-name>, <string-name><surname>Scott</surname>, <given-names>S. H.</given-names></string-name>, <string-name><surname>Flanagan</surname>, <given-names>J. R.</given-names></string-name>, &amp; <string-name><surname>Munoz</surname>, <given-names>D. P</given-names></string-name>. (<year>2010</year>). <article-title>Stimulus-locked responses on human arm muscles reveal a rapid neural pathway linking visual input to arm motor output</article-title>. <source>The European Journal of Neuroscience</source>, <volume>32</volume>(<issue>6</issue>), <fpage>1049</fpage>–<lpage>1057</lpage>. <pub-id pub-id-type="doi">10.1111/j.1460-9568.2010.07380.x</pub-id></mixed-citation></ref>
<ref id="c41"><mixed-citation publication-type="journal"><string-name><surname>Pruszynski</surname>, <given-names>J. A.</given-names></string-name>, <string-name><surname>Omrani</surname>, <given-names>M.</given-names></string-name>, &amp; <string-name><surname>Scott</surname>, <given-names>S. H</given-names></string-name>. (<year>2014</year>). <article-title>Goal-Dependent Modulation of Fast Feedback Responses in Primary Motor Cortex</article-title>. <source>Journal of Neuroscience</source>, <volume>34</volume>(<issue>13</issue>), <fpage>4608</fpage>–<lpage>4617</lpage>. <pub-id pub-id-type="doi">10.1523/JNEUROSCI.4520-13.2014</pub-id></mixed-citation></ref>
<ref id="c42"><mixed-citation publication-type="journal"><string-name><surname>Reschechtko</surname>, <given-names>S.</given-names></string-name>, &amp; <string-name><surname>Pruszynski</surname>, <given-names>J. A</given-names></string-name>. (<year>2020</year>). <article-title>Stretch reflexes</article-title>. <source>Current Biology</source>, <volume>30</volume>(<issue>18</issue>), <fpage>R1025</fpage>–<lpage>R1030</lpage>. <pub-id pub-id-type="doi">10.1016/j.cub.2020.07.092</pub-id></mixed-citation></ref>
<ref id="c43"><mixed-citation publication-type="journal"><string-name><surname>Richards</surname>, <given-names>B. A.</given-names></string-name>, <string-name><surname>Lillicrap</surname>, <given-names>T. P.</given-names></string-name>, <string-name><surname>Beaudoin</surname>, <given-names>P.</given-names></string-name>, <string-name><surname>Bengio</surname>, <given-names>Y.</given-names></string-name>, <string-name><surname>Bogacz</surname>, <given-names>R.</given-names></string-name>, <string-name><surname>Christensen</surname>, <given-names>A.</given-names></string-name>, <string-name><surname>Clopath</surname>, <given-names>C.</given-names></string-name>, <string-name><surname>Costa</surname>, <given-names>R. P.</given-names></string-name>, <string-name><surname>de Berker</surname>, <given-names>A.</given-names></string-name>, <string-name><surname>Ganguli</surname>, <given-names>S.</given-names></string-name>, <string-name><surname>Gillon</surname>, <given-names>C. J.</given-names></string-name>, <string-name><surname>Hafner</surname>, <given-names>D.</given-names></string-name>, <string-name><surname>Kepecs</surname>, <given-names>A.</given-names></string-name>, <string-name><surname>Kriegeskorte</surname>, <given-names>N.</given-names></string-name>, <string-name><surname>Latham</surname>, <given-names>P.</given-names></string-name>, <string-name><surname>Lindsay</surname>, <given-names>G. W.</given-names></string-name>, <string-name><surname>Miller</surname>, <given-names>K. D.</given-names></string-name>, <string-name><surname>Naud</surname>, <given-names>R.</given-names></string-name>, <string-name><surname>Pack</surname>, <given-names>C. C.</given-names></string-name>, … <string-name><surname>Kording</surname>, <given-names>K. P.</given-names></string-name> (<year>2019</year>). <article-title>A deep learning framework for neuroscience</article-title>. <source>Nature Neuroscience</source>, <volume>22</volume>(<fpage>11</fpage>), Article 11. <pub-id pub-id-type="doi">10.1038/s41593-019-0520-2</pub-id></mixed-citation></ref>
<ref id="c44"><mixed-citation publication-type="journal"><string-name><surname>Rumelhart</surname>, <given-names>D. E.</given-names></string-name>, <string-name><surname>Hintont</surname>, <given-names>G. E.</given-names></string-name>, &amp; <string-name><surname>Williams</surname>, <given-names>R. J</given-names></string-name>. (<year>1986</year>). <source>Learning representations by back-propagating errors</source>. <volume>4</volume>.</mixed-citation></ref>
<ref id="c45"><mixed-citation publication-type="journal"><string-name><surname>Safaie</surname>, <given-names>M.</given-names></string-name>, <string-name><surname>Chang</surname>, <given-names>J. C.</given-names></string-name>, <string-name><surname>Park</surname>, <given-names>J.</given-names></string-name>, <string-name><surname>Miller</surname>, <given-names>L. E.</given-names></string-name>, <string-name><surname>Dudman</surname>, <given-names>J. T.</given-names></string-name>, <string-name><surname>Perich</surname>, <given-names>M. G.</given-names></string-name>, &amp; <string-name><surname>Gallego</surname>, <given-names>J. A.</given-names></string-name> (<year>2023</year>). <article-title>Preserved neural dynamics across animals performing similar behaviour</article-title>. <source>Nature</source>, <volume>623</volume>(<issue>7988</issue>), Article 7988. <pub-id pub-id-type="doi">10.1038/s41586-023-06714-0</pub-id></mixed-citation></ref>
<ref id="c46"><mixed-citation publication-type="journal"><string-name><surname>Saxe</surname>, <given-names>A.</given-names></string-name>, <string-name><surname>Nelli</surname>, <given-names>S.</given-names></string-name>, &amp; <string-name><surname>Summerfield</surname>, <given-names>C</given-names></string-name>. (<year>2021</year>). <article-title>If deep learning is the answer, what is the question?</article-title> <source>Nature Reviews Neuroscience</source>, <volume>22</volume>(<issue>1</issue>), <fpage>55</fpage>–<lpage>67</lpage>. <pub-id pub-id-type="doi">10.1038/s41583-020-00395-8</pub-id></mixed-citation></ref>
<ref id="c47"><mixed-citation publication-type="journal"><string-name><surname>Scott</surname>, <given-names>S. H.</given-names></string-name>, <string-name><surname>Gribble</surname>, <given-names>P. L.</given-names></string-name>, <string-name><surname>Graham</surname>, <given-names>K. M.</given-names></string-name>, &amp; <string-name><surname>Cabel</surname>, <given-names>D. W</given-names></string-name>. (<year>2001</year>). <article-title>Dissociation between hand motion and population vectors from neural activity in motor cortex</article-title>. <source>Nature</source>, <volume>413</volume>(<fpage>6852</fpage>), Article 6852. <pub-id pub-id-type="doi">10.1038/35093102</pub-id></mixed-citation></ref>
<ref id="c48"><mixed-citation publication-type="journal"><string-name><surname>Scott</surname>, <given-names>S. H.</given-names></string-name>, &amp; <string-name><surname>Kalaska</surname>, <given-names>J. F</given-names></string-name>. (<year>1997</year>). <article-title>Reaching Movements With Similar Hand Paths But Different Arm Orientations</article-title>. <source>I. Activity of Individual Cells in Motor Cortex. Journal of Neurophysiology</source>, <volume>77</volume>(<issue>2</issue>), <fpage>826</fpage>–<lpage>852</lpage>. <pub-id pub-id-type="doi">10.1152/jn.1997.77.2.826</pub-id></mixed-citation></ref>
<ref id="c49"><mixed-citation publication-type="journal"><string-name><surname>Semedo</surname>, <given-names>J. D.</given-names></string-name>, <string-name><surname>Gokcen</surname>, <given-names>E.</given-names></string-name>, <string-name><surname>Machens</surname>, <given-names>C. K.</given-names></string-name>, <string-name><surname>Kohn</surname>, <given-names>A.</given-names></string-name>, &amp; <string-name><surname>Yu</surname>, <given-names>B. M</given-names></string-name>. (<year>2020</year>). <article-title>Statistical methods for dissecting interactions between brain areas</article-title>. <source>Current Opinion in Neurobiology</source>, <volume>65</volume>, <fpage>59</fpage>–<lpage>69</lpage>. <pub-id pub-id-type="doi">10.1016/j.conb.2020.09.009</pub-id></mixed-citation></ref>
<ref id="c50"><mixed-citation publication-type="journal"><string-name><surname>Seth</surname>, <given-names>A.</given-names></string-name>, <string-name><surname>Hicks</surname>, <given-names>J. L.</given-names></string-name>, <string-name><surname>Uchida</surname>, <given-names>T. K.</given-names></string-name>, <string-name><surname>Habib</surname>, <given-names>A.</given-names></string-name>, <string-name><surname>Dembia</surname>, <given-names>C. L.</given-names></string-name>, <string-name><surname>Dunne</surname>, <given-names>J. J.</given-names></string-name>, <string-name><surname>Ong</surname>, <given-names>C. F.</given-names></string-name>, <string-name><surname>DeMers</surname>, <given-names>M. S.</given-names></string-name>, <string-name><surname>Rajagopal</surname>, <given-names>A.</given-names></string-name>, <string-name><surname>Millard</surname>, <given-names>M.</given-names></string-name>, <string-name><surname>Hamner</surname>, <given-names>S. R.</given-names></string-name>, <string-name><surname>Arnold</surname>, <given-names>E. M.</given-names></string-name>, <string-name><surname>Yong</surname>, <given-names>J. R.</given-names></string-name>, <string-name><surname>Lakshmikanth</surname>, <given-names>S. K.</given-names></string-name>, <string-name><surname>Sherman</surname>, <given-names>M. A.</given-names></string-name>, <string-name><surname>Ku</surname>, <given-names>J. P.</given-names></string-name>, &amp; <string-name><surname>Delp</surname>, <given-names>S. L</given-names></string-name>. (<year>2018</year>). <article-title>OpenSim: Simulating musculoskeletal dynamics and neuromuscular control to study human and animal movement</article-title>. <source>PLOS Computational Biology</source>, <volume>14</volume>(<issue>7</issue>), <fpage>e1006223</fpage>. <pub-id pub-id-type="doi">10.1371/journal.pcbi.1006223</pub-id></mixed-citation></ref>
<ref id="c51"><mixed-citation publication-type="journal"><string-name><surname>Seth</surname>, <given-names>A.</given-names></string-name>, <string-name><surname>Sherman</surname>, <given-names>M.</given-names></string-name>, <string-name><surname>Eastman</surname>, <given-names>P.</given-names></string-name>, &amp; <string-name><surname>Delp</surname>, <given-names>S</given-names></string-name>. (<year>2010</year>). <article-title>Minimal formulation of joint motion for biomechanisms</article-title>. <source>Nonlinear Dynamics</source>, <volume>62</volume>(<issue>1–2</issue>), <fpage>291</fpage>–<lpage>303</lpage>. <pub-id pub-id-type="doi">10.1007/s11071-010-9717-3</pub-id></mixed-citation></ref>
<ref id="c52"><mixed-citation publication-type="journal"><string-name><surname>Shadmehr</surname>, <given-names>R.</given-names></string-name>, &amp; <string-name><surname>Krakauer</surname>, <given-names>J. W.</given-names></string-name> (<year>2008</year>). <article-title>A computational neuroanatomy for motor control</article-title>. <source>Experimental Brain Research</source>, <volume>185</volume>(<issue>3</issue>), <fpage>359</fpage>–<lpage>381</lpage>. <pub-id pub-id-type="doi">10.1007/s00221-008-1280-5</pub-id></mixed-citation></ref>
<ref id="c53"><mixed-citation publication-type="journal"><string-name><surname>Shadmehr</surname>, <given-names>R.</given-names></string-name>, &amp; <string-name><surname>Mussa-Ivaldi</surname>, <given-names>F. A.</given-names></string-name> (<year>1994</year>). <article-title>Adaptive representation of dynamics during learning of a motor task</article-title>. <source>Journal of Neuroscience</source>, <volume>14</volume>(<issue>5</issue>), <fpage>3208</fpage>–<lpage>3224</lpage>. <pub-id pub-id-type="doi">10.1523/JNEUROSCI.14-05-03208.1994</pub-id></mixed-citation></ref>
<ref id="c54"><mixed-citation publication-type="journal"><string-name><surname>Sherman</surname>, <given-names>M. A.</given-names></string-name>, <string-name><surname>Seth</surname>, <given-names>A.</given-names></string-name>, &amp; <string-name><surname>Delp</surname>, <given-names>S. L</given-names></string-name>. (<year>2013</year>). <article-title>What is a Moment Arm? Calculating Muscle Effectiveness in Biomechanical Models Using Generalized Coordinates</article-title>. <source>Volume 7B: 9th International Conference on Multibody Systems, Nonlinear Dynamics, and Control</source>, <fpage>V07BT10A052</fpage>. <pub-id pub-id-type="doi">10.1115/DETC2013-13633</pub-id></mixed-citation></ref>
<ref id="c55"><mixed-citation publication-type="journal"><string-name><surname>Thelen</surname>, <given-names>D. G</given-names></string-name>. (<year>2003</year>). <article-title>Adjustment of Muscle Mechanics Model Parameters to Simulate Dynamic Contractions in Older Adults</article-title>. <source>Journal of Biomechanical Engineering</source>, <volume>125</volume>(<issue>1</issue>), <fpage>70</fpage>–<lpage>77</lpage>. <pub-id pub-id-type="doi">10.1115/1.1531112</pub-id></mixed-citation></ref>
<ref id="c56"><mixed-citation publication-type="journal"><string-name><surname>Todorov</surname>, <given-names>E</given-names></string-name>. (<year>2004</year>). <article-title>Optimality principles in sensorimotor control</article-title>. <source>Nature Neuroscience</source>, <volume>7</volume>(<issue>9</issue>), <fpage>907</fpage>– <lpage>915</lpage>. <pub-id pub-id-type="doi">10.1038/nn1309</pub-id></mixed-citation></ref>
<ref id="c57"><mixed-citation publication-type="journal"><string-name><surname>Todorov</surname>, <given-names>E.</given-names></string-name>, <string-name><surname>Erez</surname>, <given-names>T.</given-names></string-name>, &amp; <string-name><surname>Tassa</surname>, <given-names>Y</given-names></string-name>. (<year>2012</year>). <article-title>MuJoCo: A physics engine for model-based control</article-title>. <volume>2012</volume> <source>IEEE/RSJ International Conference on Intelligent Robots and Systems</source>, <fpage>5026</fpage>–<lpage>5033</lpage>. <pub-id pub-id-type="doi">10.1109/IROS.2012.6386109</pub-id></mixed-citation></ref>
<ref id="c58"><mixed-citation publication-type="journal"><string-name><surname>Towers</surname>, <given-names>M.</given-names></string-name>, <string-name><surname>Terry</surname>, <given-names>J. K.</given-names></string-name>, <string-name><surname>Kwiatkowski</surname>, <given-names>A.</given-names></string-name>, <string-name><surname>Balis</surname>, <given-names>J. U.</given-names></string-name>, <string-name><surname>Cola</surname>, <given-names>G.</given-names></string-name>, <string-name><surname>Deleu</surname>, <given-names>T.</given-names></string-name>, <string-name><surname>Goulão</surname>, <given-names>M.</given-names></string-name>, <string-name><surname>Kallinteris</surname>, <given-names>A.</given-names></string-name>, KG, A., <string-name><surname>Krimmel</surname>, <given-names>M.</given-names></string-name>, <string-name><surname>Perez-Vicente</surname>, <given-names>R.</given-names></string-name>, <string-name><surname>Pierré</surname>, <given-names>A.</given-names></string-name>, <string-name><surname>Schulhoff</surname>, <given-names>S.</given-names></string-name>, <string-name><surname>Tai</surname>, <given-names>J. J.</given-names></string-name>, <string-name><surname>Tan</surname>, <given-names>A. J. S.</given-names></string-name>, &amp; <string-name><surname>Younis</surname>, <given-names>O. G</given-names></string-name>. (<year>2023</year>). <article-title><italic>Gymnasium</italic> [Computer software]</article-title>. <source>Zenodo</source>. <pub-id pub-id-type="doi">10.5281/zenodo.8148697</pub-id></mixed-citation></ref>
<ref id="c59"><mixed-citation publication-type="journal"><string-name><surname>Weiler</surname>, <given-names>J.</given-names></string-name>, <string-name><surname>Gribble</surname>, <given-names>P. L.</given-names></string-name>, &amp; <string-name><surname>Pruszynski</surname>, <given-names>J. A</given-names></string-name>. (<year>2019</year>). <article-title>Spinal stretch reflexes support efficient hand control</article-title>. <source>Nature Neuroscience</source>, <volume>22</volume>(<issue>4</issue>), <fpage>529</fpage>–<lpage>533</lpage>. <pub-id pub-id-type="doi">10.1038/s41593-019-0336-0</pub-id></mixed-citation></ref>
<ref id="c60"><mixed-citation publication-type="journal"><string-name><surname>Whittington</surname>, <given-names>J. C. R.</given-names></string-name>, &amp; <string-name><surname>Bogacz</surname>, <given-names>R</given-names></string-name>. (<year>2017</year>). <article-title>An Approximation of the Error Backpropagation Algorithm in a Predictive Coding Network with Local Hebbian Synaptic Plasticity</article-title>. <source>Neural Computation</source>, <volume>29</volume>(<issue>5</issue>), <fpage>1229</fpage>–<lpage>1262</lpage>. <pub-id pub-id-type="doi">10.1162/NECO_a_00949</pub-id></mixed-citation></ref>
<ref id="c61"><mixed-citation publication-type="journal"><string-name><surname>Wierzbicka</surname>, <given-names>M. M.</given-names></string-name>, <string-name><surname>Wiegner</surname>, <given-names>A. W.</given-names></string-name>, &amp; <string-name><surname>Shahani</surname>, <given-names>B. T</given-names></string-name>. (<year>1986</year>). <article-title>Role of agonist and antagonist muscles in fast arm movements in man</article-title>. <source>Experimental Brain Research</source>, <volume>63</volume>(<issue>2</issue>), <fpage>331</fpage>–<lpage>340</lpage>. <pub-id pub-id-type="doi">10.1007/BF00236850</pub-id></mixed-citation></ref>
<ref id="c62"><mixed-citation publication-type="journal"><string-name><surname>Willett</surname>, <given-names>F.</given-names></string-name>, <string-name><surname>Vyas</surname>, <given-names>S.</given-names></string-name>, <string-name><surname>Michaels</surname>, <given-names>J. A.</given-names></string-name>, <string-name><surname>Henderson</surname>, <given-names>J. M.</given-names></string-name>, &amp; <string-name><surname>Shenoy</surname>, <given-names>K. V</given-names></string-name>. (<year>2021</year>, November 9). <article-title>Feedback control dynamics explain motor cortical activity</article-title>. <source>50th Annual Meeting of the Society for Neuroscience</source>. <ext-link ext-link-type="uri" xlink:href="https://www.abstractsonline.com/pp8/#!/10485/presentation/willett/1">https://www.abstractsonline.com/pp8/#!/10485/presentation/willett/1</ext-link></mixed-citation></ref>
<ref id="c63"><mixed-citation publication-type="journal"><string-name><surname>Won</surname>, <given-names>J.</given-names></string-name>, &amp; <string-name><surname>Hogan</surname>, <given-names>N</given-names></string-name>. (<year>1995</year>). <article-title>Stability properties of human reaching movements</article-title>. <source>Experimental Brain Research</source>, <volume>107</volume>(<fpage>1</fpage>). <pub-id pub-id-type="doi">10.1007/BF00228024</pub-id></mixed-citation></ref>
<ref id="c64"><mixed-citation publication-type="journal"><string-name><surname>Zahalak</surname>, <given-names>G. I</given-names></string-name>. (<year>1981</year>). <article-title>A distribution-moment approximation for kinetic theories of muscular contraction</article-title>. <source>Mathematical Biosciences</source>, <volume>55</volume>(<issue>1</issue>), <fpage>89</fpage>–<lpage>114</lpage>. <pub-id pub-id-type="doi">10.1016/0025-5564(81)90014-6</pub-id></mixed-citation></ref>
</ref-list>
</back>
<sub-article id="sa0" article-type="editor-report">
<front-stub>
<article-id pub-id-type="doi">10.7554/eLife.88591.2.sa2</article-id>
<title-group>
<article-title>eLife Assessment</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<name>
<surname>Gallego</surname>
<given-names>Juan Alvaro</given-names>
</name>
<role specific-use="editor">Reviewing Editor</role>
<aff>
<institution-wrap>
<institution>Imperial College London</institution>
</institution-wrap>
<city>London</city>
<country>United Kingdom</country>
</aff>
</contrib>
</contrib-group>
<kwd-group kwd-group-type="evidence-strength">
<kwd>Solid</kwd>
</kwd-group>
<kwd-group kwd-group-type="claim-importance">
<kwd>Useful</kwd>
</kwd-group>
</front-stub>
<body>
<p>This work will be of interest to the motor control community as well as neuroAI researchers interested in how bodies constrain neural circuit function. The authors present &quot;MotorNet&quot;, a <bold>useful</bold> software package to train artificial neural networks to control a biomechanical model of an effector. The manuscript provides <bold>solid</bold> evidence that MotorNet is easy to use and can reproduce past results in the field, both at the neural and behavioural levels. Validation is limited to planar arm-like plants or point-masses, so future work exploring three-dimensional movements and other types of plants would strengthen the impact of the tool.</p>
</body>
</sub-article>
<sub-article id="sa1" article-type="referee-report">
<front-stub>
<article-id pub-id-type="doi">10.7554/eLife.88591.2.sa1</article-id>
<title-group>
<article-title>Reviewer #1 (Public Review):</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<anonymous/>
<role specific-use="referee">Reviewer</role>
</contrib>
</contrib-group>
</front-stub>
<body>
<p>Summary:</p>
<p>
Codol et al. present a toolbox that allows simulating biomechanically realistic effectors and training Artificial Neural Networks (ANNs) to control them. The paper provides a detailed explanation of how the toolbox is structured and several examples demonstrating its utility.</p>
<p>Main comments:</p>
<p>
(1) The paper is well-written and easy to follow. The schematics facilitate understanding of the toolbox's functionality, and the examples give insight into the potential results users can achieve.</p>
<p>
(2) The toolbox's latest version, developed in PyTorch, is expected to offer greater benefits to the community.</p>
<p>
(3) The new API, being compatible with Gymnasium, broadens the toolbox's application scope, enabling the use of Reinforcement Learning for training the ANNs.</p>
<p>Impact:</p>
<p>
MotorNet is designed to simplify the process of simulating complex experimental setups, enabling the rapid testing of hypotheses on how the brain generates specific movements. Implemented in PyTorch and compatible with widely-used machine learning toolboxes, including Gymnasium, it offers an end-to-end pipeline for training ANNs on simulated setups. This can greatly assist experimenters in determining the focus of their subsequent efforts.</p>
<p>Additional context:</p>
<p>
The main outcome of the work, a toolbox, is supplemented by a GitHub repository and a documentation webpage. Both the repository and the webpage are well-organized and user-friendly. The webpage guides users through the toolbox installation process, as well as the construction of effectors and Artificial Neural Networks (ANNs).</p>
</body>
</sub-article>
<sub-article id="sa2" article-type="referee-report">
<front-stub>
<article-id pub-id-type="doi">10.7554/eLife.88591.2.sa0</article-id>
<title-group>
<article-title>Reviewer #2 (Public Review):</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<anonymous/>
<role specific-use="referee">Reviewer</role>
</contrib>
</contrib-group>
</front-stub>
<body>
<p>MotorNet aims to provide a unified interface where the trained RNN controller exists within the same TensorFlow environment as the end effectors being controlled. This architecture provides a much simpler interface for the researcher to develop and iterate through computational hypotheses. In addition, the authors have built a set of biomechanically realistic end effectors (e.g., a 2 joint arm model with realistic muscles) within TensorFlow that are fully differentiable.</p>
<p>MotorNet will prove a highly useful starting point for researchers interested in exploring the challenges of controlling movement with realistic muscle and joint dynamics. The architecture features a conveniently modular design and the inclusion of simpler arm models provides an approachable learning curve. Other state-of-the-art simulation engines offer realistic models of muscles and multi-joint arms and afford more complex object manipulation and contact dynamics than MotorNet. However, MotorNet's approach allows for direct optimization of the controller network via gradient descent rather than reinforcement learning, which is a compromise currently required when other simulation engines (as these engines' code cannot be differentiated through).</p>
<p>The paper has been reorganized to provide clearer signposts to guide the reader. Importantly, the software has been rewritten atop PyTorch which is increasingly popular in ML and computational neuroscience research.</p>
<p>One paragraph in the discussion regarding a &quot;spinal cord&quot; module is a bit perplexing. Quite sensibly, the software architecture partitions motor control into the plant or effector (the physical body being moved) and the controller (a model of the brain and spinal cord). Of course, the authors certainly appreciate this, though a reader from outside of neuro might not realize that control of movement is distributed throughout the central nervous system, spanning a network of spinal, subcortical (cerebellum, basal ganglia, thalamus, brainstem), and cortical brain regions. Casting the spinal cord as a pre-filter within the effector module would seem to belie its complex and dynamic role in these distributed neural circuits. This is particularly noticeable when contrasted with the subsequent paragraph on &quot;Modular polices&quot; (which is excellent). In my view, the spinal cord would be better treated as a module of this policy section rather than as part of the effector. I understand the nuance here, and suspect I'd see eye to eye with the authors for the most part. The choice of controller vs. plant depends on perspective (one could call the arm itself part of the controller, and treat the environment / manipulated object as the plant; similarly, one could treat the brain as controlling the cord rather than the body). However, I fear that someone lacking the appropriate neurophysiological/anatomical context might read the &quot;Spinal Compartment&quot; paragraph, think that it would be fine to introduce a simple filter module as the spinal cord, and then start referring to the MotorNet policy network as a model of motor cortex per se.</p>
</body>
</sub-article>
<sub-article id="sa3" article-type="author-comment">
<front-stub>
<article-id pub-id-type="doi">10.7554/eLife.88591.2.sa3</article-id>
<title-group>
<article-title>Author Response</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<name>
<surname>Codol</surname>
<given-names>Olivier</given-names>
</name>
<role specific-use="author">Author</role>
<contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-0796-5457</contrib-id></contrib>
<contrib contrib-type="author">
<name>
<surname>Michaels</surname>
<given-names>Jonathan A.</given-names>
</name>
<role specific-use="author">Author</role>
<contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-5179-3181</contrib-id></contrib>
<contrib contrib-type="author">
<name>
<surname>Kashefi</surname>
<given-names>Mehrdad</given-names>
</name>
<role specific-use="author">Author</role>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Pruszynski</surname>
<given-names>J. Andrew</given-names>
</name>
<role specific-use="author">Author</role>
<contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-0786-0081</contrib-id></contrib>
<contrib contrib-type="author">
<name>
<surname>Gribble</surname>
<given-names>Paul L.</given-names>
</name>
<role specific-use="author">Author</role>
<contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-1368-032X</contrib-id></contrib>
</contrib-group>
</front-stub>
<body>
<p>The following is the authors’ response to the original reviews.</p>
<disp-quote content-type="editor-comment">
<p><bold>Public Reviews:</bold></p>
</disp-quote>
<p>We thank all the reviewers for taking the time to assess and provide valuable feedback on the manuscript. We believe these comments helped clarify the manuscript’s prose, and the suggestions on the functionality and aim of the toolbox were globally incorporated into the following updates of the toolbox. Particularly, we would like to point out some changes that will help all reviewers, independently of their individual comments, to understand the current state of the toolbox and some systematic changes that were made to the manuscript.</p>
<p>We have received a significant amount of feedback asking for a PyTorch implementation of the toolbox. Consequently, we decided to enact this, and the next version of the toolbox will be exclusively in PyTorch. We will maintain the Application Programming Interface (API) and tutorial documentation for the TensorFlow version of the toolbox on the online website. However, going forward we will focus exclusively on bug-fixing and expanding from the latest version of MotorNet, which will be in PyTorch. We now believe that the greater popularity of PyTorch in the academic community makes that choice more sustainable while helping a greater proportion of research projects.</p>
<p>These changes led to a significant alteration of the MotorNet structure, which is reflected by changes made throughout the manuscript, most particularly in Figure 3 and Table 1. A beneficial side-effect of this is a much simpler structure for MotorNet which ought to contribute positively toward its usability by researchers in the neuroscience community.</p>
<p>We also refactored some terminology to be more in line with current computational neuroscience vocabulary:</p>
<p>•   The term “plant”, which comes from industrial engineering and is more niche in neuroscience, has been replaced by “effector”.</p>
<p>•   The term “task” has been replaced by “environment” to match the gymnasium toolbox terminology, which MotorNet is now compatible with. Task objects essentially performed the same function as environment objects from the gymnasium toolbox.</p>
<p>•   The term “controller” has been replaced by “policy” throughout, as this term is more general.</p>
<p>•   The term “motor command” is very specific to the motor control subfield of neuroscience, and therefore is replaced by “action”, which is more commonplace for this modelling component in computational neuroscience and machine learning.</p>
<disp-quote content-type="editor-comment">
<p><bold>Reviewer #1 (Public Review):</bold></p>
<p>Summary:</p>
<p>Codol et al. present a toolbox that allows simulating biomechanically realistic effectors and training Artificial Neural Networks (ANNs) to control them. The paper provides a detailed explanation of how the toolbox is structured and several examples that demonstrate its usefulness.</p>
<p>Main comments:</p>
<p>(1) The paper is well written and easy to follow. The schematics help in understanding how the toolbox works and the examples provide an idea of the results that the user can obtain.</p>
</disp-quote>
<p>We thank the reviewer for this comment.</p>
<disp-quote content-type="editor-comment">
<p>(2) As I understand it, the main purpose of the paper should be to facilitate the usage of the toolbox. For this reason, I have missed a more explicit link to the actual code. As I see it, researchers will read this paper to figure out whether they can use MotorNet to simulate their experiments, and how they should proceed if they decide to use it. I'd say the paper provides an answer to the first question and assures that the toolbox is very easy to install and use. Maybe the authors could support this claim by adding &quot;snippets&quot; of code that show the key steps in building an actual example.</p>
</disp-quote>
<p>This is an important point, which we also considered when writing this paper. We instead decided to focus on the first approach, because it is easier to illustrate the scientific use of the toolbox using code or interactive (Jupyter) notebooks than a publication format. We find the “how to proceed” aspect of the toolbox can more easily and comprehensively be covered using online, interactive tutorials. Additionally, this allows us to update these tutorials as the toolbox evolves over different versions, while it is more difficult to update a scientific article. Consequently, we explicitly avoided code snippets on the article itself. However, we appreciate that the paper would gain in clarity if this was more explicitly stated early. We have modified the paper to include a pointer to where to find tutorials online. We added this at the last paragraph of the introduction section:</p>
<p>“The interested reader may consult the full API documentation, including interactive tutorials on the toolbox website at <ext-link ext-link-type="uri" xlink:href="https://motornet.org">https://motornet.org</ext-link>.”</p>
<disp-quote content-type="editor-comment">
<p>(3) The results provided in Figures 1, 4, 5 and 6 are useful, because they provide examples of the type of things one can do with the toolbox. I have a few comments that might help improving them:</p>
<p>(a) The examples in Figures 1 and 5 seem a bit redundant (same effector, similar task). Maybe the authors could show an example with a different effector or task? (see point 4).</p>
</disp-quote>
<p>The effectors from figures 1 and 5 are indeed very similar. However, the tasks in figure 1 and 5 present some important differences. The training procedure in figure 1 never includes any perturbations, while the one from figure 5 includes a wide range of perturbations of different magnitudes, timing and directions. The evaluation procedure of figure 1 includes center-out reaches with permanent viscous (proportional to velocity) external dynamics, while that of figure 5 are fixed, transient, square-shaped perturbation orthogonal to the reach direction. Finally, the networks in figure 1 undergo a second training procedure after evaluation while the network of figure 5 do not.
While we agree that some variation of effectors would be beneficial, we do show examples of a point-mass effector in figure 6. Overall, figure 5 shows a task that is quite different from that of figure 1 with a similar effector, while the opposite is true for figure 6. We have modified the text to clarify this for the reader, by adding the following.</p>
<p>End of 1st paragraph, section 2.4.</p>
<p>“Therefore, the training protocol used for this task largely differed from section 2.1 in that the networks are exposed to a wide range of mechanical perturbations with varying characteristics.”</p>
<disp-quote content-type="editor-comment">
<p>1st paragraph of section 2.5</p>
<p>[…] this asymmetrical representation of PMDs during reaching movements did not occur when RNNs were trained to control an effector that lacked the geometrical properties of an arm such as illustrated in Figure 4c-e and section 2.1.</p>
<p>(b) I missed a discussion on the relevance of the results shown in Figure 4. The moment arms are barely mentioned outside section 2.3. Are these results new? How can they help with motor control research?</p>
</disp-quote>
<p>We thank the reviewer for this comment. This relates to a point from reviewer 2 indicating that the purpose of each section was sometimes difficult to grasp as one reads. Section 2.3 explains the biomechanical properties that the toolbox implements to improve realism of the effector. They are not new results in the sense that other toolboxes implement these features (though not in differentiable formats) and these properties of biological muscles are empirically well-established. However, they are important to understand what the toolbox provides, and consequently what constraints networks must accommodate to learn efficient control policies. An example of this is the results in figure 6, where a simple effector versus a more biomechanically complex effector will yield different neural representations.</p>
<p>Regarding the manuscript itself, we agree that more clarity on the goal of every paragraph may improve the reader’s experience. Consequently, we ensured to specify such goals at the start of each section. Particularly, we clarify the purpose of section 2.3 by adding several sentences on this at the end of the first paragraph in that section. We also now clearly state the purpose of section 2.3 with the results of figure 6 and reference figure 4 in that section.</p>
<disp-quote content-type="editor-comment">
<p>(c) The results in Figure 6 are important, since one key asset of ANNs is that they provide access to the activity of the whole population of units that produces a given behavior. For this reason, I think it would be interesting to show the actual &quot;empirical observations&quot; that the results shown in Fig. 6 are replicating, hence allowing a direct comparison between the results obtained for biological and simulated neurons.</p>
</disp-quote>
<p>These empirical observations are available from previous electrophysiological and modelling work. Particularly, polar histograms across reaching directions like panel C are displayed in figures 2 and 3 of Scott, Gribble, Graham, Cabel (2001, Nature). Colormaps of modelled unit activity across time and reaching directions like panel F are also displayed in figure 2 of Lillicrap, Scott (2013, Neuron). Electrophysiological recordings of M1 neurons during a similar task in non-human primates can also be seen on “Preserved neural population dynamics across animals performing similar behaviour” figure 2 B (<ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1101/2022.09.26.509498">https://doi.org/10.1101/2022.09.26.509498</ext-link>) and “Nonlinear manifolds underlie neural population activity during behaviour” figure 2 B as well (<ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1101/2023.07.18.549575">https://doi.org/10.1101/2023.07.18.549575</ext-link>). Note that these two pre-prints use the same dataset.</p>
<p>We have added these citations to the text and made it explicit that they contain visualizations of similar modelling and empirical data for comparison:</p>
<p>“This heterogeneous set of responses matches empirical observations in non-human primate primary motor cortex recordings (Churchland &amp; Shenoy, 2007; Michaels et al., 2016) and replicate similar visualizations from previously published work (Fortunato et al., 2023; Lillicrap &amp; Scott, 2013; Safaie et al., 2023).”</p>
<disp-quote content-type="editor-comment">
<p>(4) All examples in the paper use the arm26 plant as effector. Although the authors say that &quot;users can easily declare their own custom-made effector and task objects if desired by subclassing the base Plant and Task class, respectively&quot;, this does not sound straightforward. Table 1 does not really clarify how to do it. Maybe an example that shows the actual code (see point 2) that creates a new plant (e.g. the 3-joint arm in Figure 7) would be useful.</p>
</disp-quote>
<p>Subclassing is a Python process more than a MotorNet process, as python is an object-oriented language. Therefore, there are many Python tutorials on subclassing in the general sense that would be beneficial for that purpose. We have amended the main text to ensure that this is clearer to the reader.</p>
<p>Subclassing a MotorNet object, in a more specific sense, requires overwriting some methods from the base MotorNet classes (e.g., Effector or Environment classes, which correspond to the original Plant and Task object, respectively). Since we made the decision (mentioned above) to not include code in the main text, we added tutorials to the online documentation, which include dedicated tutorials for MotorNet class subclassing. For instance, this tutorial showcases how to subclass Environment classes:</p>
<p><ext-link ext-link-type="uri" xlink:href="https://colab.research.google.com/github/OlivierCodol/MotorNet/blob/master/examples/3-environments.ipynb">https://colab.research.google.com/github/OlivierCodol/MotorNet/blob/master/examples/3-environments.ipynb</ext-link></p>
<disp-quote content-type="editor-comment">
<p>(5) One potential limitation of the toolbox is that it is based on Tensorflow, when the field of Computational Neuroscience seems to be, or at least that's my impression, transitioning to pyTorch. How easy would it be to translate MotorNet to pyTorch? Maybe the authors could comment on this in the discussion.</p>
</disp-quote>
<p>We have received a significant amount of feedback asking for a PyTorch implementation of the toolbox. Consequently, we decided to enact this, and the next version of the toolbox will be exclusively in PyTorch. We will maintain the Application Programming Interface (API) and tutorial documentation for the TensorFlow version of the toolbox on the online website. However, going forward we will focus exclusively on bug-fixing and expanding from the latest version of MotorNet, which will be in PyTorch. We now believe that the greater popularity of PyTorch in the academic community makes that choice more sustainable while helping a greater proportion of research projects.</p>
<p>These changes led to a significant alteration of the MotorNet structure, which are reflected by changes made throughout the manuscript, notably in Figure 3 and Table 1.</p>
<disp-quote content-type="editor-comment">
<p>(6) Supervised learning (SL) is widely used in Systems Neuroscience, especially because it is faster than reinforcement learning (RL). Thus providing the possibility of training the ANNs with SL is an important asset of the toolbox. However, SL is not always ideal, especially when the optimal strategy is not known or when there are different alternative strategies and we want to know which is the one preferred by the subject. For instance, would it be possible to implement a setup in which the ANN has to choose between 2 different paths to reach a target? (e.g. Kaufman et al. 2015 eLife). In such a scenario, RL seems to be a more natural option Would it be easy to extend MotorNet so it allows training with RL? Maybe the authors could comment on this in the discussion.</p>
</disp-quote>
<p>The new implementation of MotorNet that relies on PyTorch is already standardized to use an API that is compatible with Gymnasium. Gymnasium is a standard and popular interfacing toolbox used to link RL agents to environments. It is very well-documented and widely used, which will ensure that users who wish to employ RL to control MotorNet environments will be able to do so relatively effortlessly. We have added this point to accurately reflect the updated implementation, so users are aware that it is now a feature of the toolbox (new section 3.2.4.).</p>
<disp-quote content-type="editor-comment">
<p>Impact:</p>
<p>MotorNet aims at simplifying the process of simulating complex experimental setups to rapidly test hypotheses about how the brain produces a specific movement. By providing an end-to-end pipeline to train ANNs on the simulated setup, it can greatly help guide experimenters to decide where to focus their experimental efforts.</p>
<p>Additional context:</p>
<p>Being the main result a toolbox, the paper is complemented by a GitHub repository and a documentation webpage. Both the repository and the webpage are well organized and easy to navigate. The webpage walks the user through the installation of the toolbox and the building of the effectors and the ANNs.</p>
<p><bold>Reviewer #2 (Public Review):</bold></p>
<p>MotorNet aims to provide a unified interface where the trained RNN controller exists within the same TensorFlow environment as the end effectors being controlled. This architecture provides a much simpler interface for the researcher to develop and iterate through computational hypotheses. In addition, the authors have built a set of biomechanically realistic end effectors (e.g., an 2 joint arm model with realistic muscles) within TensorFlow that are fully differentiable.</p>
<p>MotorNet will prove a highly useful starting point for researchers interested in exploring the challenges of controlling movement with realistic muscle and joint dynamics. The architecture features a conveniently modular design and the inclusion of simpler arm models provides an approachable learning curve. Other state-of-the-art simulation engines offer realistic models of muscles and multi-joint arms and afford more complex object manipulation and contact dynamics than MotorNet. However, MotorNet's approach allows for direct optimization of the controller network via gradient descent rather than reinforcement learning, which is a compromise currently required when other simulation engines (as these engines' code cannot be differentiated through).</p>
<p>The paper could be reorganized to provide clearer signposts as to what role each section plays (e.g., that the explanation of the moment arms of different joint models serves to illustrate the complexity of realistic biomechanics, rather than a novel discovery/exposition of this manuscript). Also, if possible, it would be valuable if the authors could provide more insight into whether gradient descent finds qualitatively different solutions to RL or other non gradient-based methods. This would strengthen the argument that a fully differentiable plant is useful beyond improving training time / computational power required (although this is a sufficiently important rationale per se).</p>
</disp-quote>
<p>We thank the reviewer for these comments. We agree that more clarity on the section goals may improve the reader’s experience and ensured this is the case throughout the manuscript. Particularly, we added the following on the first paragraph of section 2.3, for which an explicit goal was most missing:</p>
<p>“In this section we illustrate some of these biomechanical properties displayed by MotorNet effectors using specific examples. These properties are well-characterised in the biology and are often implemented in realistic biomechanical simulation software.”</p>
<p>Regarding the potential difference in solutions obtained from reinforcement or supervised learning, this would represent a non-trivial amount of work to do so conclusively and so may not be within the scope of the current article. We do appreciate however that in some situations RL may be a more fitting approach to a given task design. In relation to this point we now specify in the discussion that the new API can accommodate interfacing with reinforcement learning toolboxes for those who may want to pursue this type of policy training approach when appropriate (new section 3.2.4.).</p>
<disp-quote content-type="editor-comment">
<p><bold>Reviewer #3 (Public Review):</bold></p>
<p>Artificial neural networks have developed into a new research tool across various disciplines of neuroscience. However, specifically for studying neural control of movement it was extremely difficult to train those models, as they require not only simulating the neural network, but also the body parts one is interested in studying. The authors provide a solution to this problem which is built upon one of the main software packages used for deep learning (Tensorflow). This allows them to make use of state-of-the-art tools for training neural networks.</p>
<p>They show that their toolbox is able to (re-)produce several commonly studied experiments e.g., planar reaching with and without loads. The toolbox is described in sufficient detail to get an overview of the functionality and the current state of what can be done with it. Although the authors state that only a few lines of code can reproduce such an experiment, they unfortunately don't provide any source code to reproduce their results (nor is it given in the respective repository).</p>
</disp-quote>
<p>The possibility of adding code snippets to the article is something we originally considered, and which aligns with comment two from reviewer one (see above). Hopefully this provides a good overview of the motivation behind our choice not to add code to the article.</p>
<disp-quote content-type="editor-comment">
<p>The modularity of the presented toolbox makes it easy to exchange or modify single parts of an experiment e.g., the task or the neural network used as a controller. Together with the open-source nature of the toolbox, this will facilitate sharing and reproducibility across research labs.</p>
</disp-quote>
<p>I can see how this paper can enable a whole set of new studies on neural control of movement and accelerate the turnover time for new ideas or hypotheses, as stated in the first paragraph of the Discussion section. Having such a low effort to run computational experiments will be definitely beneficial for the field of neural control of movement.</p>
<p>We thank the reviewer for these comment.</p>
</body>
</sub-article>
</article>